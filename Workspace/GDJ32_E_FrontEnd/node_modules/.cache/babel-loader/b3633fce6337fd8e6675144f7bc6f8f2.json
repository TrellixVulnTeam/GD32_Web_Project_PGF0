{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\GD32_E_WebProject\\\\Workspace\\\\GDJ32_E_FrontEnd\\\\src\\\\components\\\\board\\\\ReadBoardComponent.js\",\n    _s = $RefreshSig$();\n\nimport { Button } from '@material-ui/core';\nimport React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport BoardService from '../../service/BoardService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadBoardComponent = () => {\n  _s();\n\n  const history = useNavigate();\n  const {\n    state\n  } = useLocation();\n  const {\n    idx,\n    board\n  } = state; // # 2. 페이지가 로딩될때 api와 통신하여 글 객체를 가져온다\n  // useEffect(() => {\n  //     BoardService.getOneBoard(idx).then(res => {\n  //         setIdx(res.data.getIdx);\n  //         setBoard(res.data);\n  //         console.log(idx);\n  //         console.log(board);\n  //         console.log(res);\n  //     });\n  // }, []);\n  // # 3. 파라미터 값에 따라 페이지에 표시할 내용을 변경 / 게시판 타입별로 표시를 다르게 하기\n\n  const returnBoardType = categoryNo => {\n    let category = null;\n\n    if (categoryNo === 0) {\n      category = \"공지사항\";\n    } else if (categoryNo === 1) {\n      category = \"자유게시판\";\n    } else if (categoryNo === 2) {\n      category = \"자료실\";\n    } else {\n      category = \"사고팝니다\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" \\uCE74\\uD14C\\uACE0\\uB9AC : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), \" \", category]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  };\n\n  const returnDate = cTime => {\n    console.log(\"생성일 : \", {\n      cTime\n    }); // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat (date format 링크)\n\n    console.log(new Intl.DateTimeFormat('ko-KR').format(cTime));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\uC0DD\\uC131\\uC77C : [ \", new Intl.DateTimeFormat('ko-KR').format(cTime), \" ] \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  }; // # 4. 글 목록으로 이동하는 함수를 정의 \n\n\n  const goToList = () => {\n    history('/app/board', {\n      replace: false\n    });\n  };\n\n  const goToUpdate = event => {\n    event.preventDefault(); // this.props.history.push(`/create-board/${this.state.index}`);\n\n    history(`/create-board/${idx}`);\n  };\n\n  const deleteView = async function () {\n    if (window.confirm(\"정말로 글을 삭제하시겠습니까?\")) {\n      // BoardService.deleteBoard(this.state.index).then( res => {\n      BoardService.deleteBoard(idx).then(res => {\n        console.log(\"delete result => \", JSON.stringify(res));\n\n        if (res.status === 200) {\n          history('/app/board');\n        } else {\n          alert(\"글 삭제가 실패했습니다.\");\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card col-md-6 offset-md-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-center\",\n        children: \" \\uC0C1\\uC138\\uD398\\uC774\\uC9C0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [returnBoardType(board.category), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \" \\uC81C\\uBAA9 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this), \" : \", board.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \" \\uB0B4\\uC6A9 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this), \" : \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: board.content,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), returnDate(board.createdTime, board.updatedTime), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"btn btn-primary\",\n          onClick: goToList,\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"\\uAE00 \\uBAA9\\uB85D\\uC73C\\uB85C \\uC774\\uB3D9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"btn btn-info\",\n          onClick: goToUpdate,\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"\\uAE00 \\uC218\\uC815\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"btn btn-danger\",\n          onClick: () => deleteView(),\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"\\uAE00 \\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadBoardComponent, \"UV6RYaGLUESs49yTEFsqJgAfKW4=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = ReadBoardComponent;\nexport default ReadBoardComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadBoardComponent\");","map":{"version":3,"sources":["C:/GitHub/GD32_E_WebProject/Workspace/GDJ32_E_FrontEnd/src/components/board/ReadBoardComponent.js"],"names":["Button","React","useLocation","useNavigate","BoardService","ReadBoardComponent","history","state","idx","board","returnBoardType","categoryNo","category","returnDate","cTime","console","log","Intl","DateTimeFormat","format","goToList","replace","goToUpdate","event","preventDefault","deleteView","window","confirm","deleteBoard","then","res","JSON","stringify","status","alert","title","content","createdTime","updatedTime","marginLeft"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC7B,QAAMC,OAAO,GAAGH,WAAW,EAA3B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAYL,WAAW,EAA7B;AACA,QAAM;AAAEM,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAiBF,KAAvB,CAH6B,CAK7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,QAAMG,eAAe,GAAIC,UAAD,IAAgB;AACpC,QAAIC,QAAQ,GAAG,IAAf;;AACA,QAAID,UAAU,KAAK,CAAnB,EAAsB;AAClBC,MAAAA,QAAQ,GAAG,MAAX;AAEH,KAHD,MAGO,IAAID,UAAU,KAAK,CAAnB,EAAuB;AAC1BC,MAAAA,QAAQ,GAAG,OAAX;AAEH,KAHM,MAGA,IAAID,UAAU,KAAK,CAAnB,EAAuB;AAC1BC,MAAAA,QAAQ,GAAG,KAAX;AAEH,KAHM,MAGA;AACHA,MAAAA,QAAQ,GAAG,OAAX;AACH;;AAED,wBACI;AAAK,MAAA,SAAS,EAAG,KAAjB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,OACuBA,QADvB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GApBD;;AAsBA,QAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB;AAAEF,MAAAA;AAAF,KAAtB,EAD0B,CAE1B;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAIC,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,MAAjC,CAAwCL,KAAxC,CAAZ;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACI;AAAA,8CAAa,IAAIG,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,MAAjC,CAAwCL,KAAxC,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GATD,CAvC6B,CAkD7B;;;AACA,QAAMM,QAAQ,GAAG,MAAM;AACnBd,IAAAA,OAAO,CAAC,YAAD,EAAe;AAACe,MAAAA,OAAO,EAAE;AAAV,KAAf,CAAP;AACH,GAFD;;AAIA,QAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1BA,IAAAA,KAAK,CAACC,cAAN,GAD0B,CAE1B;;AACAlB,IAAAA,OAAO,CAAE,iBAAgBE,GAAI,EAAtB,CAAP;AACH,GAJD;;AAMA,QAAMiB,UAAU,GAAG,kBAAkB;AACjC,QAAGC,MAAM,CAACC,OAAP,CAAe,kBAAf,CAAH,EAAsC;AAClC;AACIvB,MAAAA,YAAY,CAACwB,WAAb,CAAyBpB,GAAzB,EAA8BqB,IAA9B,CAAoCC,GAAG,IAAI;AAC3Cf,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCe,IAAI,CAACC,SAAL,CAAeF,GAAf,CAAjC;;AACA,YAAIA,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AACpB3B,UAAAA,OAAO,CAAC,YAAD,CAAP;AACH,SAFD,MAEO;AACH4B,UAAAA,KAAK,CAAC,eAAD,CAAL;AACH;AACJ,OAPG;AAQP;AACJ,GAZD;;AAcA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAG,2BAAjB;AAAA,8BACI;AAAI,QAAA,SAAS,EAAE,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAG,WAAjB;AAAA,mBACSxB,eAAe,CAACD,KAAK,CAACG,QAAP,CADxB,eAEQ;AAAK,UAAA,SAAS,EAAG,KAAjB;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,SACqBH,KAAK,CAAC0B,KAD3B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFR,eAKQ;AAAK,UAAA,SAAS,EAAG,KAAjB;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,sBACoB;AAAA;AAAA;AAAA;AAAA,kBADpB,eAEI;AAAU,YAAA,KAAK,EAAE1B,KAAK,CAAC2B,OAAvB;AAAgC,YAAA,QAAQ;AAAxC;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBALR,EAcSvB,UAAU,CAACJ,KAAK,CAAC4B,WAAP,EAAoB5B,KAAK,CAAC6B,WAA1B,CAdnB,eAgBQ,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,iBAAlB;AAAoC,UAAA,OAAO,EAAElB,QAA7C;AAAuD,UAAA,KAAK,EAAE;AAACmB,YAAAA,UAAU,EAAC;AAAZ,WAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBR,eAiBQ,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,cAAlB;AAAiC,UAAA,OAAO,EAAEjB,UAA1C;AAAsD,UAAA,KAAK,EAAE;AAACiB,YAAAA,UAAU,EAAC;AAAZ,WAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBR,eAmBQ,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,gBAAlB;AAAmC,UAAA,OAAO,EAAE,MAAMd,UAAU,EAA5D;AAAgE,UAAA,KAAK,EAAE;AAACc,YAAAA,UAAU,EAAC;AAAZ,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBR;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH,CAvGD;;GAAMlC,kB;UACcF,W,EACED,W;;;KAFhBG,kB;AAyGN,eAAeA,kBAAf","sourcesContent":["import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport BoardService from '../../service/BoardService';\r\n\r\nconst ReadBoardComponent = () => {\r\n    const history = useNavigate();\r\n    const { state } = useLocation();\r\n    const { idx, board } = state;\r\n\r\n    // # 2. 페이지가 로딩될때 api와 통신하여 글 객체를 가져온다\r\n    // useEffect(() => {\r\n    //     BoardService.getOneBoard(idx).then(res => {\r\n    //         setIdx(res.data.getIdx);\r\n    //         setBoard(res.data);\r\n    //         console.log(idx);\r\n    //         console.log(board);\r\n    //         console.log(res);\r\n    //     });\r\n    // }, []);\r\n\r\n    // # 3. 파라미터 값에 따라 페이지에 표시할 내용을 변경 / 게시판 타입별로 표시를 다르게 하기\r\n    const returnBoardType = (categoryNo) => {\r\n        let category = null;\r\n        if (categoryNo === 0) {\r\n            category = \"공지사항\";\r\n\r\n        } else if (categoryNo === 1 ) {\r\n            category = \"자유게시판\";\r\n\r\n        } else if (categoryNo === 2 ) {\r\n            category = \"자료실\";\r\n\r\n        } else {\r\n            category = \"사고팝니다\";\r\n        }\r\n\r\n        return (\r\n            <div className = \"row\">\r\n                <h3> 카테고리 : </h3> {category}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const returnDate = (cTime) => {\r\n        console.log(\"생성일 : \", { cTime });\r\n        // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat (date format 링크)\r\n        console.log(new Intl.DateTimeFormat('ko-KR').format(cTime));\r\n        return (\r\n            <div className=\"row\">\r\n                <h3>생성일 : [ {new Intl.DateTimeFormat('ko-KR').format(cTime)} ] </h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // # 4. 글 목록으로 이동하는 함수를 정의 \r\n    const goToList = () => {\r\n        history('/app/board', {replace: false});\r\n    }\r\n\r\n    const goToUpdate = (event) => {\r\n        event.preventDefault();\r\n        // this.props.history.push(`/create-board/${this.state.index}`);\r\n        history(`/create-board/${idx}`);\r\n    }\r\n\r\n    const deleteView = async function () {\r\n        if(window.confirm(\"정말로 글을 삭제하시겠습니까?\")){\r\n            // BoardService.deleteBoard(this.state.index).then( res => {\r\n                BoardService.deleteBoard(idx).then( res => {\r\n                console.log(\"delete result => \", JSON.stringify(res));\r\n                if (res.status === 200) {\r\n                    history('/app/board');\r\n                } else {\r\n                    alert(\"글 삭제가 실패했습니다.\");\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className = \"card col-md-6 offset-md-3\">\r\n                <h3 className =\"text-center\"> 상세페이지</h3>\r\n                <div className = \"card-body\">\r\n                        {returnBoardType(board.category)}      \r\n                        <div className = \"row\">      \r\n                            <h3> 제목 </h3> : {board.title}\r\n                        </div>\r\n                        <div className = \"row\">\r\n                            <h3> 내용 </h3> : <br/>\r\n                            <textarea value={board.content} readOnly/>\r\n                            {/* {this.state.board.createtDay} */}\r\n                        </div >\r\n                        {/* <div className = \"row\">\r\n                            <label>   </label>: \r\n                            {this.state.board.memberNo}\r\n                        </div> */}\r\n                        {returnDate(board.createdTime, board.updatedTime) }\r\n                       \r\n                        <Button className=\"btn btn-primary\" onClick={goToList} style={{marginLeft:\"10px\"}}>글 목록으로 이동</Button>\r\n                        <Button className=\"btn btn-info\" onClick={goToUpdate} style={{marginLeft:\"10px\"}}>글 수정</Button>\r\n                      \r\n                        <Button className=\"btn btn-danger\" onClick={() => deleteView()} style={{marginLeft:\"10px\"}}>글 삭제</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadBoardComponent;"]},"metadata":{},"sourceType":"module"}