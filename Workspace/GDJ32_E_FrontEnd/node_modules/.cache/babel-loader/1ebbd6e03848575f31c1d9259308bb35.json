{"ast":null,"code":"import _slicedToArray from \"C:/GitHub/GDJ32_E_WebProject/Workspace/GDJ32_E_FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\r\n * @ignore - internal component.\r\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction Ripple(props) {\n  var className = props.className,\n      classes = props.classes,\n      _props$pulsate = props.pulsate,\n      pulsate = _props$pulsate === void 0 ? false : _props$pulsate,\n      rippleX = props.rippleX,\n      rippleY = props.rippleY,\n      rippleSize = props.rippleSize,\n      inProp = props.in,\n      _props$onExited = props.onExited,\n      onExited = _props$onExited === void 0 ? function () {} : _props$onExited,\n      timeout = props.timeout;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      leaving = _React$useState2[0],\n      setLeaving = _React$useState2[1];\n\n  var rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);\n  var rippleStyles = {\n    width: rippleSize,\n    height: rippleSize,\n    top: -(rippleSize / 2) + rippleY,\n    left: -(rippleSize / 2) + rippleX\n  };\n  var childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);\n  var handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\n\n  useEnhancedEffect(function () {\n    if (!inProp) {\n      // react-transition-group#onExit\n      setLeaving(true); // react-transition-group#onExited\n\n      var timeoutId = setTimeout(handleExited, timeout);\n      return function () {\n        clearTimeout(timeoutId);\n      };\n    }\n\n    return undefined;\n  }, [handleExited, inProp, timeout]);\n  return /*#__PURE__*/_jsx(\"span\", {\n    className: rippleClassName,\n    style: rippleStyles,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: childClassName\n    })\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Ripple.propTypes = {\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n\n  /**\r\n   * @ignore - injected from TransitionGroup\r\n   */\n  in: PropTypes.bool,\n\n  /**\r\n   * @ignore - injected from TransitionGroup\r\n   */\n  onExited: PropTypes.func,\n\n  /**\r\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\r\n   */\n  pulsate: PropTypes.bool,\n\n  /**\r\n   * Diameter of the ripple.\r\n   */\n  rippleSize: PropTypes.number,\n\n  /**\r\n   * Horizontal position of the ripple center.\r\n   */\n  rippleX: PropTypes.number,\n\n  /**\r\n   * Vertical position of the ripple center.\r\n   */\n  rippleY: PropTypes.number,\n\n  /**\r\n   * exit delay\r\n   */\n  timeout: PropTypes.number.isRequired\n} : void 0;\nexport default Ripple;","map":{"version":3,"sources":["C:/GitHub/GDJ32_E_WebProject/Workspace/GDJ32_E_FrontEnd/node_modules/@material-ui/core/ButtonBase/Ripple.js"],"names":["React","PropTypes","clsx","useEventCallback","useEnhancedEffect","jsx","_jsx","Ripple","props","className","classes","pulsate","rippleX","rippleY","rippleSize","inProp","in","onExited","timeout","useState","leaving","setLeaving","rippleClassName","ripple","rippleVisible","ripplePulsate","rippleStyles","width","height","top","left","childClassName","child","childLeaving","childPulsate","handleExited","timeoutId","setTimeout","clearTimeout","undefined","style","children","process","env","NODE_ENV","propTypes","object","isRequired","string","bool","func","number"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport useEventCallback from '../utils/useEventCallback';\r\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\r\n/**\r\n * @ignore - internal component.\r\n */\r\n\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\n\r\nfunction Ripple(props) {\r\n  const {\r\n    className,\r\n    classes,\r\n    pulsate = false,\r\n    rippleX,\r\n    rippleY,\r\n    rippleSize,\r\n    in: inProp,\r\n    onExited = () => {},\r\n    timeout\r\n  } = props;\r\n  const [leaving, setLeaving] = React.useState(false);\r\n  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);\r\n  const rippleStyles = {\r\n    width: rippleSize,\r\n    height: rippleSize,\r\n    top: -(rippleSize / 2) + rippleY,\r\n    left: -(rippleSize / 2) + rippleX\r\n  };\r\n  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);\r\n  const handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\r\n\r\n  useEnhancedEffect(() => {\r\n    if (!inProp) {\r\n      // react-transition-group#onExit\r\n      setLeaving(true); // react-transition-group#onExited\r\n\r\n      const timeoutId = setTimeout(handleExited, timeout);\r\n      return () => {\r\n        clearTimeout(timeoutId);\r\n      };\r\n    }\r\n\r\n    return undefined;\r\n  }, [handleExited, inProp, timeout]);\r\n  return /*#__PURE__*/_jsx(\"span\", {\r\n    className: rippleClassName,\r\n    style: rippleStyles,\r\n    children: /*#__PURE__*/_jsx(\"span\", {\r\n      className: childClassName\r\n    })\r\n  });\r\n}\r\n\r\nprocess.env.NODE_ENV !== \"production\" ? Ripple.propTypes = {\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\r\n  classes: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * @ignore - injected from TransitionGroup\r\n   */\r\n  in: PropTypes.bool,\r\n\r\n  /**\r\n   * @ignore - injected from TransitionGroup\r\n   */\r\n  onExited: PropTypes.func,\r\n\r\n  /**\r\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\r\n   */\r\n  pulsate: PropTypes.bool,\r\n\r\n  /**\r\n   * Diameter of the ripple.\r\n   */\r\n  rippleSize: PropTypes.number,\r\n\r\n  /**\r\n   * Horizontal position of the ripple center.\r\n   */\r\n  rippleX: PropTypes.number,\r\n\r\n  /**\r\n   * Vertical position of the ripple center.\r\n   */\r\n  rippleY: PropTypes.number,\r\n\r\n  /**\r\n   * exit delay\r\n   */\r\n  timeout: PropTypes.number.isRequired\r\n} : void 0;\r\nexport default Ripple;"]},"metadata":{},"sourceType":"module"}