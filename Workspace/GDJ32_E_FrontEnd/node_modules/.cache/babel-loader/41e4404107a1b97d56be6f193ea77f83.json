{"ast":null,"code":"import _regeneratorRuntime from\"C:/GitHub/GDJ32_E_WebProject/Workspace/GDJ32_E_FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/GitHub/GDJ32_E_WebProject/Workspace/GDJ32_E_FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Box,Button,Card// Container,\n,Grid// Link,\n,TextField,Divider,CardContent,CardHeader,Typography}from'@material-ui/core';import React from'react';import{useLocation,useNavigate}from'react-router-dom';import BoardService from'../../service/BoardService';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var ReadBoardComponent=function ReadBoardComponent(){var history=useNavigate();var _useLocation=useLocation(),state=_useLocation.state;// const { pIdx, pBoard } = state;\nvar pIdx=state.idx;var pBoard=state.board;// # 2. 페이지가 로딩될때 api와 통신하여 글 객체를 가져온다\n// useEffect(() => {\n//     BoardService.getOneBoard(idx).then(res => {\n//         setIdx(res.data.getIdx);\n//         setBoard(res.data);\n//         console.log(idx);\n//         console.log(board);\n//         console.log(res);\n//     });\n// }, []);\n// # 3. 파라미터 값에 따라 페이지에 표시할 내용을 변경 / 게시판 타입별로 표시를 다르게 하기\nvar returnBoardType=function returnBoardType(categoryNo){var category=null;if(categoryNo===0){category=\"공지사항\";}else if(categoryNo===1){category=\"자유게시판\";}else if(categoryNo===2){category=\"자료실\";}else{category=\"사고팝니다\";}return/*#__PURE__*/_jsxs(Typography,{variant:\"h4\",gutterBottom:true,children:[\"\\uCE74\\uD14C\\uACE0\\uB9AC : \",category]});};var returnDate=function returnDate(cTime){console.log(\"생성일 : \",{cTime:cTime});// https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat (date format 링크)\nconsole.log(new Intl.DateTimeFormat('ko-KR').format(cTime));return/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsxs(\"h3\",{children:[\"\\uC0DD\\uC131\\uC77C : [ \",new Intl.DateTimeFormat('ko-KR').format(cTime),\" ] \"]})});};// # 4. 글 목록으로 이동하는 함수를 정의 \nvar goToList=function goToList(){history('/app/board/1',{replace:true});};var goToUpdate=function goToUpdate(event){event.preventDefault();// this.props.history.push(`/create-board/${this.state.index}`);\nhistory(\"/app/create-board/\".concat(pIdx),{replace:true,state:{idx:pIdx,board:pBoard}});};var deleteView=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(window.confirm(\"정말로 글을 삭제하시겠습니까?\")){// BoardService.deleteBoard(this.state.index).then( res => {\nBoardService.deleteBoard(pIdx).then(function(res){console.log(\"delete result => \",JSON.stringify(res));if(res.status===200){history('/app/board/1');}else{alert(\"글 삭제가 실패했습니다.\");}});}case 1:case\"end\":return _context.stop();}}},_callee);}));return function deleteView(){return _ref.apply(this,arguments);};}();var textFieldStyle={marginTop:8,width:'80%',height:\"550px  \"};return/*#__PURE__*/_jsx(Box,{children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(CardHeader,{variant:\"h2\",subheader:\"\\uAC8C\\uC2DC\\uAE00 \\uBCF4\\uAE30\",title:\"\\uAC8C\\uC2DC\\uAE00\"}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Grid,{children:/*#__PURE__*/_jsxs(Typography,{variant:\"h3\",marginBottom:\"25px\",children:[\"\\uC81C\\uBAA9 : \",pBoard.title]})}),/*#__PURE__*/_jsxs(Grid,{marginBottom:\"50px\",children:[/*#__PURE__*/_jsx(Typography,{marginBottom:\"25px\",marginRight:\"350px\",align:\"right\",children:returnBoardType(pBoard.category)}),/*#__PURE__*/_jsx(TextField,{defaultValue:pBoard.content,label:\"\\uB0B4\\uC6A9\",InputProps:{readOnly:true},size:\"medium\",margin:\"normal\",multiline:\"true\",rows:\"20\",rowsMax:\"20\",style:textFieldStyle})]}),/*#__PURE__*/_jsx(Grid,{marginRight:\"300px\",marginBottom:\"50px\",children:/*#__PURE__*/_jsx(Typography,{align:\"right\",children:returnDate(pBoard.createdTime,pBoard.updatedTime)})}),/*#__PURE__*/_jsxs(Grid,{marginRight:\"300px\",align:\"right\",children:[/*#__PURE__*/_jsx(Button,{onClick:goToList,style:{marginLeft:\"10px\"},variant:\"contained\",color:\"primary\",children:\"\\uAE00 \\uBAA9\\uB85D\\uC73C\\uB85C \\uC774\\uB3D9\"}),/*#__PURE__*/_jsx(Button,{onClick:goToUpdate,style:{marginLeft:\"10px\"},variant:\"contained\",color:\"primary\",children:\"\\uAE00 \\uC218\\uC815\"}),/*#__PURE__*/_jsx(Button,{onClick:function onClick(){return deleteView();},style:{marginLeft:\"10px\"},variant:\"contained\",color:\"primary\",children:\"\\uAE00 \\uC0AD\\uC81C\"})]})]})]})});};export default ReadBoardComponent;","map":{"version":3,"sources":["C:/GitHub/GDJ32_E_WebProject/Workspace/GDJ32_E_FrontEnd/src/components/board/ReadBoardComponent.js"],"names":["Box","Button","Card","Grid","TextField","Divider","CardContent","CardHeader","Typography","React","useLocation","useNavigate","BoardService","ReadBoardComponent","history","state","pIdx","idx","pBoard","board","returnBoardType","categoryNo","category","returnDate","cTime","console","log","Intl","DateTimeFormat","format","goToList","replace","goToUpdate","event","preventDefault","deleteView","window","confirm","deleteBoard","then","res","JSON","stringify","status","alert","textFieldStyle","marginTop","width","height","title","content","readOnly","createdTime","updatedTime","marginLeft"],"mappings":"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","sourcesContent":["import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    // Container,\r\n    Grid,\r\n    // Link,\r\n    TextField,\r\n    Divider,\r\n    CardContent,\r\n    CardHeader,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport BoardService from '../../service/BoardService';\r\n\r\nconst ReadBoardComponent = () => {\r\n    const history = useNavigate();\r\n    const { state } = useLocation();\r\n    // const { pIdx, pBoard } = state;\r\n    const pIdx = state.idx;\r\n    const pBoard = state.board;\r\n\r\n    // # 2. 페이지가 로딩될때 api와 통신하여 글 객체를 가져온다\r\n    // useEffect(() => {\r\n    //     BoardService.getOneBoard(idx).then(res => {\r\n    //         setIdx(res.data.getIdx);\r\n    //         setBoard(res.data);\r\n    //         console.log(idx);\r\n    //         console.log(board);\r\n    //         console.log(res);\r\n    //     });\r\n    // }, []);\r\n\r\n    // # 3. 파라미터 값에 따라 페이지에 표시할 내용을 변경 / 게시판 타입별로 표시를 다르게 하기\r\n    const returnBoardType = (categoryNo) => {\r\n        let category = null;\r\n        if (categoryNo === 0) {\r\n            category = \"공지사항\";\r\n\r\n        } else if (categoryNo === 1) {\r\n            category = \"자유게시판\";\r\n\r\n        } else if (categoryNo === 2) {\r\n            category = \"자료실\";\r\n\r\n        } else {\r\n            category = \"사고팝니다\";\r\n        }\r\n\r\n        return (\r\n            <Typography\r\n                variant=\"h4\"\r\n                gutterBottom>\r\n                카테고리 : {category}\r\n            </Typography>\r\n        )\r\n    }\r\n\r\n    const returnDate = (cTime) => {\r\n        console.log(\"생성일 : \", { cTime });\r\n        // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat (date format 링크)\r\n        console.log(new Intl.DateTimeFormat('ko-KR').format(cTime));\r\n        return (\r\n            <div className=\"row\">\r\n                <h3>생성일 : [ {new Intl.DateTimeFormat('ko-KR').format(cTime)} ] </h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // # 4. 글 목록으로 이동하는 함수를 정의 \r\n    const goToList = () => {\r\n        history('/app/board/1', { replace: true });\r\n    }\r\n\r\n    const goToUpdate = (event) => {\r\n        event.preventDefault();\r\n        // this.props.history.push(`/create-board/${this.state.index}`);\r\n        history(`/app/create-board/${pIdx}`, {\r\n            replace: true,\r\n            state: {\r\n                idx: pIdx,\r\n                board: pBoard\r\n            }\r\n        });\r\n    }\r\n\r\n    const deleteView = async function () {\r\n        if (window.confirm(\"정말로 글을 삭제하시겠습니까?\")) {\r\n            // BoardService.deleteBoard(this.state.index).then( res => {\r\n            BoardService.deleteBoard(pIdx).then(res => {\r\n                console.log(\"delete result => \", JSON.stringify(res));\r\n                if (res.status === 200) {\r\n                    history('/app/board/1');\r\n                } else {\r\n                    alert(\"글 삭제가 실패했습니다.\");\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const textFieldStyle = {\r\n        marginTop: 8,\r\n        width: '80%',\r\n        height: \"550px  \"\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Box>\r\n            <Card>\r\n                <CardHeader\r\n                    variant=\"h2\"\r\n                    subheader=\"게시글 보기\"\r\n                    title=\"게시글\"\r\n                />\r\n                <Divider />\r\n                <CardContent>\r\n                    <Grid >\r\n                        <Typography\r\n                            variant=\"h3\"\r\n                            marginBottom=\"25px\"\r\n                        >\r\n                            제목 : {pBoard.title}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid\r\n                        marginBottom=\"50px\">\r\n                        <Typography\r\n                            marginBottom=\"25px\"\r\n                            marginRight=\"350px\"\r\n                            align=\"right\">\r\n                            {returnBoardType(pBoard.category)}\r\n                        </Typography>\r\n                        <TextField\r\n                            defaultValue={pBoard.content}\r\n                            label=\"내용\"\r\n                            InputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                            size=\"medium\"\r\n                            margin=\"normal\"\r\n                            multiline=\"true\"\r\n                            rows=\"20\"\r\n                            rowsMax=\"20\"\r\n                            style={textFieldStyle}\r\n                        />\r\n                    </Grid>\r\n                    <Grid\r\n                        marginRight=\"300px\"\r\n                        marginBottom=\"50px\">\r\n                        <Typography\r\n                            align=\"right\">\r\n                            {returnDate(pBoard.createdTime, pBoard.updatedTime)}\r\n                        </Typography>\r\n\r\n                    </Grid>\r\n                    <Grid\r\n                        marginRight=\"300px\"\r\n                        align=\"right\">\r\n                        <Button\r\n                            onClick={goToList}\r\n                            style={{ marginLeft: \"10px\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            글 목록으로 이동\r\n                        </Button>\r\n                        <Button\r\n                            onClick={goToUpdate}\r\n                            style={{ marginLeft: \"10px\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            글 수정\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => deleteView()}\r\n                            style={{ marginLeft: \"10px\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            글 삭제\r\n                        </Button>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card >\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default ReadBoardComponent;"]},"metadata":{},"sourceType":"module"}