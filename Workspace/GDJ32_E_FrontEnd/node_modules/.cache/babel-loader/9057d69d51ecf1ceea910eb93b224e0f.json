{"ast":null,"code":"import _slicedToArray from \"C:/GitHub/GDJ32_E_WebProject/Workspace/GDJ32_E_FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getDisplayName } from '@material-ui/utils';\nimport { getThemeProps } from '@material-ui/styles';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport useTheme from '../styles/useTheme';\nimport { breakpointKeys } from '../styles/createBreakpoints';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport useMediaQuery from '../useMediaQuery'; // By default, returns true if screen width is the same or greater than the given breakpoint.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var isWidthUp = function isWidthUp(breakpoint, width) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (inclusive) {\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\n  }\n\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\n}; // By default, returns true if screen width is the same or less than the given breakpoint.\n\nexport var isWidthDown = function isWidthDown(breakpoint, width) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (inclusive) {\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\n  }\n\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\n};\n\nvar withWidth = function withWidth() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (Component) {\n    var _options$withTheme = options.withTheme,\n        withThemeOption = _options$withTheme === void 0 ? false : _options$withTheme,\n        _options$noSSR = options.noSSR,\n        noSSR = _options$noSSR === void 0 ? false : _options$noSSR,\n        initialWidthOption = options.initialWidth;\n\n    function WithWidth(props) {\n      var contextTheme = useTheme();\n      var theme = props.theme || contextTheme;\n\n      var _getThemeProps = getThemeProps({\n        theme: theme,\n        name: 'MuiWithWidth',\n        props: props\n      }),\n          initialWidth = _getThemeProps.initialWidth,\n          width = _getThemeProps.width,\n          other = _objectWithoutPropertiesLoose(_getThemeProps, [\"initialWidth\", \"width\"]);\n\n      var _React$useState = React.useState(false),\n          _React$useState2 = _slicedToArray(_React$useState, 2),\n          mountedState = _React$useState2[0],\n          setMountedState = _React$useState2[1];\n\n      useEnhancedEffect(function () {\n        setMountedState(true);\n      }, []);\n      /**\r\n       * innerWidth |xs      sm      md      lg      xl\r\n       *            |-------|-------|-------|-------|------>\r\n       * width      |  xs   |  sm   |  md   |  lg   |  xl\r\n       */\n\n      var keys = theme.breakpoints.keys.slice().reverse();\n      var widthComputed = keys.reduce(function (output, key) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        var matches = useMediaQuery(theme.breakpoints.up(key));\n        return !output && matches ? key : output;\n      }, null);\n\n      var more = _extends({\n        width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption\n      }, withThemeOption ? {\n        theme: theme\n      } : {}, other); // When rendering the component on the server,\n      // we have no idea about the client browser screen width.\n      // In order to prevent blinks and help the reconciliation of the React tree\n      // we are not rendering the child component.\n      //\n      // An alternative is to use the `initialWidth` property.\n\n\n      if (more.width === undefined) {\n        return null;\n      }\n\n      return /*#__PURE__*/_jsx(Component, _extends({}, more));\n    }\n\n    process.env.NODE_ENV !== \"production\" ? WithWidth.propTypes = {\n      /**\r\n       * As `window.innerWidth` is unavailable on the server,\r\n       * we default to rendering an empty component during the first mount.\r\n       * You might want to use a heuristic to approximate\r\n       * the screen width of the client browser screen width.\r\n       *\r\n       * For instance, you could be using the user-agent or the client-hints.\r\n       * https://caniuse.com/#search=client%20hint\r\n       */\n      initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n      /**\r\n       * @ignore\r\n       */\n      theme: PropTypes.object,\n\n      /**\r\n       * Bypass the width calculation logic.\r\n       */\n      width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n    } : void 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      WithWidth.displayName = \"WithWidth(\".concat(getDisplayName(Component), \")\");\n    }\n\n    hoistNonReactStatics(WithWidth, Component);\n    return WithWidth;\n  };\n};\n\nexport default withWidth;","map":{"version":3,"sources":["C:/GitHub/GDJ32_E_WebProject/Workspace/GDJ32_E_FrontEnd/node_modules/@material-ui/core/withWidth/withWidth.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","getDisplayName","getThemeProps","hoistNonReactStatics","useTheme","breakpointKeys","useEnhancedEffect","useMediaQuery","jsx","_jsx","isWidthUp","breakpoint","width","inclusive","indexOf","isWidthDown","withWidth","options","Component","withTheme","withThemeOption","noSSR","initialWidthOption","initialWidth","WithWidth","props","contextTheme","theme","_getThemeProps","name","other","useState","mountedState","setMountedState","keys","breakpoints","slice","reverse","widthComputed","reduce","output","key","matches","up","more","undefined","process","env","NODE_ENV","propTypes","oneOf","object","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getDisplayName } from '@material-ui/utils';\r\nimport { getThemeProps } from '@material-ui/styles';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport useTheme from '../styles/useTheme';\r\nimport { breakpointKeys } from '../styles/createBreakpoints';\r\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\r\nimport useMediaQuery from '../useMediaQuery'; // By default, returns true if screen width is the same or greater than the given breakpoint.\r\n\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport const isWidthUp = (breakpoint, width, inclusive = true) => {\r\n  if (inclusive) {\r\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\r\n  }\r\n\r\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\r\n}; // By default, returns true if screen width is the same or less than the given breakpoint.\r\n\r\nexport const isWidthDown = (breakpoint, width, inclusive = false) => {\r\n  if (inclusive) {\r\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\r\n  }\r\n\r\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\r\n};\r\n\r\nconst withWidth = (options = {}) => Component => {\r\n  const {\r\n    withTheme: withThemeOption = false,\r\n    noSSR = false,\r\n    initialWidth: initialWidthOption\r\n  } = options;\r\n\r\n  function WithWidth(props) {\r\n    const contextTheme = useTheme();\r\n    const theme = props.theme || contextTheme;\r\n\r\n    const _getThemeProps = getThemeProps({\r\n      theme,\r\n      name: 'MuiWithWidth',\r\n      props\r\n    }),\r\n          {\r\n      initialWidth,\r\n      width\r\n    } = _getThemeProps,\r\n          other = _objectWithoutPropertiesLoose(_getThemeProps, [\"initialWidth\", \"width\"]);\r\n\r\n    const [mountedState, setMountedState] = React.useState(false);\r\n    useEnhancedEffect(() => {\r\n      setMountedState(true);\r\n    }, []);\r\n    /**\r\n     * innerWidth |xs      sm      md      lg      xl\r\n     *            |-------|-------|-------|-------|------>\r\n     * width      |  xs   |  sm   |  md   |  lg   |  xl\r\n     */\r\n\r\n    const keys = theme.breakpoints.keys.slice().reverse();\r\n    const widthComputed = keys.reduce((output, key) => {\r\n      // eslint-disable-next-line react-hooks/rules-of-hooks\r\n      const matches = useMediaQuery(theme.breakpoints.up(key));\r\n      return !output && matches ? key : output;\r\n    }, null);\r\n\r\n    const more = _extends({\r\n      width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption\r\n    }, withThemeOption ? {\r\n      theme\r\n    } : {}, other); // When rendering the component on the server,\r\n    // we have no idea about the client browser screen width.\r\n    // In order to prevent blinks and help the reconciliation of the React tree\r\n    // we are not rendering the child component.\r\n    //\r\n    // An alternative is to use the `initialWidth` property.\r\n\r\n\r\n    if (more.width === undefined) {\r\n      return null;\r\n    }\r\n\r\n    return /*#__PURE__*/_jsx(Component, _extends({}, more));\r\n  }\r\n\r\n  process.env.NODE_ENV !== \"production\" ? WithWidth.propTypes = {\r\n    /**\r\n     * As `window.innerWidth` is unavailable on the server,\r\n     * we default to rendering an empty component during the first mount.\r\n     * You might want to use a heuristic to approximate\r\n     * the screen width of the client browser screen width.\r\n     *\r\n     * For instance, you could be using the user-agent or the client-hints.\r\n     * https://caniuse.com/#search=client%20hint\r\n     */\r\n    initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    theme: PropTypes.object,\r\n\r\n    /**\r\n     * Bypass the width calculation logic.\r\n     */\r\n    width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\r\n  } : void 0;\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;\r\n  }\r\n\r\n  hoistNonReactStatics(WithWidth, Component);\r\n  return WithWidth;\r\n};\r\n\r\nexport default withWidth;"]},"metadata":{},"sourceType":"module"}