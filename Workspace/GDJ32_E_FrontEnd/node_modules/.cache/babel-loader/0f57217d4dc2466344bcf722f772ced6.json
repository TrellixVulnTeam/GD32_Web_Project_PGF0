{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport useThemeProps from '../styles/useThemeProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar _ref = /*#__PURE__*/_jsx(Input, {});\n\nvar _ref2 = /*#__PURE__*/_jsx(FilledInput, {});\n\nconst Select = /*#__PURE__*/React.forwardRef(function Select(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSelect',\n    props: inProps\n  });\n\n  const {\n    autoWidth = false,\n    children,\n    classes = {},\n    className,\n    displayEmpty = false,\n    IconComponent = ArrowDropDownIcon,\n    id,\n    input,\n    inputProps,\n    label,\n    labelId,\n    MenuProps,\n    multiple = false,\n    native = false,\n    onClose,\n    onOpen,\n    open,\n    renderValue,\n    SelectDisplayProps,\n    variant: variantProps = 'outlined'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoWidth\", \"children\", \"classes\", \"className\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  const inputComponent = native ? NativeSelectInput : SelectInput;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const variant = fcs.variant || variantProps;\n  const InputComponent = input || {\n    standard: _ref,\n    outlined: /*#__PURE__*/_jsx(OutlinedInput, {\n      label: label\n    }),\n    filled: _ref2\n  }[variant];\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent,\n    inputProps: _extends({\n      children,\n      IconComponent,\n      variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple\n    }, native ? {\n      id\n    } : {\n      autoWidth,\n      displayEmpty,\n      labelId,\n      MenuProps,\n      onClose,\n      onOpen,\n      open,\n      renderValue,\n      SelectDisplayProps: _extends({\n        id\n      }, SelectDisplayProps)\n    }, inputProps, {\n      classes: inputProps ? deepmerge(classes, inputProps.classes) : classes\n    }, input ? input.props.inputProps : {})\n  }, multiple && native && variant === 'outlined' ? {\n    notched: true\n  } : {}, {\n    ref,\n    className: clsx(className, InputComponent.props.className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   * @default false\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which\n   * returns the value to be displayed when no items are selected.\n   *\n   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\n   * The label should either be hidden or forced to a shrunk state.\n   * @default false\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * The `id` of the wrapper element or the `select` element when `native`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  label: PropTypes.node,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component uses a native `select` element.\n   * @default false\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The `input` value. Providing an empty string will select no options.\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default Select;","map":{"version":3,"sources":["C:/GitHub/GD32_E_WebProject/Workspace/GDJ32_E_FrontEnd/node_modules/@material-ui/core/Select/Select.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","deepmerge","SelectInput","formControlState","useFormControl","ArrowDropDownIcon","Input","NativeSelectInput","FilledInput","OutlinedInput","useThemeProps","jsx","_jsx","_ref","_ref2","Select","forwardRef","inProps","ref","props","name","autoWidth","children","classes","className","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant","variantProps","other","inputComponent","muiFormControl","fcs","states","InputComponent","standard","outlined","filled","cloneElement","type","undefined","notched","process","env","NODE_ENV","propTypes","bool","node","object","string","defaultValue","any","elementType","element","onChange","func","sx","value","oneOf","muiName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport useThemeProps from '../styles/useThemeProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar _ref = /*#__PURE__*/_jsx(Input, {});\n\nvar _ref2 = /*#__PURE__*/_jsx(FilledInput, {});\n\nconst Select = /*#__PURE__*/React.forwardRef(function Select(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSelect',\n    props: inProps\n  });\n\n  const {\n    autoWidth = false,\n    children,\n    classes = {},\n    className,\n    displayEmpty = false,\n    IconComponent = ArrowDropDownIcon,\n    id,\n    input,\n    inputProps,\n    label,\n    labelId,\n    MenuProps,\n    multiple = false,\n    native = false,\n    onClose,\n    onOpen,\n    open,\n    renderValue,\n    SelectDisplayProps,\n    variant: variantProps = 'outlined'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoWidth\", \"children\", \"classes\", \"className\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  const inputComponent = native ? NativeSelectInput : SelectInput;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const variant = fcs.variant || variantProps;\n  const InputComponent = input || {\n    standard: _ref,\n    outlined: /*#__PURE__*/_jsx(OutlinedInput, {\n      label: label\n    }),\n    filled: _ref2\n  }[variant];\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent,\n    inputProps: _extends({\n      children,\n      IconComponent,\n      variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple\n    }, native ? {\n      id\n    } : {\n      autoWidth,\n      displayEmpty,\n      labelId,\n      MenuProps,\n      onClose,\n      onOpen,\n      open,\n      renderValue,\n      SelectDisplayProps: _extends({\n        id\n      }, SelectDisplayProps)\n    }, inputProps, {\n      classes: inputProps ? deepmerge(classes, inputProps.classes) : classes\n    }, input ? input.props.inputProps : {})\n  }, multiple && native && variant === 'outlined' ? {\n    notched: true\n  } : {}, {\n    ref,\n    className: clsx(className, InputComponent.props.className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   * @default false\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which\n   * returns the value to be displayed when no items are selected.\n   *\n   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\n   * The label should either be hidden or forced to a shrunk state.\n   * @default false\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * The `id` of the wrapper element or the `select` element when `native`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  label: PropTypes.node,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component uses a native `select` element.\n   * @default false\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The `input` value. Providing an empty string will select no options.\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default Select;"]},"metadata":{},"sourceType":"module"}