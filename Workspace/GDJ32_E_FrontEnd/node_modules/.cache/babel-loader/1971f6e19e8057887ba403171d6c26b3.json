{"ast":null,"code":"import axios from 'axios'; // axios를 사용하는 것을 의미\n\nconst BOARD_API_BASE_URL = \"http://localhost:8080/api/board\"; // spring boot api url를 정의\n\nclass BoardService {\n  getBoards(p_num) {\n    console.log(\"getBoards\");\n    return axios.get(BOARD_API_BASE_URL + \"?p_num=\" + p_num); // 표시할 페이지 번호를 파라미터로 설정하여 통신하도록 함\n  }\n\n  createBoard(board) {\n    console.log(\"createBoards\");\n    return axios.post(BOARD_API_BASE_URL, board);\n  } // getOneBoard(index){\n  //     console.log(\"readBoards: \"+index);\n  //     return axios.get(BOARD_API_BASE_URL + \"/\" + index);\n  // }\n\n\n  getOneBoard(idx) {\n    console.log(\"readBoards: \" + idx);\n    return axios.get(BOARD_API_BASE_URL + \"/\" + idx);\n  } // updateBoard(index, board){\n  //     return axios.put(BOARD_API_BASE_URL + \"/\" + index,board);\n  // }\n\n\n  updateBoard(idx, board) {\n    return axios.put(BOARD_API_BASE_URL + \"/\" + idx, board);\n  } // deleteBoard(index) {\n  //     return axios.delete(BOARD_API_BASE_URL + \"/\" + index);\n  // }\n\n\n  deleteBoard(idx) {\n    return axios.delete(BOARD_API_BASE_URL + \"/\" + idx);\n  }\n\n}\n\nexport default new BoardService();","map":{"version":3,"sources":["C:/GitHub/GDJ32_E_WebProject/Workspace/GDJ32_E_FrontEnd/src/service/BoardService.js"],"names":["axios","BOARD_API_BASE_URL","BoardService","getBoards","p_num","console","log","get","createBoard","board","post","getOneBoard","idx","updateBoard","put","deleteBoard","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA2B;;AAE3B,MAAMC,kBAAkB,GAAG,iCAA3B,C,CAA8D;;AAE9D,MAAMC,YAAN,CAAmB;AAEfC,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,WAAON,KAAK,CAACO,GAAN,CAAUN,kBAAkB,GAAG,SAArB,GAAgCG,KAA1C,CAAP,CAFa,CAE4C;AAC5D;;AAEDI,EAAAA,WAAW,CAACC,KAAD,EAAO;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,WAAON,KAAK,CAACU,IAAN,CAAWT,kBAAX,EAA8BQ,KAA9B,CAAP;AACH,GAVc,CAYf;AACA;AACA;AACA;;;AAEAE,EAAAA,WAAW,CAACC,GAAD,EAAK;AACZP,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAeM,GAA3B;AACA,WAAOZ,KAAK,CAACO,GAAN,CAAUN,kBAAkB,GAAG,GAArB,GAA2BW,GAArC,CAAP;AACH,GApBc,CAsBf;AACA;AACA;;;AACAC,EAAAA,WAAW,CAACD,GAAD,EAAMH,KAAN,EAAY;AACnB,WAAOT,KAAK,CAACc,GAAN,CAAUb,kBAAkB,GAAG,GAArB,GAA2BW,GAArC,EAAyCH,KAAzC,CAAP;AACH,GA3Bc,CA6Bf;AACA;AACA;;;AACAM,EAAAA,WAAW,CAACH,GAAD,EAAM;AACb,WAAOZ,KAAK,CAACgB,MAAN,CAAaf,kBAAkB,GAAG,GAArB,GAA2BW,GAAxC,CAAP;AACH;;AAlCc;;AAuCnB,eAAe,IAAIV,YAAJ,EAAf","sourcesContent":["import axios from 'axios'; // axios를 사용하는 것을 의미\r\n\r\nconst BOARD_API_BASE_URL = \"http://localhost:8080/api/board\"; // spring boot api url를 정의\r\n\r\nclass BoardService {\r\n\r\n    getBoards(p_num) {\r\n        console.log(\"getBoards\");\r\n        return axios.get(BOARD_API_BASE_URL + \"?p_num=\"+ p_num); // 표시할 페이지 번호를 파라미터로 설정하여 통신하도록 함\r\n    }\r\n\r\n    createBoard(board){\r\n        console.log(\"createBoards\");\r\n        return axios.post(BOARD_API_BASE_URL,board);\r\n    }\r\n    \r\n    // getOneBoard(index){\r\n    //     console.log(\"readBoards: \"+index);\r\n    //     return axios.get(BOARD_API_BASE_URL + \"/\" + index);\r\n    // }\r\n\r\n    getOneBoard(idx){\r\n        console.log(\"readBoards: \"+idx);\r\n        return axios.get(BOARD_API_BASE_URL + \"/\" + idx);\r\n    }\r\n\r\n    // updateBoard(index, board){\r\n    //     return axios.put(BOARD_API_BASE_URL + \"/\" + index,board);\r\n    // }\r\n    updateBoard(idx, board){\r\n        return axios.put(BOARD_API_BASE_URL + \"/\" + idx,board);\r\n    }\r\n\r\n    // deleteBoard(index) {\r\n    //     return axios.delete(BOARD_API_BASE_URL + \"/\" + index);\r\n    // }\r\n    deleteBoard(idx) {\r\n        return axios.delete(BOARD_API_BASE_URL + \"/\" + idx);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default new BoardService();"]},"metadata":{},"sourceType":"module"}