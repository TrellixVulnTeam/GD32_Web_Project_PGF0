{"ast":null,"code":"var _jsxFileName = \"D:\\\\gits\\\\GDJ_32\\\\SubBranch\\\\Workspace\\\\GDJ32_E_FrontEnd\\\\src\\\\components\\\\board\\\\ReadBoardComponent.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Card // Container,\n, Grid // Link,\n, TextField, Divider, CardContent, CardHeader, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport BoardService from '../../service/BoardService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadBoardComponent = () => {\n  _s();\n\n  const history = useNavigate();\n  const {\n    state\n  } = useLocation(); // const { pIdx, pBoard } = state;\n\n  const pIdx = state.idx;\n  const pBoard = state.board; // # 2. 페이지가 로딩될때 api와 통신하여 글 객체를 가져온다\n  // useEffect(() => {\n  //     BoardService.getOneBoard(idx).then(res => {\n  //         setIdx(res.data.getIdx);\n  //         setBoard(res.data);\n  //         console.log(idx);\n  //         console.log(board);\n  //         console.log(res);\n  //     });\n  // }, []);\n  // # 3. 파라미터 값에 따라 페이지에 표시할 내용을 변경 / 게시판 타입별로 표시를 다르게 하기\n\n  const returnBoardType = categoryNo => {\n    let category = null;\n\n    if (categoryNo === 0) {\n      category = \"공지사항\";\n    } else if (categoryNo === 1) {\n      category = \"자유게시판\";\n    } else if (categoryNo === 2) {\n      category = \"자료실\";\n    } else {\n      category = \"사고팝니다\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: [\"\\uCE74\\uD14C\\uACE0\\uB9AC : \", category]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  };\n\n  const returnDate = cTime => {\n    console.log(\"생성일 : \", {\n      cTime\n    }); // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat (date format 링크)\n\n    console.log(new Intl.DateTimeFormat('ko-KR').format(cTime));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\uC0DD\\uC131\\uC77C : [ \", new Intl.DateTimeFormat('ko-KR').format(cTime), \" ] \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }; // # 4. 글 목록으로 이동하는 함수를 정의 \n\n\n  const goToList = () => {\n    history('/app/board/1', {\n      replace: true\n    });\n  };\n\n  const goToUpdate = event => {\n    event.preventDefault(); // this.props.history.push(`/create-board/${this.state.index}`);\n\n    history(`/app/create-board/${pIdx}`, {\n      replace: true,\n      state: {\n        idx: pIdx,\n        board: pBoard\n      }\n    });\n  };\n\n  const deleteView = async function () {\n    if (window.confirm(\"정말로 글을 삭제하시겠습니까?\")) {\n      // BoardService.deleteBoard(this.state.index).then( res => {\n      BoardService.deleteBoard(pIdx).then(res => {\n        console.log(\"delete result => \", JSON.stringify(res));\n\n        if (res.status === 200) {\n          history('/app/board/1');\n        } else {\n          alert(\"글 삭제가 실패했습니다.\");\n        }\n      });\n    }\n  };\n\n  const textFieldStyle = {\n    marginTop: 8,\n    width: '80%',\n    height: \"550px  \"\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        variant: \"h2\",\n        subheader: \"\\uAC8C\\uC2DC\\uAE00 \\uBCF4\\uAE30\",\n        title: \"\\uAC8C\\uC2DC\\uAE00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            marginBottom: \"25px\",\n            children: [\"\\uC81C\\uBAA9 : \", pBoard.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          marginBottom: \"50px\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            marginBottom: \"25px\",\n            marginRight: \"350px\",\n            align: \"right\",\n            children: returnBoardType(pBoard.category)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            defaultValue: pBoard.content,\n            label: \"\\uB0B4\\uC6A9\",\n            InputProps: {\n              readOnly: true\n            },\n            size: \"medium\",\n            margin: \"normal\",\n            multiline: \"true\",\n            rows: \"20\",\n            rowsMax: \"20\",\n            style: textFieldStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          marginRight: \"300px\",\n          marginBottom: \"50px\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            align: \"right\",\n            children: returnDate(pBoard.createdTime, pBoard.updatedTime)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          marginRight: \"300px\",\n          align: \"right\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: goToList,\n            style: {\n              marginLeft: \"10px\"\n            },\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"\\uAE00 \\uBAA9\\uB85D\\uC73C\\uB85C \\uC774\\uB3D9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: goToUpdate,\n            style: {\n              marginLeft: \"10px\"\n            },\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"\\uAE00 \\uC218\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => deleteView(),\n            style: {\n              marginLeft: \"10px\"\n            },\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"\\uAE00 \\uC0AD\\uC81C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadBoardComponent, \"UV6RYaGLUESs49yTEFsqJgAfKW4=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = ReadBoardComponent;\nexport default ReadBoardComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadBoardComponent\");","map":{"version":3,"sources":["D:/gits/GDJ_32/SubBranch/Workspace/GDJ32_E_FrontEnd/src/components/board/ReadBoardComponent.js"],"names":["Box","Button","Card","Grid","TextField","Divider","CardContent","CardHeader","Typography","React","useLocation","useNavigate","BoardService","ReadBoardComponent","history","state","pIdx","idx","pBoard","board","returnBoardType","categoryNo","category","returnDate","cTime","console","log","Intl","DateTimeFormat","format","goToList","replace","goToUpdate","event","preventDefault","deleteView","window","confirm","deleteBoard","then","res","JSON","stringify","status","alert","textFieldStyle","marginTop","width","height","title","content","readOnly","createdTime","updatedTime","marginLeft"],"mappings":"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","sourcesContent":["import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    // Container,\r\n    Grid,\r\n    // Link,\r\n    TextField,\r\n    Divider,\r\n    CardContent,\r\n    CardHeader,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport BoardService from '../../service/BoardService';\r\n\r\nconst ReadBoardComponent = () => {\r\n    const history = useNavigate();\r\n    const { state } = useLocation();\r\n    // const { pIdx, pBoard } = state;\r\n    const pIdx = state.idx;\r\n    const pBoard = state.board;\r\n\r\n    // # 2. 페이지가 로딩될때 api와 통신하여 글 객체를 가져온다\r\n    // useEffect(() => {\r\n    //     BoardService.getOneBoard(idx).then(res => {\r\n    //         setIdx(res.data.getIdx);\r\n    //         setBoard(res.data);\r\n    //         console.log(idx);\r\n    //         console.log(board);\r\n    //         console.log(res);\r\n    //     });\r\n    // }, []);\r\n\r\n    // # 3. 파라미터 값에 따라 페이지에 표시할 내용을 변경 / 게시판 타입별로 표시를 다르게 하기\r\n    const returnBoardType = (categoryNo) => {\r\n        let category = null;\r\n        if (categoryNo === 0) {\r\n            category = \"공지사항\";\r\n\r\n        } else if (categoryNo === 1) {\r\n            category = \"자유게시판\";\r\n\r\n        } else if (categoryNo === 2) {\r\n            category = \"자료실\";\r\n\r\n        } else {\r\n            category = \"사고팝니다\";\r\n        }\r\n\r\n        return (\r\n            <Typography\r\n                variant=\"h4\"\r\n                gutterBottom>\r\n                카테고리 : {category}\r\n            </Typography>\r\n        )\r\n    }\r\n\r\n    const returnDate = (cTime) => {\r\n        console.log(\"생성일 : \", { cTime });\r\n        // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat (date format 링크)\r\n        console.log(new Intl.DateTimeFormat('ko-KR').format(cTime));\r\n        return (\r\n            <div className=\"row\">\r\n                <h3>생성일 : [ {new Intl.DateTimeFormat('ko-KR').format(cTime)} ] </h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // # 4. 글 목록으로 이동하는 함수를 정의 \r\n    const goToList = () => {\r\n        history('/app/board/1', { replace: true });\r\n    }\r\n\r\n    const goToUpdate = (event) => {\r\n        event.preventDefault();\r\n        // this.props.history.push(`/create-board/${this.state.index}`);\r\n        history(`/app/create-board/${pIdx}`, {\r\n            replace: true,\r\n            state: {\r\n                idx: pIdx,\r\n                board: pBoard\r\n            }\r\n        });\r\n    }\r\n\r\n    const deleteView = async function () {\r\n        if (window.confirm(\"정말로 글을 삭제하시겠습니까?\")) {\r\n            // BoardService.deleteBoard(this.state.index).then( res => {\r\n            BoardService.deleteBoard(pIdx).then(res => {\r\n                console.log(\"delete result => \", JSON.stringify(res));\r\n                if (res.status === 200) {\r\n                    history('/app/board/1');\r\n                } else {\r\n                    alert(\"글 삭제가 실패했습니다.\");\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const textFieldStyle = {\r\n        marginTop: 8,\r\n        width: '80%',\r\n        height: \"550px  \"\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Box>\r\n            <Card>\r\n                <CardHeader\r\n                    variant=\"h2\"\r\n                    subheader=\"게시글 보기\"\r\n                    title=\"게시글\"\r\n                />\r\n                <Divider />\r\n                <CardContent>\r\n                    <Grid >\r\n                        <Typography\r\n                            variant=\"h3\"\r\n                            marginBottom=\"25px\"\r\n                        >\r\n                            제목 : {pBoard.title}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid\r\n                        marginBottom=\"50px\">\r\n                        <Typography\r\n                            marginBottom=\"25px\"\r\n                            marginRight=\"350px\"\r\n                            align=\"right\">\r\n                            {returnBoardType(pBoard.category)}\r\n                        </Typography>\r\n                        <TextField\r\n                            defaultValue={pBoard.content}\r\n                            label=\"내용\"\r\n                            InputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                            size=\"medium\"\r\n                            margin=\"normal\"\r\n                            multiline=\"true\"\r\n                            rows=\"20\"\r\n                            rowsMax=\"20\"\r\n                            style={textFieldStyle}\r\n                        />\r\n                    </Grid>\r\n                    <Grid\r\n                        marginRight=\"300px\"\r\n                        marginBottom=\"50px\">\r\n                        <Typography\r\n                            align=\"right\">\r\n                            {returnDate(pBoard.createdTime, pBoard.updatedTime)}\r\n                        </Typography>\r\n\r\n                    </Grid>\r\n                    <Grid\r\n                        marginRight=\"300px\"\r\n                        align=\"right\">\r\n                        <Button\r\n                            onClick={goToList}\r\n                            style={{ marginLeft: \"10px\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            글 목록으로 이동\r\n                        </Button>\r\n                        <Button\r\n                            onClick={goToUpdate}\r\n                            style={{ marginLeft: \"10px\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            글 수정\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => deleteView()}\r\n                            style={{ marginLeft: \"10px\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            글 삭제\r\n                        </Button>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card >\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default ReadBoardComponent;"]},"metadata":{},"sourceType":"module"}