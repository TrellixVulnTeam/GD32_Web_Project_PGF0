{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\nimport { deepmerge } from '@material-ui/utils';\nimport common from '../colors/common';\nimport grey from '../colors/grey';\nimport indigo from '../colors/indigo';\nimport pink from '../colors/pink';\nimport red from '../colors/red';\nimport orange from '../colors/orange';\nimport blue from '../colors/blue';\nimport green from '../colors/green';\nimport { darken, getContrastRatio, lighten } from './colorManipulator';\nexport var light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.6)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)'\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: common.white,\n    default: grey[50]\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.12\n  }\n};\nexport var dark = {\n  text: {\n    primary: common.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: grey[800],\n    default: '#303030'\n  },\n  action: {\n    active: common.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(255, 255, 255, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.24\n  }\n};\n\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  var tonalOffsetLight = tonalOffset.light || tonalOffset;\n  var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;\n\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = lighten(intent.main, tonalOffsetLight);\n    } else if (direction === 'dark') {\n      intent.dark = darken(intent.main, tonalOffsetDark);\n    }\n  }\n}\n\nexport default function createPalette(palette) {\n  var _palette$primary = palette.primary,\n      primary = _palette$primary === void 0 ? {\n    light: indigo[300],\n    main: indigo[500],\n    dark: indigo[700]\n  } : _palette$primary,\n      _palette$secondary = palette.secondary,\n      secondary = _palette$secondary === void 0 ? {\n    light: pink.A200,\n    main: pink.A400,\n    dark: pink.A700\n  } : _palette$secondary,\n      _palette$error = palette.error,\n      error = _palette$error === void 0 ? {\n    light: red[300],\n    main: red[500],\n    dark: red[700]\n  } : _palette$error,\n      _palette$warning = palette.warning,\n      warning = _palette$warning === void 0 ? {\n    light: orange[300],\n    main: orange[500],\n    dark: orange[700]\n  } : _palette$warning,\n      _palette$info = palette.info,\n      info = _palette$info === void 0 ? {\n    light: blue[300],\n    main: blue[500],\n    dark: blue[700]\n  } : _palette$info,\n      _palette$success = palette.success,\n      success = _palette$success === void 0 ? {\n    light: green[300],\n    main: green[500],\n    dark: green[700]\n  } : _palette$success,\n      _palette$mode = palette.mode,\n      mode = _palette$mode === void 0 ? 'light' : _palette$mode,\n      _palette$contrastThre = palette.contrastThreshold,\n      contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,\n      _palette$tonalOffset = palette.tonalOffset,\n      tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,\n      other = _objectWithoutPropertiesLoose(palette, [\"primary\", \"secondary\", \"error\", \"warning\", \"info\", \"success\", \"mode\", \"contrastThreshold\", \"tonalOffset\"]); // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n\n\n  function getContrastText(background) {\n    var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var contrast = getContrastRatio(background, contrastText);\n\n      if (contrast < 3) {\n        console.error([\"Material-UI: The contrast ratio of \".concat(contrast, \":1 for \").concat(contrastText, \" on \").concat(background), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n      }\n    }\n\n    return contrastText;\n  }\n\n  var augmentColor = function augmentColor(_ref) {\n    var color = _ref.color,\n        name = _ref.name,\n        _ref$mainShade = _ref.mainShade,\n        mainShade = _ref$mainShade === void 0 ? 500 : _ref$mainShade,\n        _ref$lightShade = _ref.lightShade,\n        lightShade = _ref$lightShade === void 0 ? 300 : _ref$lightShade,\n        _ref$darkShade = _ref.darkShade,\n        darkShade = _ref$darkShade === void 0 ? 700 : _ref$darkShade;\n    color = _extends({}, color);\n\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n\n    if (!color.hasOwnProperty('main')) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: The color\".concat(name ? \" (\".concat(name, \")\") : '', \" provided to augmentColor(color) is invalid.\\nThe color object needs to have a `main` property or a `\").concat(mainShade, \"` property.\") : _formatMuiErrorMessage(11, name ? \" (\".concat(name, \")\") : '', mainShade));\n    }\n\n    if (typeof color.main !== 'string') {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: The color\".concat(name ? \" (\".concat(name, \")\") : '', \" provided to augmentColor(color) is invalid.\\n`color.main` should be a string, but `\").concat(JSON.stringify(color.main), \"` was provided instead.\\n\\nDid you intend to use one of the following approaches?\\n\\nimport { green } from \\\"@material-ui/core/colors\\\";\\n\\nconst theme1 = createMuiTheme({ palette: {\\n  primary: green,\\n} });\\n\\nconst theme2 = createMuiTheme({ palette: {\\n  primary: { main: green[500] },\\n} });\") : _formatMuiErrorMessage(12, name ? \" (\".concat(name, \")\") : '', JSON.stringify(color.main)));\n    }\n\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n\n    return color;\n  };\n\n  var modes = {\n    dark: dark,\n    light: light\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!modes[mode]) {\n      console.error(\"Material-UI: The palette mode `\".concat(mode, \"` is not supported.\"));\n    }\n  }\n\n  var paletteOutput = deepmerge(_extends({\n    // A collection of common colors.\n    common: common,\n    // The palette mode, can be light or dark.\n    mode: mode,\n    // The colors used to represent primary interface elements for a user.\n    primary: augmentColor({\n      color: primary,\n      name: 'primary'\n    }),\n    // The colors used to represent secondary interface elements for a user.\n    secondary: augmentColor({\n      color: secondary,\n      name: 'secondary',\n      mainShade: 'A400',\n      lightShade: 'A200',\n      darkShade: 'A700'\n    }),\n    // The colors used to represent interface elements that the user should be made aware of.\n    error: augmentColor({\n      color: error,\n      name: 'error'\n    }),\n    // The colors used to represent potentially dangerous actions or important messages.\n    warning: augmentColor({\n      color: warning,\n      name: 'warning'\n    }),\n    // The colors used to present information to the user that is neutral and not necessarily important.\n    info: augmentColor({\n      color: info,\n      name: 'info'\n    }),\n    // The colors used to indicate the successful completion of an action that user triggered.\n    success: augmentColor({\n      color: success,\n      name: 'success'\n    }),\n    // The grey colors.\n    grey: grey,\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold: contrastThreshold,\n    // Takes a background color and returns the text color that maximizes the contrast.\n    getContrastText: getContrastText,\n    // Generate a rich color object.\n    augmentColor: augmentColor,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: tonalOffset\n  }, modes[mode]), other);\n  return paletteOutput;\n}","map":{"version":3,"sources":["C:/GitHub/GDJ32_E_WebProject/Workspace/GDJ32_E_FrontEnd/node_modules/@material-ui/core/styles/createPalette.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","deepmerge","common","grey","indigo","pink","red","orange","blue","green","darken","getContrastRatio","lighten","light","text","primary","secondary","disabled","divider","background","paper","white","default","action","active","hover","hoverOpacity","selected","selectedOpacity","disabledBackground","disabledOpacity","focus","focusOpacity","activatedOpacity","dark","icon","addLightOrDark","intent","direction","shade","tonalOffset","tonalOffsetLight","tonalOffsetDark","hasOwnProperty","main","createPalette","palette","A200","A400","A700","error","warning","info","success","mode","contrastThreshold","other","getContrastText","contrastText","process","env","NODE_ENV","contrast","console","join","augmentColor","color","name","mainShade","lightShade","darkShade","Error","JSON","stringify","modes","paletteOutput"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\r\nimport { deepmerge } from '@material-ui/utils';\r\nimport common from '../colors/common';\r\nimport grey from '../colors/grey';\r\nimport indigo from '../colors/indigo';\r\nimport pink from '../colors/pink';\r\nimport red from '../colors/red';\r\nimport orange from '../colors/orange';\r\nimport blue from '../colors/blue';\r\nimport green from '../colors/green';\r\nimport { darken, getContrastRatio, lighten } from './colorManipulator';\r\nexport const light = {\r\n  // The colors used to style the text.\r\n  text: {\r\n    // The most important text.\r\n    primary: 'rgba(0, 0, 0, 0.87)',\r\n    // Secondary text.\r\n    secondary: 'rgba(0, 0, 0, 0.6)',\r\n    // Disabled text have even lower visual prominence.\r\n    disabled: 'rgba(0, 0, 0, 0.38)'\r\n  },\r\n  // The color used to divide different elements.\r\n  divider: 'rgba(0, 0, 0, 0.12)',\r\n  // The background colors used to style the surfaces.\r\n  // Consistency between these values is important.\r\n  background: {\r\n    paper: common.white,\r\n    default: grey[50]\r\n  },\r\n  // The colors used to style the action elements.\r\n  action: {\r\n    // The color of an active action like an icon button.\r\n    active: 'rgba(0, 0, 0, 0.54)',\r\n    // The color of an hovered action.\r\n    hover: 'rgba(0, 0, 0, 0.04)',\r\n    hoverOpacity: 0.04,\r\n    // The color of a selected action.\r\n    selected: 'rgba(0, 0, 0, 0.08)',\r\n    selectedOpacity: 0.08,\r\n    // The color of a disabled action.\r\n    disabled: 'rgba(0, 0, 0, 0.26)',\r\n    // The background color of a disabled action.\r\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\r\n    disabledOpacity: 0.38,\r\n    focus: 'rgba(0, 0, 0, 0.12)',\r\n    focusOpacity: 0.12,\r\n    activatedOpacity: 0.12\r\n  }\r\n};\r\nexport const dark = {\r\n  text: {\r\n    primary: common.white,\r\n    secondary: 'rgba(255, 255, 255, 0.7)',\r\n    disabled: 'rgba(255, 255, 255, 0.5)',\r\n    icon: 'rgba(255, 255, 255, 0.5)'\r\n  },\r\n  divider: 'rgba(255, 255, 255, 0.12)',\r\n  background: {\r\n    paper: grey[800],\r\n    default: '#303030'\r\n  },\r\n  action: {\r\n    active: common.white,\r\n    hover: 'rgba(255, 255, 255, 0.08)',\r\n    hoverOpacity: 0.08,\r\n    selected: 'rgba(255, 255, 255, 0.16)',\r\n    selectedOpacity: 0.16,\r\n    disabled: 'rgba(255, 255, 255, 0.3)',\r\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\r\n    disabledOpacity: 0.38,\r\n    focus: 'rgba(255, 255, 255, 0.12)',\r\n    focusOpacity: 0.12,\r\n    activatedOpacity: 0.24\r\n  }\r\n};\r\n\r\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\r\n  const tonalOffsetLight = tonalOffset.light || tonalOffset;\r\n  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;\r\n\r\n  if (!intent[direction]) {\r\n    if (intent.hasOwnProperty(shade)) {\r\n      intent[direction] = intent[shade];\r\n    } else if (direction === 'light') {\r\n      intent.light = lighten(intent.main, tonalOffsetLight);\r\n    } else if (direction === 'dark') {\r\n      intent.dark = darken(intent.main, tonalOffsetDark);\r\n    }\r\n  }\r\n}\r\n\r\nexport default function createPalette(palette) {\r\n  const {\r\n    primary = {\r\n      light: indigo[300],\r\n      main: indigo[500],\r\n      dark: indigo[700]\r\n    },\r\n    secondary = {\r\n      light: pink.A200,\r\n      main: pink.A400,\r\n      dark: pink.A700\r\n    },\r\n    error = {\r\n      light: red[300],\r\n      main: red[500],\r\n      dark: red[700]\r\n    },\r\n    warning = {\r\n      light: orange[300],\r\n      main: orange[500],\r\n      dark: orange[700]\r\n    },\r\n    info = {\r\n      light: blue[300],\r\n      main: blue[500],\r\n      dark: blue[700]\r\n    },\r\n    success = {\r\n      light: green[300],\r\n      main: green[500],\r\n      dark: green[700]\r\n    },\r\n    mode = 'light',\r\n    contrastThreshold = 3,\r\n    tonalOffset = 0.2\r\n  } = palette,\r\n        other = _objectWithoutPropertiesLoose(palette, [\"primary\", \"secondary\", \"error\", \"warning\", \"info\", \"success\", \"mode\", \"contrastThreshold\", \"tonalOffset\"]); // Use the same logic as\r\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\r\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\r\n\r\n\r\n  function getContrastText(background) {\r\n    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      const contrast = getContrastRatio(background, contrastText);\r\n\r\n      if (contrast < 3) {\r\n        console.error([`Material-UI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\r\n      }\r\n    }\r\n\r\n    return contrastText;\r\n  }\r\n\r\n  const augmentColor = ({\r\n    color,\r\n    name,\r\n    mainShade = 500,\r\n    lightShade = 300,\r\n    darkShade = 700\r\n  }) => {\r\n    color = _extends({}, color);\r\n\r\n    if (!color.main && color[mainShade]) {\r\n      color.main = color[mainShade];\r\n    }\r\n\r\n    if (!color.hasOwnProperty('main')) {\r\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\r\nThe color object needs to have a \\`main\\` property or a \\`${mainShade}\\` property.` : _formatMuiErrorMessage(11, name ? ` (${name})` : '', mainShade));\r\n    }\r\n\r\n    if (typeof color.main !== 'string') {\r\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\r\n\\`color.main\\` should be a string, but \\`${JSON.stringify(color.main)}\\` was provided instead.\r\n\r\nDid you intend to use one of the following approaches?\r\n\r\nimport { green } from \"@material-ui/core/colors\";\r\n\r\nconst theme1 = createMuiTheme({ palette: {\r\n  primary: green,\r\n} });\r\n\r\nconst theme2 = createMuiTheme({ palette: {\r\n  primary: { main: green[500] },\r\n} });` : _formatMuiErrorMessage(12, name ? ` (${name})` : '', JSON.stringify(color.main)));\r\n    }\r\n\r\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\r\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\r\n\r\n    if (!color.contrastText) {\r\n      color.contrastText = getContrastText(color.main);\r\n    }\r\n\r\n    return color;\r\n  };\r\n\r\n  const modes = {\r\n    dark,\r\n    light\r\n  };\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (!modes[mode]) {\r\n      console.error(`Material-UI: The palette mode \\`${mode}\\` is not supported.`);\r\n    }\r\n  }\r\n\r\n  const paletteOutput = deepmerge(_extends({\r\n    // A collection of common colors.\r\n    common,\r\n    // The palette mode, can be light or dark.\r\n    mode,\r\n    // The colors used to represent primary interface elements for a user.\r\n    primary: augmentColor({\r\n      color: primary,\r\n      name: 'primary'\r\n    }),\r\n    // The colors used to represent secondary interface elements for a user.\r\n    secondary: augmentColor({\r\n      color: secondary,\r\n      name: 'secondary',\r\n      mainShade: 'A400',\r\n      lightShade: 'A200',\r\n      darkShade: 'A700'\r\n    }),\r\n    // The colors used to represent interface elements that the user should be made aware of.\r\n    error: augmentColor({\r\n      color: error,\r\n      name: 'error'\r\n    }),\r\n    // The colors used to represent potentially dangerous actions or important messages.\r\n    warning: augmentColor({\r\n      color: warning,\r\n      name: 'warning'\r\n    }),\r\n    // The colors used to present information to the user that is neutral and not necessarily important.\r\n    info: augmentColor({\r\n      color: info,\r\n      name: 'info'\r\n    }),\r\n    // The colors used to indicate the successful completion of an action that user triggered.\r\n    success: augmentColor({\r\n      color: success,\r\n      name: 'success'\r\n    }),\r\n    // The grey colors.\r\n    grey,\r\n    // Used by `getContrastText()` to maximize the contrast between\r\n    // the background and the text.\r\n    contrastThreshold,\r\n    // Takes a background color and returns the text color that maximizes the contrast.\r\n    getContrastText,\r\n    // Generate a rich color object.\r\n    augmentColor,\r\n    // Used by the functions below to shift a color's luminance by approximately\r\n    // two indexes within its tonal palette.\r\n    // E.g., shift from Red 500 to Red 300 or Red 700.\r\n    tonalOffset\r\n  }, modes[mode]), other);\r\n  return paletteOutput;\r\n}"]},"metadata":{},"sourceType":"module"}