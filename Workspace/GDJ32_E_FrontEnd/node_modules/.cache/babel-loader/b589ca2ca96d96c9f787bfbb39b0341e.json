{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\GDJ32_E_WebProject\\\\Workspace\\\\GDJ32_E_FrontEnd\\\\src\\\\components\\\\board\\\\ReadBoardComponent.jsx\";\nimport React, { Component } from 'react';\nimport BoardService from '../../service/BoardService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ReadBoardComponent extends Component {\n  constructor(props) {\n    super(props); // console.log(\"확인\"+this.props.match.params.index);\n    // # 1. this.state에 글 상세보기에 사용될 파라미터 정의 \n\n    this.goToUpdate = event => {\n      event.preventDefault(); // this.props.history.push(`/create-board/${this.state.index}`);\n\n      this.props.history.push(`/create-board/${this.state.idx}`);\n    };\n\n    this.deleteView = async function () {\n      if (window.confirm(\"정말로 글을 삭제하시겠습니까?\")) {\n        // BoardService.deleteBoard(this.state.index).then( res => {\n        BoardService.deleteBoard(this.state.idx).then(res => {\n          console.log(\"delete result => \" + JSON.stringify(res));\n\n          if (res.status == 200) {\n            this.props.history.push('/board');\n          } else {\n            alert(\"글 삭제가 실패했습니다.\");\n          }\n        });\n      }\n    };\n\n    this.state = {\n      // index : this.props.match.params.index,\n      idx: this.props.match.params.idx,\n      board: {}\n    };\n    this.goToUpdate = this.goToUpdate.bind(this);\n  } // # 2. 페이지가 로딩될때 api와 통신하여 글 객체를 가져온다\n  //componentDidMount() {\n\n\n  componentDidMount() {\n    // console.log(\"####게시글번호 : \" + this.state.index)\n    // BoardService.getOneBoard(this.state.index).then( res => {\n    BoardService.getOneBoard(this.state.idx).then(res => {\n      this.setState({\n        board: res.data\n      });\n      console.log(\"get result => \" + JSON.stringify(res.data));\n    });\n  } // # 3. 파라미터 값에 따라 페이지에 표시할 내용을 변경 / 게시판 타입별로 표시를 다르게 하기\n\n\n  returnBoardType(categoryNo) {\n    let category = null;\n\n    if (categoryNo == 0) {\n      category = \"공지사항\";\n    } else if (categoryNo == 1) {\n      category = \"자유게시판\";\n    } else if (categoryNo == 2) {\n      category = \"자료실\";\n    } else {\n      category = \"사고팝니다\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" \\uCE74\\uD14C\\uACE0\\uB9AC : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), \" \", category]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n  returnDate(cTime) {\n    console.log(\"생성일 :\" + {\n      cTime\n    }); // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat (date format 링크)\n\n    console.log(new Intl.DateTimeFormat('ko-KR').format(cTime));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\uC0DD\\uC131\\uC77C : [ \", new Intl.DateTimeFormat('ko-KR').format(cTime), \" ] \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  } // # 4. 글 목록으로 이동하는 함수를 정의 \n\n\n  goToList() {\n    this.props.history.push('/board');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card col-md-6 offset-md-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center\",\n          children: \" \\uC0C1\\uC138\\uD398\\uC774\\uC9C0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [this.returnBoardType(this.state.board.category), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \" \\uC81C\\uBAA9 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this), \" : \", this.state.board.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \" \\uB0B4\\uC6A9 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 33\n            }, this), \" : \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 55\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: this.state.board.content,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this), this.returnDate(this.state.board.createdTime, this.state.board.updatedTime), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: this.goToList.bind(this),\n            style: {\n              marginLeft: \"10px\"\n            },\n            children: \"\\uAE00 \\uBAA9\\uB85D\\uC73C\\uB85C \\uC774\\uB3D9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-info\",\n            onClick: this.goToUpdate,\n            style: {\n              marginLeft: \"10px\"\n            },\n            children: \"\\uAE00 \\uC218\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: () => this.deleteView(),\n            style: {\n              marginLeft: \"10px\"\n            },\n            children: \"\\uAE00 \\uC0AD\\uC81C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ReadBoardComponent;","map":{"version":3,"sources":["C:/GitHub/GDJ32_E_WebProject/Workspace/GDJ32_E_FrontEnd/src/components/board/ReadBoardComponent.jsx"],"names":["React","Component","BoardService","ReadBoardComponent","constructor","props","goToUpdate","event","preventDefault","history","push","state","idx","deleteView","window","confirm","deleteBoard","then","res","console","log","JSON","stringify","status","alert","match","params","board","bind","componentDidMount","getOneBoard","setState","data","returnBoardType","categoryNo","category","returnDate","cTime","Intl","DateTimeFormat","format","goToList","render","title","content","createdTime","updatedTime","marginLeft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport BoardService from '../../service/BoardService';\r\n\r\nclass ReadBoardComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // console.log(\"확인\"+this.props.match.params.index);\r\n\r\n        // # 1. this.state에 글 상세보기에 사용될 파라미터 정의 \r\n        this.state = { \r\n            // index : this.props.match.params.index,\r\n            idx : this.props.match.params.idx,\r\n            board: {}\r\n        }\r\n\r\n        this.goToUpdate = this.goToUpdate.bind(this);\r\n\r\n    }\r\n\r\n    // # 2. 페이지가 로딩될때 api와 통신하여 글 객체를 가져온다\r\n    //componentDidMount() {\r\n    componentDidMount(){\r\n        // console.log(\"####게시글번호 : \" + this.state.index)\r\n        // BoardService.getOneBoard(this.state.index).then( res => {\r\n            BoardService.getOneBoard(this.state.idx).then( res => {\r\n            this.setState({board: res.data});\r\n            console.log(\"get result => \" + JSON.stringify(res.data));\r\n        });\r\n    }\r\n\r\n    // # 3. 파라미터 값에 따라 페이지에 표시할 내용을 변경 / 게시판 타입별로 표시를 다르게 하기\r\n    returnBoardType(categoryNo) {\r\n        let category = null;\r\n        if (categoryNo == 0) {\r\n            category = \"공지사항\";\r\n\r\n        } else if (categoryNo == 1 ) {\r\n            category = \"자유게시판\";\r\n\r\n        } else if (categoryNo == 2 ) {\r\n            category = \"자료실\";\r\n\r\n        } else {\r\n            category = \"사고팝니다\";\r\n        }\r\n\r\n        return (\r\n            <div className = \"row\">\r\n                <label> 카테고리 : </label> {category}\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    returnDate(cTime) {\r\n        console.log(\"생성일 :\" + {cTime})\r\n        // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat (date format 링크)\r\n        console.log(new Intl.DateTimeFormat('ko-KR').format(cTime))\r\n        return (\r\n            <div className = \"row\">\r\n                <label>생성일 : [ {new Intl.DateTimeFormat('ko-KR').format(cTime)} ] </label>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // # 4. 글 목록으로 이동하는 함수를 정의 \r\n    goToList() {\r\n        this.props.history.push('/board');\r\n    }\r\n\r\n    goToUpdate = (event) => {\r\n        event.preventDefault();\r\n        // this.props.history.push(`/create-board/${this.state.index}`);\r\n        this.props.history.push(`/create-board/${this.state.idx}`);\r\n    }\r\n\r\n    deleteView = async function () {\r\n        if(window.confirm(\"정말로 글을 삭제하시겠습니까?\")){\r\n            // BoardService.deleteBoard(this.state.index).then( res => {\r\n                BoardService.deleteBoard(this.state.idx).then( res => {\r\n                console.log(\"delete result => \" + JSON.stringify(res));\r\n                if (res.status == 200) {\r\n                    this.props.history.push('/board');\r\n                } else {\r\n                    alert(\"글 삭제가 실패했습니다.\");\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className = \"card col-md-6 offset-md-3\">\r\n                    <h3 className =\"text-center\"> 상세페이지</h3>\r\n                    <div className = \"card-body\">\r\n                            {this.returnBoardType(this.state.board.category)}      \r\n                            <div className = \"row\">      \r\n                                <label> 제목 </label> : {this.state.board.title}\r\n                            </div>\r\n\r\n                            <div className = \"row\">\r\n                                <label> 내용 </label> : <br></br> \r\n                                <textarea value={this.state.board.content} readOnly/>\r\n                                {/* {this.state.board.createtDay} */}\r\n                            </div >\r\n\r\n                            {/* <div className = \"row\">\r\n                                <label>   </label>: \r\n                                {this.state.board.memberNo}\r\n                            </div> */}\r\n\r\n                            {this.returnDate(this.state.board.createdTime, this.state.board.updatedTime) }\r\n                           \r\n                            <button className=\"btn btn-primary\" onClick={this.goToList.bind(this)} style={{marginLeft:\"10px\"}}>글 목록으로 이동</button>\r\n                            <button className=\"btn btn-info\" onClick={this.goToUpdate} style={{marginLeft:\"10px\"}}>글 수정</button>\r\n                          \r\n                            <button className=\"btn btn-danger\" onClick={() => this.deleteView()} style={{marginLeft:\"10px\"}}>글 삭제</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReadBoardComponent;"]},"metadata":{},"sourceType":"module"}