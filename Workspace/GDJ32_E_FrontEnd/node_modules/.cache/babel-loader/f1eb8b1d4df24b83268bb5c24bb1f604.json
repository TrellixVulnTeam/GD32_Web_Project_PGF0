{"ast":null,"code":"/**\r\n * Bundle of @devexpress/dx-react-scheduler\r\n * Generated: 2021-03-04\r\n * Version: 2.7.5\r\n * License: https://js.devexpress.com/Licensing\r\n */\nimport { createElement, PureComponent, Fragment, createRef, memo, useRef, useState, useCallback, useEffect } from 'react';\nimport { Plugin, Getter, Template, TemplatePlaceholder, PluginHost, TemplateConnector, Action, createStateHelper, DragDropProvider as DragDropProvider$1, DropTarget, DragSource } from '@devexpress/dx-react-core';\nimport { formatDateTimeGetter, appointments, computed, availableViews, VERTICAL_GROUP_ORIENTATION, HORIZONTAL_GROUP_ORIENTATION, startViewDate, endViewDate, timeCellsData, getTimeTableHeight, calculateWeekDateIntervals, VIEW_TYPES, viewCellsData, monthCellsData, calculateMonthDateIntervals, viewBoundText, POSITION_START, POSITION_END, isTimeTableElementsMetaActual, getGroupsLastRow, calculateRectByDateAndGroupIntervals, getAppointmentStyle, isAllDayElementsMetaActual, HORIZONTAL_TYPE, getHorizontalRectByAppointmentData, VERTICAL_TYPE, getVerticalRectByAppointmentData, allDayCells, calculateAllDayDateIntervals, changeCurrentDate, setCurrentViewName, preCommitChanges, startEditAppointment, stopEditAppointment, changeAppointment, cancelChanges, RECURRENCE_EDIT_SCOPE, changedAppointmentById, addAppointment, cancelAddedAppointment, TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY, getAppointmentResources, OPEN_COMMAND_BUTTON, CLOSE_COMMAND_BUTTON, DELETE_COMMAND_BUTTON, setAppointmentMeta, TOGGLE_APPOINTMENT_FORM_VISIBILITY, callActionIfExists, isAllDayCell, checkMultipleResourceFields, setAppointmentData, autoScroll, cellIndex, cellData, cellType, calculateInsidePart, intervalDuration, calculateAppointmentTimeBoundaries, calculateAppointmentGroups, appointmentDragged, calculateDraftAppointments, RESIZE_TOP, RESIZE_BOTTOM, SCROLL_SPEED_PX, validateResources, addResourcesToAppointments, convertResourcesToPlain, toggleExpandedGroups, HORIZONTAL_VIEW_LEFT_OFFSET, VERTICAL_VIEW_LEFT_OFFSET, isMonthCell, getCurrentTimeIndicatorTop, isCellShaded, isShadedAppointment, expandViewCellsDataWithGroups, getGroupsFromResources, sortFilteredResources, filterResourcesByGrouping, updateGroupingWithMainResource, expandGroups, updateTimeTableCellElementsMeta, updateAllDayCellElementsMeta, updateTimeCellsData } from '@devexpress/dx-scheduler-core';\nimport { memoize, createClickHandlers, getMessagesFormatter } from '@devexpress/dx-core';\nimport moment from 'moment';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nvar SchedulerCoreBase = /*#__PURE__*/function (_super) {\n  __extends(SchedulerCoreBase, _super);\n\n  function SchedulerCoreBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.formatDateTimeGetter = memoize(function (locale) {\n      return formatDateTimeGetter(locale);\n    });\n    return _this;\n  }\n\n  SchedulerCoreBase.prototype.render = function () {\n    var _a = this.props,\n        data = _a.data,\n        Root = _a.rootComponent,\n        locale = _a.locale,\n        height = _a.height,\n        firstDayOfWeek = _a.firstDayOfWeek;\n    return createElement(Plugin, {\n      name: \"SchedulerCore\"\n    }, createElement(Getter, {\n      name: \"appointments\",\n      value: appointments(data)\n    }), createElement(Getter, {\n      name: \"formatDate\",\n      value: this.formatDateTimeGetter(locale)\n    }), createElement(Getter, {\n      name: \"firstDayOfWeek\",\n      value: firstDayOfWeek\n    }), createElement(Getter, {\n      name: \"locale\",\n      value: locale\n    }), createElement(Template, {\n      name: \"root\"\n    }, createElement(Root, {\n      height: height\n    }, createElement(TemplatePlaceholder, {\n      name: \"schedulerRoot\"\n    }), createElement(TemplatePlaceholder, {\n      name: \"header\"\n    }), createElement(TemplatePlaceholder, {\n      name: \"body\"\n    }), createElement(TemplatePlaceholder, {\n      name: \"footer\"\n    }))));\n  };\n\n  return SchedulerCoreBase;\n}(PureComponent);\n/***\r\n * The Scheduler is a root container component designed to process\r\n * and display the specified data. The Scheduler's functionality\r\n * (data visualization and processing) is implemented in several plugins\r\n * specified as child components.\r\n * */\n\n\nvar SchedulerCore = SchedulerCoreBase;\n\nvar SchedulerBase = function (_a) {\n  var data = _a.data,\n      rootComponent = _a.rootComponent,\n      children = _a.children,\n      locale = _a.locale,\n      height = _a.height,\n      firstDayOfWeek = _a.firstDayOfWeek;\n  return createElement(PluginHost, null, createElement(SchedulerCore, {\n    data: data,\n    rootComponent: rootComponent,\n    locale: locale,\n    height: height,\n    firstDayOfWeek: firstDayOfWeek\n  }), children);\n};\n\nSchedulerBase.defaultProps = {\n  data: [],\n  // locale: 'en-US',\n  locale: 'ko-KR',\n  height: 'auto',\n  firstDayOfWeek: 0\n}; // tslint:disable: max-line-length\n\n/***\r\n * The Scheduler is a root container component designed to process\r\n * and display the specified data. The Scheduler’s functionality\r\n * (data visualization and processing) is implemented in several plugins specified as child components.\r\n * */\n\nvar Scheduler = SchedulerBase;\n\nvar CellPlaceholder = function (params) {\n  return createElement(TemplatePlaceholder, {\n    name: \"cell\",\n    params: params\n  });\n};\n\nvar TimeTableAppointmentLayer = function () {\n  return createElement(TemplatePlaceholder, {\n    name: \"timeTableAppointmentLayer\"\n  });\n};\n\nvar startViewDateBaseComputed = function (_a) {\n  var viewCellsData = _a.viewCellsData;\n  return startViewDate(viewCellsData);\n};\n\nvar endViewDateBaseComputed = function (_a) {\n  var viewCellsData = _a.viewCellsData;\n  return endViewDate(viewCellsData);\n};\n\nvar TimeTablePlaceholder = function () {\n  return createElement(TemplatePlaceholder, {\n    name: \"timeTable\"\n  });\n};\n\nvar DayScalePlaceholder = function () {\n  return createElement(TemplatePlaceholder, {\n    name: \"dayScale\"\n  });\n};\n\nvar DayScaleEmptyCellPlaceholder = function () {\n  return createElement(TemplatePlaceholder, {\n    name: \"dayScaleEmptyCell\"\n  });\n};\n\nvar GroupingPanelPlaceholder = function () {\n  return createElement(TemplatePlaceholder, {\n    name: \"groupingPanel\"\n  });\n};\n\nvar BasicViewBase = /*#__PURE__*/function (_super) {\n  __extends(BasicViewBase, _super);\n\n  function BasicViewBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      timeTableElementsMeta: {},\n      scrollingStrategy: {\n        topBoundary: 0,\n        bottomBoundary: 0,\n        leftBoundary: 0,\n        rightBoundary: 0,\n        changeVerticalScroll: function () {\n          return undefined;\n        },\n        changeHorizontalScroll: function () {\n          return undefined;\n        }\n      },\n      previousTimeTableCell: null,\n      // The key has to be generated every time the TimeTableCell is updated to rerender TimeTable\n      // and, consequently, update timeTableElementsMeta\n      timeTableLayoutKey: 0\n    };\n    _this.scrollingStrategyComputed = memoize(function (viewName, scrollingStrategy) {\n      return function (getters) {\n        return computed(getters, viewName, function () {\n          return scrollingStrategy;\n        }, getters.scrollingStrategy);\n      };\n    });\n    _this.timeTableElementsMetaComputed = memoize(function (viewName, timeTableElementsMeta) {\n      return function (getters) {\n        return computed(getters, viewName, function () {\n          return timeTableElementsMeta;\n        }, getters.timeTableElementsMeta);\n      };\n    });\n    _this.intervalCountComputed = memoize(function (viewName, intervalCount) {\n      return function (getters) {\n        return computed(getters, viewName, function () {\n          return intervalCount;\n        }, getters.intervalCount);\n      };\n    });\n    _this.cellDurationComputed = memoize(function (viewName, cellDuration) {\n      return function (getters) {\n        return computed(getters, viewName, function () {\n          return cellDuration;\n        }, getters.cellDuration);\n      };\n    });\n    _this.excludedDaysComputed = memoize(function (viewName, excludedDays) {\n      return function (getters) {\n        return computed(getters, viewName, function () {\n          return excludedDays;\n        }, getters.excludedDays);\n      };\n    });\n    _this.availableViewsComputed = memoize(function (viewName, viewDisplayName) {\n      return function (_a) {\n        var availableViews$1 = _a.availableViews;\n        return availableViews(availableViews$1, viewName, viewDisplayName);\n      };\n    });\n    _this.currentViewComputed = memoize(function (viewName, viewDisplayName, type) {\n      return function (_a) {\n        var currentView = _a.currentView;\n        return currentView && currentView.name !== viewName ? currentView : {\n          name: viewName,\n          type: type,\n          displayName: viewDisplayName\n        };\n      };\n    });\n\n    _this.endViewDateComputed = function (getters) {\n      var viewName = _this.props.name;\n      return computed(getters, viewName, endViewDateBaseComputed, getters.endViewDate);\n    };\n\n    _this.startViewDateComputed = function (getters) {\n      var viewName = _this.props.name;\n      return computed(getters, viewName, startViewDateBaseComputed, getters.startViewDate);\n    };\n\n    _this.viewCellsDataComputed = memoize(function (viewName, cellDuration, startDayHour, endDayHour, viewCellsDataBaseComputed) {\n      return function (getters) {\n        return computed(getters, viewName, viewCellsDataBaseComputed(cellDuration, startDayHour, endDayHour), getters.viewCellsData);\n      };\n    });\n    _this.timeTableAppointmentsComputed = memoize(function (viewName, cellDuration, calculateAppointmentsIntervals) {\n      return function (getters) {\n        return computed(getters, viewName, calculateAppointmentsIntervals(cellDuration), getters.timeTableAppointments);\n      };\n    });\n    _this.updateCellElementsMeta = memoize(function (cellElementsMeta) {\n      _this.setState({\n        timeTableElementsMeta: cellElementsMeta\n      });\n    });\n\n    _this.setScrollingStrategy = function (scrollingStrategy) {\n      _this.setState({\n        scrollingStrategy: scrollingStrategy\n      });\n    };\n\n    return _this;\n  }\n\n  BasicViewBase.getDerivedStateFromProps = function (props, state) {\n    if (props.timeTableCellComponent !== state.previousTimeTableCell) {\n      return __assign(__assign({}, state), {\n        previousTimeTableCell: props.timeTableCellComponent,\n        timeTableLayoutKey: Math.random()\n      });\n    }\n\n    return null;\n  };\n\n  BasicViewBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        viewName = _a.name,\n        intervalCount = _a.intervalCount,\n        displayName = _a.displayName,\n        type = _a.type,\n        excludedDays = _a.excludedDays,\n        cellDuration = _a.cellDuration,\n        startDayHour = _a.startDayHour,\n        endDayHour = _a.endDayHour,\n        viewCellsDataComputed = _a.viewCellsDataComputed,\n        calculateAppointmentsIntervals = _a.calculateAppointmentsIntervals,\n        dayScaleCellComponent = _a.dayScaleCellComponent,\n        dayScaleRowComponent = _a.dayScaleRowComponent,\n        DayScale = _a.dayScaleLayoutComponent,\n        TimeTableCell = _a.timeTableCellComponent,\n        TimeTableLayout = _a.timeTableLayoutComponent,\n        timeTableRowComponent = _a.timeTableRowComponent,\n        AppointmentLayer = _a.appointmentLayerComponent,\n        DayScaleEmptyCell = _a.dayScaleEmptyCellComponent,\n        layoutProps = _a.layoutProps,\n        Layout = _a.layoutComponent;\n    var _b = this.state,\n        timeTableElementsMeta = _b.timeTableElementsMeta,\n        scrollingStrategy = _b.scrollingStrategy,\n        timeTableLayoutKey = _b.timeTableLayoutKey;\n    var viewDisplayName = displayName || viewName;\n    return createElement(Plugin, {\n      name: \"basicView\"\n    }, createElement(Getter, {\n      name: \"availableViews\",\n      computed: this.availableViewsComputed(viewName, viewDisplayName)\n    }), createElement(Getter, {\n      name: \"currentView\",\n      computed: this.currentViewComputed(viewName, viewDisplayName, type)\n    }), createElement(Getter, {\n      name: \"intervalCount\",\n      computed: this.intervalCountComputed(viewName, intervalCount)\n    }), createElement(Getter, {\n      name: \"excludedDays\",\n      computed: this.excludedDaysComputed(viewName, excludedDays)\n    }), createElement(Getter, {\n      name: \"viewCellsData\",\n      computed: this.viewCellsDataComputed(viewName, cellDuration, startDayHour, endDayHour, viewCellsDataComputed)\n    }), createElement(Getter, {\n      name: \"startViewDate\",\n      computed: this.startViewDateComputed\n    }), createElement(Getter, {\n      name: \"endViewDate\",\n      computed: this.endViewDateComputed\n    }), createElement(Getter, {\n      name: \"cellDuration\",\n      computed: this.cellDurationComputed(viewName, cellDuration)\n    }), createElement(Getter, {\n      name: \"timeTableElementsMeta\",\n      computed: this.timeTableElementsMetaComputed(viewName, timeTableElementsMeta)\n    }), createElement(Getter, {\n      name: \"scrollingStrategy\",\n      computed: this.scrollingStrategyComputed(viewName, scrollingStrategy)\n    }), createElement(Getter, {\n      name: \"timeTableAppointments\",\n      computed: this.timeTableAppointmentsComputed(viewName, cellDuration, calculateAppointmentsIntervals)\n    }), createElement(Template, {\n      name: \"body\"\n    }, createElement(TemplateConnector, null, function (_a) {\n      var currentView = _a.currentView,\n          groupOrientation = _a.groupOrientation,\n          groups = _a.groups;\n      if (currentView.name !== viewName) return createElement(TemplatePlaceholder, null);\n      var isVerticalGrouping = (groupOrientation === null || groupOrientation === void 0 ? void 0 : groupOrientation(viewName)) === VERTICAL_GROUP_ORIENTATION;\n      return createElement(Layout, __assign({\n        dayScaleComponent: DayScalePlaceholder,\n        timeTableComponent: TimeTablePlaceholder,\n        setScrollingStrategy: _this.setScrollingStrategy,\n        groupingPanelComponent: isVerticalGrouping ? GroupingPanelPlaceholder : undefined,\n        groupingPanelSize: isVerticalGrouping ? groups === null || groups === void 0 ? void 0 : groups.length : 0,\n        dayScaleEmptyCellComponent: DayScaleEmptyCellPlaceholder\n      }, layoutProps));\n    })), createElement(Template, {\n      name: \"dayScale\"\n    }, createElement(TemplateConnector, null, function (_a) {\n      var currentView = _a.currentView,\n          viewCellsData = _a.viewCellsData,\n          formatDate = _a.formatDate,\n          groupByDate = _a.groupByDate,\n          groupOrientation = _a.groupOrientation;\n      if (currentView.name !== viewName) return createElement(TemplatePlaceholder, null);\n      var groupByDateEnabled = groupByDate === null || groupByDate === void 0 ? void 0 : groupByDate(viewName);\n      var isHorizontalGrouping = (groupOrientation === null || groupOrientation === void 0 ? void 0 : groupOrientation(viewName)) === HORIZONTAL_GROUP_ORIENTATION;\n      return createElement(DayScale, {\n        cellComponent: dayScaleCellComponent,\n        rowComponent: dayScaleRowComponent,\n        groupingPanelComponent: isHorizontalGrouping ? GroupingPanelPlaceholder : undefined,\n        cellsData: viewCellsData,\n        formatDate: formatDate,\n        groupedByDate: groupByDateEnabled\n      });\n    })), createElement(Template, {\n      name: \"cell\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var currentView = _a.currentView;\n        if (currentView.name !== viewName) return createElement(TemplatePlaceholder, {\n          params: params\n        });\n        return createElement(TimeTableCell, __assign({}, params));\n      });\n    }), createElement(Template, {\n      name: \"timeTable\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var formatDate = _a.formatDate,\n            currentView = _a.currentView,\n            viewCellsData = _a.viewCellsData;\n        if (currentView.name !== viewName) return createElement(TemplatePlaceholder, null);\n        return createElement(Fragment, null, createElement(TimeTableLayout, __assign({\n          cellsData: viewCellsData,\n          rowComponent: timeTableRowComponent,\n          cellComponent: CellPlaceholder,\n          formatDate: formatDate,\n          setCellElementsMeta: _this.updateCellElementsMeta,\n          key: timeTableLayoutKey\n        }, params)), createElement(AppointmentLayer, null, createElement(TimeTableAppointmentLayer, null)));\n      });\n    }), createElement(Template, {\n      name: \"dayScaleEmptyCell\"\n    }, createElement(TemplateConnector, null, function (_a) {\n      var currentView = _a.currentView;\n\n      if (currentView.name !== viewName || !DayScaleEmptyCell) {\n        return createElement(TemplatePlaceholder, null);\n      }\n\n      return createElement(DayScaleEmptyCell, null);\n    })));\n  };\n\n  return BasicViewBase;\n}(PureComponent);\n\nvar BasicView = BasicViewBase;\n\nvar calculateAppointmentsIntervalsBaseComputed = function (cellDuration) {\n  return function (_a) {\n    var appointments = _a.appointments,\n        startViewDate = _a.startViewDate,\n        endViewDate = _a.endViewDate,\n        excludedDays = _a.excludedDays;\n    return calculateWeekDateIntervals(appointments, startViewDate, endViewDate, excludedDays, cellDuration);\n  };\n};\n\nvar timeCellsDataComputed = function (startDayHour, endDayHour) {\n  return function (_a) {\n    var viewCellsData = _a.viewCellsData,\n        cellDuration = _a.cellDuration;\n    return timeCellsData(viewCellsData, startDayHour, endDayHour, cellDuration, Date.now());\n  };\n};\n\nvar TimeScalePlaceholder = function () {\n  return createElement(TemplatePlaceholder, {\n    name: \"timeScale\"\n  });\n};\n\nvar VericalViewBase = /*#__PURE__*/function (_super) {\n  __extends(VericalViewBase, _super);\n\n  function VericalViewBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.timeCellsDataComputed = memoize(function (viewName, startDayHour, endDayHour) {\n      return function (getters) {\n        return computed(getters, viewName, timeCellsDataComputed(startDayHour, endDayHour), getters.timeCellsData);\n      };\n    });\n    return _this;\n  }\n\n  VericalViewBase.prototype.render = function () {\n    var _a = this.props,\n        layoutComponent = _a.layoutComponent,\n        dayScaleEmptyCellComponent = _a.dayScaleEmptyCellComponent,\n        TimeScale = _a.timeScaleLayoutComponent,\n        TimeScaleLabel = _a.timeScaleLabelComponent,\n        timeScaleTickCellComponent = _a.timeScaleTickCellComponent,\n        timeScaleTicksRowComponent = _a.timeScaleTicksRowComponent,\n        dayScaleLayoutComponent = _a.dayScaleLayoutComponent,\n        dayScaleCellComponent = _a.dayScaleCellComponent,\n        dayScaleRowComponent = _a.dayScaleRowComponent,\n        timeTableLayoutComponent = _a.timeTableLayoutComponent,\n        timeTableRowComponent = _a.timeTableRowComponent,\n        timeTableCellComponent = _a.timeTableCellComponent,\n        cellDuration = _a.cellDuration,\n        excludedDays = _a.excludedDays,\n        viewName = _a.name,\n        appointmentLayerComponent = _a.appointmentLayerComponent,\n        intervalCount = _a.intervalCount,\n        displayName = _a.displayName,\n        startDayHour = _a.startDayHour,\n        endDayHour = _a.endDayHour,\n        viewCellsDataComputed = _a.viewCellsDataComputed,\n        type = _a.type;\n    return createElement(Plugin, {\n      name: \"WeekView\"\n    }, createElement(BasicView, {\n      viewCellsDataComputed: viewCellsDataComputed,\n      type: type,\n      cellDuration: cellDuration,\n      name: viewName,\n      intervalCount: intervalCount,\n      displayName: displayName,\n      startDayHour: startDayHour,\n      endDayHour: endDayHour,\n      excludedDays: excludedDays,\n      calculateAppointmentsIntervals: calculateAppointmentsIntervalsBaseComputed,\n      dayScaleEmptyCellComponent: dayScaleEmptyCellComponent,\n      dayScaleLayoutComponent: dayScaleLayoutComponent,\n      dayScaleCellComponent: dayScaleCellComponent,\n      dayScaleRowComponent: dayScaleRowComponent,\n      timeTableCellComponent: timeTableCellComponent,\n      timeTableLayoutComponent: timeTableLayoutComponent,\n      timeTableRowComponent: timeTableRowComponent,\n      appointmentLayerComponent: appointmentLayerComponent,\n      layoutComponent: layoutComponent,\n      layoutProps: {\n        timeScaleComponent: TimeScalePlaceholder\n      }\n    }), createElement(Getter, {\n      name: \"timeCellsData\",\n      computed: this.timeCellsDataComputed(viewName, startDayHour, endDayHour)\n    }), createElement(Template, {\n      name: \"timeScale\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var currentView = _a.currentView,\n            timeCellsData = _a.timeCellsData,\n            groups = _a.groups,\n            formatDate = _a.formatDate,\n            getGroupOrientation = _a.groupOrientation,\n            timeTableElementsMeta = _a.timeTableElementsMeta;\n        if (currentView.name !== viewName) return createElement(TemplatePlaceholder, null);\n        var groupOrientation = getGroupOrientation === null || getGroupOrientation === void 0 ? void 0 : getGroupOrientation(viewName);\n        return createElement(TimeScale, __assign({\n          labelComponent: TimeScaleLabel,\n          tickCellComponent: timeScaleTickCellComponent,\n          rowComponent: timeScaleTicksRowComponent,\n          cellsData: timeCellsData,\n          formatDate: formatDate,\n          groups: groups,\n          groupOrientation: groupOrientation,\n          height: getTimeTableHeight(timeTableElementsMeta)\n        }, params));\n      });\n    }));\n  };\n\n  return VericalViewBase;\n}(PureComponent);\n\nvar VerticalView = VericalViewBase;\n\nvar viewCellsDataBaseComputed = function (cellDuration, startDayHour, endDayHour) {\n  return function (_a) {\n    var currentDate = _a.currentDate,\n        intervalCount = _a.intervalCount;\n    return viewCellsData(currentDate, undefined, intervalCount, [], startDayHour, endDayHour, cellDuration, Date.now());\n  };\n};\n\nvar DayViewBase = /*#__PURE__*/function (_super) {\n  __extends(DayViewBase, _super);\n\n  function DayViewBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DayViewBase.prototype.render = function () {\n    var _a = this.props,\n        layoutComponent = _a.layoutComponent,\n        DayScaleEmptyCell = _a.dayScaleEmptyCellComponent,\n        timeScaleLayoutComponent = _a.timeScaleLayoutComponent,\n        timeScaleLabelComponent = _a.timeScaleLabelComponent,\n        timeScaleTickCellComponent = _a.timeScaleTickCellComponent,\n        timeScaleTicksRowComponent = _a.timeScaleTicksRowComponent,\n        dayScaleLayoutComponent = _a.dayScaleLayoutComponent,\n        dayScaleCellComponent = _a.dayScaleCellComponent,\n        dayScaleRowComponent = _a.dayScaleRowComponent,\n        timeTableLayoutComponent = _a.timeTableLayoutComponent,\n        timeTableRowComponent = _a.timeTableRowComponent,\n        timeTableCellComponent = _a.timeTableCellComponent,\n        appointmentLayerComponent = _a.appointmentLayerComponent,\n        cellDuration = _a.cellDuration,\n        viewName = _a.name,\n        intervalCount = _a.intervalCount,\n        displayName = _a.displayName,\n        startDayHour = _a.startDayHour,\n        endDayHour = _a.endDayHour;\n    return createElement(Plugin, {\n      name: \"DayView\"\n    }, createElement(VerticalView, {\n      viewCellsDataComputed: viewCellsDataBaseComputed,\n      type: VIEW_TYPES.DAY,\n      cellDuration: cellDuration,\n      name: viewName,\n      intervalCount: intervalCount,\n      displayName: displayName,\n      startDayHour: startDayHour,\n      endDayHour: endDayHour,\n      dayScaleEmptyCellComponent: DayScaleEmptyCell,\n      dayScaleLayoutComponent: dayScaleLayoutComponent,\n      dayScaleCellComponent: dayScaleCellComponent,\n      dayScaleRowComponent: dayScaleRowComponent,\n      timeTableCellComponent: timeTableCellComponent,\n      timeTableLayoutComponent: timeTableLayoutComponent,\n      timeTableRowComponent: timeTableRowComponent,\n      appointmentLayerComponent: appointmentLayerComponent,\n      layoutComponent: layoutComponent,\n      timeScaleLayoutComponent: timeScaleLayoutComponent,\n      timeScaleLabelComponent: timeScaleLabelComponent,\n      timeScaleTickCellComponent: timeScaleTickCellComponent,\n      timeScaleTicksRowComponent: timeScaleTicksRowComponent\n    }));\n  };\n\n  DayViewBase.defaultProps = {\n    name: 'Day',\n    startDayHour: 0,\n    endDayHour: 24,\n    cellDuration: 30,\n    intervalCount: 1\n  };\n  DayViewBase.components = {\n    layoutComponent: 'Layout',\n    layoutContainer: 'LayoutContainer',\n    appointmentLayerComponent: 'AppointmentLayer',\n    dayScaleEmptyCellComponent: 'DayScaleEmptyCell',\n    timeScaleLayoutComponent: 'TimeScaleLayout',\n    timeScaleLabelComponent: 'TimeScaleLabel',\n    timeScaleTickCellComponent: 'TimeScaleTickCell',\n    timeScaleTicksRowComponent: 'TimeScaleTicksRow',\n    dayScaleLayoutComponent: 'DayScaleLayout',\n    dayScaleCellComponent: 'DayScaleCell',\n    dayScaleRowComponent: 'DayScaleRow',\n    timeTableContainerComponent: 'TimeTableContainer',\n    timeTableLayoutComponent: 'TimeTableLayout',\n    timeTableCellComponent: 'TimeTableCell',\n    timeTableRowComponent: 'TimeTableRow'\n  };\n  return DayViewBase;\n}(PureComponent); // tslint:disable-next-line: max-line-length\n\n/*** A plugin that renders Scheduler data for a day. This plugin arranges appointments from top to bottom.\r\n * If their time intervals overlap, their width is decreased and they are placed next to each other.\r\n * */\n\n\nvar DayView = DayViewBase;\nvar DAYS_IN_WEEK = 7;\n\nvar viewCellsDataBaseComputed$1 = function (cellDuration, startDayHour, endDayHour) {\n  return function (_a) {\n    var firstDayOfWeek = _a.firstDayOfWeek,\n        intervalCount = _a.intervalCount,\n        excludedDays = _a.excludedDays,\n        currentDate = _a.currentDate;\n    return viewCellsData(currentDate, firstDayOfWeek, intervalCount * DAYS_IN_WEEK, excludedDays, startDayHour, endDayHour, cellDuration, Date.now());\n  };\n};\n\nvar WeekViewBase = /*#__PURE__*/function (_super) {\n  __extends(WeekViewBase, _super);\n\n  function WeekViewBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  WeekViewBase.prototype.render = function () {\n    var _a = this.props,\n        layoutComponent = _a.layoutComponent,\n        dayScaleEmptyCellComponent = _a.dayScaleEmptyCellComponent,\n        timeScaleLayoutComponent = _a.timeScaleLayoutComponent,\n        timeScaleLabelComponent = _a.timeScaleLabelComponent,\n        timeScaleTickCellComponent = _a.timeScaleTickCellComponent,\n        timeScaleTicksRowComponent = _a.timeScaleTicksRowComponent,\n        dayScaleLayoutComponent = _a.dayScaleLayoutComponent,\n        dayScaleCellComponent = _a.dayScaleCellComponent,\n        dayScaleRowComponent = _a.dayScaleRowComponent,\n        timeTableLayoutComponent = _a.timeTableLayoutComponent,\n        timeTableRowComponent = _a.timeTableRowComponent,\n        timeTableCellComponent = _a.timeTableCellComponent,\n        cellDuration = _a.cellDuration,\n        excludedDays = _a.excludedDays,\n        viewName = _a.name,\n        appointmentLayerComponent = _a.appointmentLayerComponent,\n        intervalCount = _a.intervalCount,\n        displayName = _a.displayName,\n        startDayHour = _a.startDayHour,\n        endDayHour = _a.endDayHour;\n    return createElement(Plugin, {\n      name: \"WeekView\"\n    }, createElement(VerticalView, {\n      viewCellsDataComputed: viewCellsDataBaseComputed$1,\n      type: VIEW_TYPES.WEEK,\n      cellDuration: cellDuration,\n      name: viewName,\n      intervalCount: intervalCount,\n      displayName: displayName,\n      startDayHour: startDayHour,\n      endDayHour: endDayHour,\n      excludedDays: excludedDays,\n      dayScaleEmptyCellComponent: dayScaleEmptyCellComponent,\n      dayScaleLayoutComponent: dayScaleLayoutComponent,\n      dayScaleCellComponent: dayScaleCellComponent,\n      dayScaleRowComponent: dayScaleRowComponent,\n      timeTableCellComponent: timeTableCellComponent,\n      timeTableLayoutComponent: timeTableLayoutComponent,\n      timeTableRowComponent: timeTableRowComponent,\n      appointmentLayerComponent: appointmentLayerComponent,\n      layoutComponent: layoutComponent,\n      timeScaleLayoutComponent: timeScaleLayoutComponent,\n      timeScaleLabelComponent: timeScaleLabelComponent,\n      timeScaleTickCellComponent: timeScaleTickCellComponent,\n      timeScaleTicksRowComponent: timeScaleTicksRowComponent\n    }));\n  };\n\n  WeekViewBase.defaultProps = {\n    startDayHour: 0,\n    endDayHour: 24,\n    cellDuration: 30,\n    intervalCount: 1,\n    excludedDays: [],\n    name: 'Week'\n  };\n  WeekViewBase.components = {\n    layoutComponent: 'Layout',\n    layoutContainerComponent: 'LayoutContainer',\n    appointmentLayerComponent: 'AppointmentLayer',\n    dayScaleEmptyCellComponent: 'DayScaleEmptyCell',\n    timeScaleLayoutComponent: 'TimeScaleLayout',\n    timeScaleLabelComponent: 'TimeScaleLabel',\n    timeScaleTickCellComponent: 'TimeScaleTickCell',\n    timeScaleTicksRowComponent: 'TimeScaleTicksRow',\n    dayScaleLayoutComponent: 'DayScaleLayout',\n    dayScaleCellComponent: 'DayScaleCell',\n    dayScaleRowComponent: 'DayScaleRow',\n    timeTableContainerComponent: 'TimeTableContainer',\n    timeTableLayoutComponent: 'TimeTableLayout',\n    timeTableCellComponent: 'TimeTableCell',\n    timeTableRowComponent: 'TimeTableRow'\n  };\n  return WeekViewBase;\n}(PureComponent); // tslint:disable: max-line-length\n\n/***\r\n * A plugin that renders the Scheduler's week view. This plugin arranges appointments from top to bottom.\r\n * If their time intervals overlap, their width is decreased and they are placed next to each other.\r\n * */\n\n\nvar WeekView = WeekViewBase;\n\nvar viewCellsDataBaseComputed$2 = function (cellDuration, startDayHour, endDayHour) {\n  return function (_a) {\n    var currentDate = _a.currentDate,\n        firstDayOfWeek = _a.firstDayOfWeek,\n        intervalCount = _a.intervalCount;\n    return monthCellsData(currentDate, firstDayOfWeek, intervalCount, Date.now());\n  };\n};\n\nvar calculateAppointmentsIntervalsBaseComputed$1 = function (cellDuration) {\n  return function (_a) {\n    var appointments = _a.appointments,\n        startViewDate = _a.startViewDate,\n        endViewDate = _a.endViewDate,\n        excludedDays = _a.excludedDays;\n    return calculateMonthDateIntervals(appointments, startViewDate, endViewDate);\n  };\n};\n\nvar MonthViewBase = /*#__PURE__*/function (_super) {\n  __extends(MonthViewBase, _super);\n\n  function MonthViewBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MonthViewBase.prototype.render = function () {\n    var _a = this.props,\n        layoutComponent = _a.layoutComponent,\n        dayScaleEmptyCellComponent = _a.dayScaleEmptyCellComponent,\n        dayScaleLayoutComponent = _a.dayScaleLayoutComponent,\n        dayScaleCellComponent = _a.dayScaleCellComponent,\n        dayScaleRowComponent = _a.dayScaleRowComponent,\n        timeTableLayoutComponent = _a.timeTableLayoutComponent,\n        timeTableRowComponent = _a.timeTableRowComponent,\n        timeTableCellComponent = _a.timeTableCellComponent,\n        appointmentLayerComponent = _a.appointmentLayerComponent,\n        viewName = _a.name,\n        intervalCount = _a.intervalCount,\n        displayName = _a.displayName;\n    return createElement(Plugin, {\n      name: \"MonthView\"\n    }, createElement(BasicView, {\n      viewCellsDataComputed: viewCellsDataBaseComputed$2,\n      type: VIEW_TYPES.MONTH,\n      name: viewName,\n      intervalCount: intervalCount,\n      displayName: displayName,\n      calculateAppointmentsIntervals: calculateAppointmentsIntervalsBaseComputed$1,\n      dayScaleEmptyCellComponent: dayScaleEmptyCellComponent,\n      dayScaleLayoutComponent: dayScaleLayoutComponent,\n      dayScaleCellComponent: dayScaleCellComponent,\n      dayScaleRowComponent: dayScaleRowComponent,\n      timeTableCellComponent: timeTableCellComponent,\n      timeTableLayoutComponent: timeTableLayoutComponent,\n      timeTableRowComponent: timeTableRowComponent,\n      appointmentLayerComponent: appointmentLayerComponent,\n      layoutComponent: layoutComponent\n    }));\n  };\n\n  MonthViewBase.defaultProps = {\n    intervalCount: 1,\n    name: 'Month'\n  };\n  MonthViewBase.components = {\n    layoutComponent: 'Layout',\n    appointmentLayerComponent: 'AppointmentLayer',\n    dayScaleEmptyCellComponent: 'DayScaleEmptyCell',\n    dayScaleLayoutComponent: 'DayScaleLayout',\n    dayScaleCellComponent: 'DayScaleCell',\n    dayScaleRowComponent: 'DayScaleRow',\n    timeTableContainerComponent: 'TimeTableContainer',\n    timeTableLayoutComponent: 'TimeTableLayout',\n    timeTableCellComponent: 'TimeTableCell',\n    timeTableRowComponent: 'TimeTableRow'\n  };\n  return MonthViewBase;\n}(PureComponent); // tslint:disable: max-line-length\n\n/***\r\n * A plugin that renders Scheduler data for a month. This plugin arranges appointments from left to right.\r\n * An appointment's size depends on its duration in days.\r\n * However, it occupies the entire day cell if an appointment lasts only for several hours or minutes.\r\n * The time scale and all-day panel are not available in this view.\r\n * */\n\n\nvar MonthView = MonthViewBase;\n\nvar ToolbarBase = /*#__PURE__*/function (_super) {\n  __extends(ToolbarBase, _super);\n\n  function ToolbarBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ToolbarBase.prototype.render = function () {\n    var _a = this.props,\n        Root = _a.rootComponent,\n        FlexibleSpaceComponent = _a.flexibleSpaceComponent;\n    return createElement(Plugin, {\n      name: \"Toolbar\"\n    }, createElement(Template, {\n      name: \"header\"\n    }, createElement(Root, null, createElement(TemplatePlaceholder, {\n      name: \"toolbarContent\"\n    })), createElement(TemplatePlaceholder, null)), createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(FlexibleSpaceComponent, null)));\n  };\n\n  ToolbarBase.components = {\n    rootComponent: 'Root',\n    flexibleSpaceComponent: 'FlexibleSpace'\n  };\n  return ToolbarBase;\n}(PureComponent);\n/** A plugin that renders the Scheduler's toolbar. */\n\n\nvar Toolbar = ToolbarBase;\nvar pluginDependencies = [{\n  name: 'Toolbar'\n}, {\n  name: 'ViewState'\n}];\n\nvar navigate = function (action, currentView, intervalCount) {\n  return function (direction, nextDate) {\n    return action({\n      direction: direction,\n      nextDate: nextDate,\n      amount: intervalCount,\n      step: currentView.type\n    });\n  };\n};\n\nvar DateNavigatorBase = /*#__PURE__*/function (_super) {\n  __extends(DateNavigatorBase, _super);\n\n  function DateNavigatorBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      visible: false\n    };\n\n    _this.setRootRef = function (target) {\n      _this.target = target;\n    };\n\n    _this.handleVisibilityToggle = function () {\n      _this.setState(function (prevState) {\n        return {\n          visible: !prevState.visible\n        };\n      });\n    };\n\n    _this.handleHide = function () {\n      _this.setState({\n        visible: false\n      });\n    };\n\n    _this.navigateAction = memoize(function (changeCurrentDate, currentView, intervalCount, navigateAction) {\n      return navigateAction(changeCurrentDate, currentView, intervalCount);\n    });\n    return _this;\n  }\n\n  DateNavigatorBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        Root = _a.rootComponent,\n        Overlay = _a.overlayComponent,\n        OpenButton = _a.openButtonComponent,\n        NavigationButton = _a.navigationButtonComponent,\n        Calendar = _a.calendarComponent,\n        CalendarRow = _a.calendarRowComponent,\n        CalendarCell = _a.calendarCellComponent,\n        CalendarHeaderRow = _a.calendarHeaderRowComponent,\n        CalendarHeaderCell = _a.calendarHeaderCellComponent,\n        CalendarText = _a.calendarTextComponent,\n        CalendarNavigationButton = _a.calendarNavigationButtonComponent,\n        CalendarNavigator = _a.calendarNavigatorComponent;\n    var visible = this.state.visible;\n    return createElement(Plugin, {\n      name: \"DateNavigator\",\n      dependencies: pluginDependencies\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplateConnector, null, function (_a, _b) {\n      var currentDate = _a.currentDate,\n          startViewDate = _a.startViewDate,\n          endViewDate = _a.endViewDate,\n          firstDayOfWeek = _a.firstDayOfWeek,\n          currentView = _a.currentView,\n          intervalCount = _a.intervalCount,\n          formatDate = _a.formatDate;\n      var changeCurrentDate = _b.changeCurrentDate;\n\n      var navigateAction = _this.navigateAction(changeCurrentDate, currentView, intervalCount, navigate);\n\n      var calendarDateChanged = function (nextDate) {\n        navigateAction(undefined, nextDate);\n\n        _this.handleHide();\n      };\n\n      var navigatorText = viewBoundText(startViewDate, endViewDate, currentView.type, currentDate, intervalCount, formatDate);\n      return createElement(Fragment, null, createElement(Root, {\n        navigationButtonComponent: NavigationButton,\n        openButtonComponent: OpenButton,\n        navigatorText: navigatorText,\n        rootRef: _this.setRootRef,\n        onVisibilityToggle: _this.handleVisibilityToggle,\n        onNavigate: navigateAction\n      }), createElement(Overlay, {\n        visible: visible,\n        target: _this.target,\n        onHide: _this.handleHide\n      }, createElement(Calendar, {\n        selectedDate: currentDate,\n        firstDayOfWeek: firstDayOfWeek,\n        getCells: monthCellsData,\n        textComponent: CalendarText,\n        navigationButtonComponent: CalendarNavigationButton,\n        rowComponent: CalendarRow,\n        cellComponent: CalendarCell,\n        headerRowComponent: CalendarHeaderRow,\n        headerCellComponent: CalendarHeaderCell,\n        navigatorComponent: CalendarNavigator,\n        onSelectedDateChange: calendarDateChanged,\n        formatDate: formatDate\n      })));\n    }), createElement(TemplatePlaceholder, null)));\n  };\n\n  DateNavigatorBase.components = {\n    rootComponent: 'Root',\n    overlayComponent: 'Overlay',\n    openButtonComponent: 'OpenButton',\n    navigationButtonComponent: 'NavigationButton',\n    calendarComponent: 'Calendar',\n    calendarRowComponent: 'CalendarRow',\n    calendarCellComponent: 'CalendarCell',\n    calendarHeaderRowComponent: 'CalendarHeaderRow',\n    calendarHeaderCellComponent: 'CalendarHeaderCell',\n    calendarTextComponent: 'CalendarText',\n    calendarNavigatorComponent: 'CalendarNavigator',\n    calendarNavigationButtonComponent: 'CalendarNavigationButton'\n  };\n  return DateNavigatorBase;\n}(PureComponent);\n/** A plugin that renders the Scheduler’s date navigator. */\n\n\nvar DateNavigator = DateNavigatorBase;\nvar pluginDependencies$1 = [{\n  name: 'Toolbar'\n}, {\n  name: 'ViewState'\n}];\n\nvar ViewSwitcherBase = /*#__PURE__*/function (_super) {\n  __extends(ViewSwitcherBase, _super);\n\n  function ViewSwitcherBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ViewSwitcherBase.prototype.render = function () {\n    var Switcher = this.props.switcherComponent;\n    return createElement(Plugin, {\n      name: \"ViewSwitcher\",\n      dependencies: pluginDependencies$1\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a, _b) {\n      var currentView = _a.currentView,\n          availableViews = _a.availableViews;\n      var setCurrentViewName = _b.setCurrentViewName;\n      return createElement(Switcher, {\n        currentView: currentView,\n        availableViews: availableViews,\n        onChange: setCurrentViewName\n      });\n    })));\n  };\n\n  ViewSwitcherBase.components = {\n    switcherComponent: 'Switcher'\n  };\n  return ViewSwitcherBase;\n}(PureComponent);\n/** A plugin that renders the Scheduler's view switcher. */\n\n\nvar ViewSwitcher = ViewSwitcherBase;\n\nvar AppointmentPlaceholder = function (params) {\n  return createElement(TemplatePlaceholder, {\n    name: \"appointment\",\n    params: params\n  });\n};\n\nvar renderAppointments = function (rects) {\n  return rects.map(function (_a) {\n    var dataItem = _a.dataItem,\n        rectType = _a.type,\n        fromPrev = _a.fromPrev,\n        toNext = _a.toNext,\n        durationType = _a.durationType,\n        resources = _a.resources,\n        key = _a.key,\n        geometry = __rest(_a, [\"dataItem\", \"type\", \"fromPrev\", \"toNext\", \"durationType\", \"resources\", \"key\"]);\n\n    return createElement(AppointmentPlaceholder, {\n      key: key,\n      type: rectType,\n      data: dataItem,\n      fromPrev: fromPrev,\n      toNext: toNext,\n      durationType: durationType,\n      resources: resources,\n      style: getAppointmentStyle(geometry)\n    });\n  });\n};\n\nvar pluginDependencies$2 = [{\n  name: 'DayView',\n  optional: true\n}, {\n  name: 'WeekView',\n  optional: true\n}, {\n  name: 'MonthView',\n  optional: true\n}];\n\nvar AppointmentsBase = /*#__PURE__*/function (_super) {\n  __extends(AppointmentsBase, _super);\n\n  function AppointmentsBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.updateTimeTableAppointments = memoize(function (timeTableAppointments, viewCellsData, timeTableElementsMeta, currentView, startViewDate, endViewDate, cellDuration, groups, getGroupOrientation, groupByDate, placeAppointmentsNextToEachOther) {\n      if (!isTimeTableElementsMetaActual(viewCellsData, timeTableElementsMeta)) return null;\n      var groupOrientation = getGroupOrientation ? getGroupOrientation(currentView === null || currentView === void 0 ? void 0 : currentView.name) : HORIZONTAL_GROUP_ORIENTATION;\n      var groupCount = groups ? getGroupsLastRow(groups).length : 1;\n      var appointmentType = {\n        growDirection: VERTICAL_TYPE,\n        multiline: false\n      };\n      var getRects = getVerticalRectByAppointmentData;\n\n      if (currentView.type === VIEW_TYPES.MONTH) {\n        appointmentType = {\n          growDirection: HORIZONTAL_TYPE,\n          multiline: true\n        };\n        getRects = getHorizontalRectByAppointmentData;\n      }\n\n      return renderAppointments(calculateRectByDateAndGroupIntervals(appointmentType, timeTableAppointments, getRects, {\n        startViewDate: startViewDate,\n        endViewDate: endViewDate,\n        cellDuration: cellDuration,\n        viewCellsData: viewCellsData,\n        cellElementsMeta: timeTableElementsMeta,\n        placeAppointmentsNextToEachOther: placeAppointmentsNextToEachOther\n      }, {\n        groupOrientation: groupOrientation,\n        groupedByDate: groupByDate === null || groupByDate === void 0 ? void 0 : groupByDate(currentView === null || currentView === void 0 ? void 0 : currentView.name),\n        groupCount: groupCount\n      }));\n    });\n    _this.updateAllDayAppointments = memoize(function (allDayAppointments, viewCellsData, allDayElementsMeta, currentView, startViewDate, endViewDate, groups, getGroupOrientation, groupByDate) {\n      var groupOrientation = getGroupOrientation ? getGroupOrientation(currentView === null || currentView === void 0 ? void 0 : currentView.name) : HORIZONTAL_GROUP_ORIENTATION;\n      var groupCount = groups ? getGroupsLastRow(groups).length : 1;\n\n      if (!isAllDayElementsMetaActual(viewCellsData, allDayElementsMeta, groupOrientation, groupCount)) {\n        return null;\n      }\n\n      return renderAppointments(calculateRectByDateAndGroupIntervals({\n        growDirection: HORIZONTAL_TYPE,\n        multiline: false\n      }, allDayAppointments, getHorizontalRectByAppointmentData, {\n        startViewDate: startViewDate,\n        endViewDate: endViewDate,\n        viewCellsData: viewCellsData,\n        cellElementsMeta: allDayElementsMeta\n      }, {\n        groupOrientation: groupOrientation,\n        groupedByDate: groupByDate === null || groupByDate === void 0 ? void 0 : groupByDate(currentView === null || currentView === void 0 ? void 0 : currentView.name),\n        groupCount: groupCount\n      }));\n    });\n    return _this;\n  }\n\n  AppointmentsBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        SplitIndicator = _a.splitIndicatorComponent,\n        Appointment = _a.appointmentComponent,\n        AppointmentContent = _a.appointmentContentComponent,\n        Container = _a.containerComponent,\n        recurringIconComponent = _a.recurringIconComponent,\n        placeAppointmentsNextToEachOther = _a.placeAppointmentsNextToEachOther;\n    return createElement(Plugin, {\n      name: \"Appointments\",\n      dependencies: pluginDependencies$2\n    }, createElement(Template, {\n      name: \"timeTableAppointmentLayer\"\n    }, createElement(TemplateConnector, null, function (_a) {\n      var timeTableAppointments = _a.timeTableAppointments,\n          viewCellsData = _a.viewCellsData,\n          timeTableElementsMeta = _a.timeTableElementsMeta,\n          currentView = _a.currentView,\n          startViewDate = _a.startViewDate,\n          endViewDate = _a.endViewDate,\n          cellDuration = _a.cellDuration,\n          groupOrientation = _a.groupOrientation,\n          groups = _a.groups,\n          groupByDate = _a.groupByDate;\n      return _this.updateTimeTableAppointments(timeTableAppointments, viewCellsData, timeTableElementsMeta, currentView, startViewDate, endViewDate, cellDuration, groups, groupOrientation, groupByDate, placeAppointmentsNextToEachOther);\n    })), createElement(Template, {\n      name: \"allDayAppointmentLayer\"\n    }, createElement(TemplateConnector, null, function (_a) {\n      var allDayAppointments = _a.allDayAppointments,\n          viewCellsData = _a.viewCellsData,\n          allDayElementsMeta = _a.allDayElementsMeta,\n          startViewDate = _a.startViewDate,\n          endViewDate = _a.endViewDate,\n          groupOrientation = _a.groupOrientation,\n          currentView = _a.currentView,\n          groups = _a.groups,\n          groupByDate = _a.groupByDate;\n      return _this.updateAllDayAppointments(allDayAppointments, viewCellsData, allDayElementsMeta, currentView, startViewDate, endViewDate, groups, groupOrientation, groupByDate);\n    })), createElement(Template, {\n      name: \"appointment\"\n    }, function (_a) {\n      var style = _a.style,\n          params = __rest(_a, [\"style\"]);\n\n      return createElement(TemplateConnector, null, function (_a) {\n        var formatDate = _a.formatDate;\n        return createElement(Container, {\n          style: style\n        }, createElement(TemplatePlaceholder, {\n          name: \"appointmentTop\",\n          params: {\n            data: params.data,\n            type: params.type,\n            slice: params.fromPrev\n          }\n        }), createElement(TemplatePlaceholder, {\n          name: \"appointmentContent\",\n          params: __assign(__assign({}, params), {\n            formatDate: formatDate\n          })\n        }), createElement(TemplatePlaceholder, {\n          name: \"appointmentBottom\",\n          params: {\n            data: params.data,\n            type: params.type,\n            slice: params.toNext\n          }\n        }));\n      });\n    }), createElement(Template, {\n      name: \"appointmentContent\"\n    }, function (_a) {\n      var onClick = _a.onClick,\n          onDoubleClick = _a.onDoubleClick,\n          formatDate = _a.formatDate,\n          data = _a.data,\n          type = _a.type,\n          fromPrev = _a.fromPrev,\n          toNext = _a.toNext,\n          durationType = _a.durationType,\n          resources = _a.resources,\n          restParams = __rest(_a, [\"onClick\", \"onDoubleClick\", \"formatDate\", \"data\", \"type\", \"fromPrev\", \"toNext\", \"durationType\", \"resources\"]);\n\n      return createElement(Appointment, __assign({\n        data: data,\n        resources: resources\n      }, createClickHandlers(onClick, onDoubleClick), restParams), fromPrev && createElement(SplitIndicator, {\n        position: POSITION_START,\n        appointmentType: type\n      }), createElement(AppointmentContent, {\n        data: data,\n        type: type,\n        durationType: durationType,\n        recurringIconComponent: recurringIconComponent,\n        formatDate: formatDate,\n        resources: resources\n      }), toNext && createElement(SplitIndicator, {\n        position: POSITION_END,\n        appointmentType: type\n      }));\n    }));\n  };\n\n  AppointmentsBase.components = {\n    splitIndicatorComponent: 'SplitIndicator',\n    containerComponent: 'Container',\n    appointmentComponent: 'Appointment',\n    appointmentContentComponent: 'AppointmentContent',\n    recurringIconComponent: 'RecurringIcon'\n  };\n  AppointmentsBase.defaultProps = {\n    placeAppointmentsNextToEachOther: false\n  };\n  return AppointmentsBase;\n}(PureComponent);\n/** A plugin that renders appointments. */\n\n\nvar Appointments = AppointmentsBase;\n\nvar isMonthView = function (currentView) {\n  return currentView.type === VIEW_TYPES.MONTH;\n};\n\nvar isVerticalGrouping = function (currentView, groupOrientation) {\n  return (groupOrientation === null || groupOrientation === void 0 ? void 0 : groupOrientation(currentView.name)) === VERTICAL_GROUP_ORIENTATION;\n};\n\nvar pluginDependencies$3 = [{\n  name: 'DayView',\n  optional: true\n}, {\n  name: 'WeekView',\n  optional: true\n}];\nvar defaultMessages = {\n  allDay: 'All Day'\n};\n\nvar AllDayAppointmentLayerPlaceholder = function () {\n  return createElement(TemplatePlaceholder, {\n    name: \"allDayAppointmentLayer\"\n  });\n};\n\nvar AllDayPanelPlaceholder = function (params) {\n  return createElement(TemplatePlaceholder, {\n    name: \"allDayPanel\",\n    params: params\n  });\n};\n\nvar CellPlaceholder$1 = function (params) {\n  return createElement(TemplatePlaceholder, {\n    name: \"allDayPanelCell\",\n    params: params\n  });\n};\n\nvar AllDayTitlePlaceholder = function (params) {\n  return createElement(TemplatePlaceholder, {\n    name: \"allDayTitle\",\n    params: params\n  });\n};\n\nvar AllDayPanelBase = /*#__PURE__*/function (_super) {\n  __extends(AllDayPanelBase, _super);\n\n  function AllDayPanelBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      elementsMeta: {},\n      previousCell: null,\n      // The key has to be generated every time the Cell component is updated to rerender the Layout\n      // and, consequently, update allDayElementsMeta\n      layoutKey: 0\n    };\n    _this.allDayCellsDataComputed = memoize(function (_a) {\n      var viewCellsData = _a.viewCellsData;\n      return allDayCells(viewCellsData);\n    });\n    _this.updateCellElementsMeta = memoize(function (cellElementsMeta) {\n      _this.setState({\n        elementsMeta: cellElementsMeta\n      });\n    });\n    _this.allDayAppointmentsComputed = memoize(function (_a) {\n      var appointments = _a.appointments,\n          startViewDate = _a.startViewDate,\n          endViewDate = _a.endViewDate,\n          excludedDays = _a.excludedDays;\n      var allDayLeftBound = moment(startViewDate).hours(0).minutes(0).toDate();\n      var allDayRightBound = moment(endViewDate).hours(23).minutes(59).toDate();\n      return calculateAllDayDateIntervals(appointments, allDayLeftBound, allDayRightBound, excludedDays);\n    });\n    _this.allDayPanelExistsComputed = memoize(function (_a) {\n      var currentView = _a.currentView;\n      return !isMonthView(currentView);\n    });\n    _this.getMessageFormatter = memoize(function (messages, allDayPanelDefaultMessages) {\n      return getMessagesFormatter(__assign(__assign({}, allDayPanelDefaultMessages), messages));\n    });\n    return _this;\n  }\n\n  AllDayPanelBase.getDerivedStateFromProps = function (props, state) {\n    if (props.cellComponent !== state.previousCell) {\n      return __assign(__assign({}, state), {\n        previousCell: props.cellComponent,\n        layoutKey: Math.random()\n      });\n    }\n\n    return null;\n  };\n\n  AllDayPanelBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        AppointmentLayer = _a.appointmentLayerComponent,\n        Layout = _a.layoutComponent,\n        Cell = _a.cellComponent,\n        rowComponent = _a.rowComponent,\n        TitleCell = _a.titleCellComponent,\n        Container = _a.containerComponent,\n        messages = _a.messages;\n    var _b = this.state,\n        elementsMeta = _b.elementsMeta,\n        layoutKey = _b.layoutKey;\n    var getMessage = this.getMessageFormatter(messages, defaultMessages);\n    return createElement(Plugin, {\n      name: \"AllDayPanel\",\n      dependencies: pluginDependencies$3\n    }, createElement(Getter, {\n      name: \"allDayElementsMeta\",\n      value: elementsMeta\n    }), createElement(Getter, {\n      name: \"allDayCellsData\",\n      computed: this.allDayCellsDataComputed\n    }), createElement(Getter, {\n      name: \"allDayPanelExists\",\n      computed: this.allDayPanelExistsComputed\n    }), createElement(Getter, {\n      name: \"allDayAppointments\",\n      computed: this.allDayAppointmentsComputed\n    }), createElement(Template, {\n      name: \"timeTable\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var currentView = _a.currentView,\n            groupOrientation = _a.groupOrientation,\n            allDayCellsData = _a.allDayCellsData;\n\n        if (isMonthView(currentView) || !isVerticalGrouping(currentView, groupOrientation)) {\n          return createElement(TemplatePlaceholder, {\n            params: params\n          });\n        }\n\n        return createElement(Fragment, null, createElement(TemplatePlaceholder, {\n          params: __assign(__assign({}, params), {\n            allDayCellComponent: CellPlaceholder$1,\n            allDayRowComponent: rowComponent,\n            allDayCellsData: allDayCellsData\n          })\n        }), createElement(AppointmentLayer, null, createElement(AllDayAppointmentLayerPlaceholder, null)));\n      });\n    }), createElement(Template, {\n      name: \"dayScaleEmptyCell\"\n    }, createElement(TemplateConnector, null, function (_a) {\n      var currentView = _a.currentView,\n          groupOrientation = _a.groupOrientation;\n\n      if (isMonthView(currentView) || isVerticalGrouping(currentView, groupOrientation)) {\n        return createElement(TemplatePlaceholder, null);\n      }\n\n      return createElement(AllDayTitlePlaceholder, null);\n    })), createElement(Template, {\n      name: \"timeScale\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var currentView = _a.currentView,\n            groupOrientation = _a.groupOrientation;\n\n        if (isMonthView(currentView) || !isVerticalGrouping(currentView, groupOrientation)) {\n          return createElement(TemplatePlaceholder, {\n            params: params\n          });\n        }\n\n        return createElement(TemplatePlaceholder, {\n          params: __assign(__assign({}, params), {\n            allDayTitleComponent: AllDayTitlePlaceholder,\n            showAllDayTitle: true\n          })\n        });\n      });\n    }), createElement(Template, {\n      name: \"dayScale\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a) {\n      var currentView = _a.currentView,\n          groupOrientation = _a.groupOrientation;\n\n      if (isMonthView(currentView) || isVerticalGrouping(currentView, groupOrientation)) {\n        return null;\n      }\n\n      return createElement(Container, null, createElement(AllDayPanelPlaceholder, null));\n    })), createElement(Template, {\n      name: \"allDayPanel\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a) {\n      var currentView = _a.currentView,\n          formatDate = _a.formatDate,\n          allDayCellsData = _a.allDayCellsData;\n      if (currentView.type === VIEW_TYPES.MONTH) return null;\n      return createElement(Fragment, null, createElement(Layout, {\n        cellComponent: CellPlaceholder$1,\n        rowComponent: rowComponent,\n        cellsData: allDayCellsData[0],\n        setCellElementsMeta: _this.updateCellElementsMeta,\n        formatDate: formatDate,\n        key: layoutKey\n      }), createElement(AppointmentLayer, null, createElement(AllDayAppointmentLayerPlaceholder, null)));\n    })), createElement(Template, {\n      name: \"allDayTitle\"\n    }, function (params) {\n      return createElement(TitleCell, __assign({\n        getMessage: getMessage\n      }, params));\n    }), createElement(Template, {\n      name: \"allDayPanelCell\"\n    }, function (params) {\n      return createElement(Cell, __assign({}, params));\n    }));\n  };\n\n  AllDayPanelBase.defaultProps = {\n    messages: {}\n  };\n  AllDayPanelBase.components = {\n    appointmentLayerComponent: 'AppointmentLayer',\n    layoutComponent: 'Layout',\n    layoutContainerComponent: 'LayoutContainer',\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    titleCellComponent: 'TitleCell',\n    containerComponent: 'Container'\n  };\n  return AllDayPanelBase;\n}(PureComponent);\n/** A plugin that renders the All Day Panel. */\n\n\nvar AllDayPanel = AllDayPanelBase;\n\nvar ViewStateBase = /*#__PURE__*/function (_super) {\n  __extends(ViewStateBase, _super);\n\n  function ViewStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.getCurrentViewComputed = memoize(function (currentViewName) {\n      return function () {\n        return currentViewName ? {\n          name: currentViewName\n        } : undefined;\n      };\n    });\n    _this.state = {\n      currentDate: props.currentDate || props.defaultCurrentDate,\n      currentViewName: props.currentViewName || props.defaultCurrentViewName\n    };\n    var stateHelper = createStateHelper(_this, {\n      currentDate: function () {\n        var onCurrentDateChange = _this.props.onCurrentDateChange;\n        return onCurrentDateChange;\n      },\n      currentViewName: function () {\n        var onCurrentViewNameChange = _this.props.onCurrentViewNameChange;\n        return onCurrentViewNameChange;\n      }\n    });\n    _this.changeCurrentDate = stateHelper.applyFieldReducer.bind(stateHelper, 'currentDate', changeCurrentDate);\n    _this.setCurrentViewName = stateHelper.applyFieldReducer.bind(stateHelper, 'currentViewName', setCurrentViewName);\n    return _this;\n  }\n\n  ViewStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.currentDate,\n        currentDate = _a === void 0 ? prevState.currentDate : _a,\n        _b = nextProps.currentViewName,\n        currentViewName = _b === void 0 ? prevState.currentViewName : _b;\n    return {\n      currentDate: currentDate,\n      currentViewName: currentViewName\n    };\n  };\n\n  ViewStateBase.prototype.render = function () {\n    var _a = this.state,\n        currentDate = _a.currentDate,\n        stateCurrentViewName = _a.currentViewName;\n    return createElement(Plugin, {\n      name: \"ViewState\"\n    }, createElement(Getter, {\n      name: \"currentDate\",\n      value: currentDate\n    }), createElement(Getter, {\n      name: \"currentView\",\n      computed: this.getCurrentViewComputed(stateCurrentViewName)\n    }), createElement(Action, {\n      name: \"changeCurrentDate\",\n      action: this.changeCurrentDate\n    }), createElement(Action, {\n      name: \"setCurrentViewName\",\n      action: this.setCurrentViewName\n    }));\n  };\n\n  ViewStateBase.defaultProps = {\n    defaultCurrentDate: new Date()\n  };\n  return ViewStateBase;\n}(PureComponent);\n/** A plugin that manages the view state. It specifies the current date and the displayed view. */\n\n\nvar ViewState = ViewStateBase;\n\nvar EditingStateBase = /*#__PURE__*/function (_super) {\n  __extends(EditingStateBase, _super);\n\n  function EditingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      editingAppointment: props.editingAppointment || props.defaultEditingAppointment,\n      addedAppointment: props.addedAppointment || props.defaultAddedAppointment,\n      appointmentChanges: props.appointmentChanges || props.defaultAppointmentChanges\n    };\n    var stateHelper = createStateHelper(_this, {\n      editingAppointment: function () {\n        var onEditingAppointmentChange = _this.props.onEditingAppointmentChange;\n        return onEditingAppointmentChange;\n      },\n      addedAppointment: function () {\n        var onAddedAppointmentChange = _this.props.onAddedAppointmentChange;\n        return onAddedAppointmentChange;\n      },\n      appointmentChanges: function () {\n        var onAppointmentChangesChange = _this.props.onAppointmentChangesChange;\n        return onAppointmentChangesChange;\n      }\n    });\n    _this.startEditAppointment = stateHelper.applyFieldReducer.bind(stateHelper, 'editingAppointment', startEditAppointment);\n    _this.stopEditAppointment = stateHelper.applyFieldReducer.bind(stateHelper, 'editingAppointment', stopEditAppointment);\n    _this.changeAppointment = stateHelper.applyFieldReducer.bind(stateHelper, 'appointmentChanges', changeAppointment);\n    _this.cancelChangedAppointment = stateHelper.applyFieldReducer.bind(stateHelper, 'appointmentChanges', cancelChanges);\n\n    _this.commitChangedAppointment = function (type) {\n      if (type === void 0) {\n        type = RECURRENCE_EDIT_SCOPE.CURRENT;\n      }\n\n      var _a = _this.state,\n          appointmentChanges = _a.appointmentChanges,\n          editingAppointment = _a.editingAppointment;\n      var _b = _this.props,\n          onCommitChanges = _b.onCommitChanges,\n          preCommitChanges = _b.preCommitChanges;\n      if (!editingAppointment) return;\n      var changes = !editingAppointment.rRule ? {\n        changed: changedAppointmentById(appointmentChanges, editingAppointment.id)\n      } : preCommitChanges(appointmentChanges, editingAppointment, type);\n      onCommitChanges(changes);\n\n      _this.cancelChangedAppointment();\n\n      _this.stopEditAppointment();\n    };\n\n    _this.addAppointment = stateHelper.applyFieldReducer.bind(stateHelper, 'addedAppointment', addAppointment);\n    _this.changeAddedAppointment = stateHelper.applyFieldReducer.bind(stateHelper, 'addedAppointment', changeAppointment);\n    _this.cancelAddedAppointment = stateHelper.applyFieldReducer.bind(stateHelper, 'addedAppointment', cancelAddedAppointment);\n\n    _this.commitAddedAppointment = function () {\n      var onCommitChanges = _this.props.onCommitChanges;\n      var stateAddedAppointment = _this.state.addedAppointment;\n      onCommitChanges({\n        added: stateAddedAppointment\n      });\n    };\n\n    _this.commitDeletedAppointment = function (_a) {\n      var deletedAppointmentData = _a.deletedAppointmentData,\n          _b = _a.type,\n          type = _b === void 0 ? 'current' : _b;\n      var _c = _this.props,\n          onCommitChanges = _c.onCommitChanges,\n          preCommitChanges = _c.preCommitChanges;\n      var changes = deletedAppointmentData.rRule ? preCommitChanges(null, deletedAppointmentData, type) : {\n        deleted: deletedAppointmentData.id\n      };\n      onCommitChanges(changes);\n    };\n\n    return _this;\n  }\n\n  EditingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.editingAppointment,\n        editingAppointment = _a === void 0 ? prevState.editingAppointment : _a,\n        _b = nextProps.appointmentChanges,\n        appointmentChanges = _b === void 0 ? prevState.appointmentChanges : _b,\n        _c = nextProps.addedAppointment,\n        addedAppointment = _c === void 0 ? prevState.addedAppointment : _c;\n    return {\n      editingAppointment: editingAppointment,\n      appointmentChanges: appointmentChanges,\n      addedAppointment: addedAppointment\n    };\n  };\n\n  EditingStateBase.prototype.render = function () {\n    var _a = this.state,\n        addedAppointment = _a.addedAppointment,\n        editingAppointment = _a.editingAppointment,\n        appointmentChanges = _a.appointmentChanges;\n    return createElement(Plugin, {\n      name: \"EditingState\"\n    }, createElement(Getter, {\n      name: \"editingAppointment\",\n      value: editingAppointment\n    }), createElement(Action, {\n      name: \"startEditAppointment\",\n      action: this.startEditAppointment\n    }), createElement(Action, {\n      name: \"stopEditAppointment\",\n      action: this.stopEditAppointment\n    }), createElement(Getter, {\n      name: \"appointmentChanges\",\n      value: appointmentChanges\n    }), createElement(Action, {\n      name: \"changeAppointment\",\n      action: this.changeAppointment\n    }), createElement(Action, {\n      name: \"cancelChangedAppointment\",\n      action: this.cancelChangedAppointment\n    }), createElement(Action, {\n      name: \"commitChangedAppointment\",\n      action: this.commitChangedAppointment\n    }), createElement(Getter, {\n      name: \"addedAppointment\",\n      value: addedAppointment\n    }), createElement(Action, {\n      name: \"addAppointment\",\n      action: this.addAppointment\n    }), createElement(Action, {\n      name: \"changeAddedAppointment\",\n      action: this.changeAddedAppointment\n    }), createElement(Action, {\n      name: \"cancelAddedAppointment\",\n      action: this.cancelAddedAppointment\n    }), createElement(Action, {\n      name: \"commitAddedAppointment\",\n      action: this.commitAddedAppointment\n    }), createElement(Action, {\n      name: \"commitDeletedAppointment\",\n      action: this.commitDeletedAppointment\n    }));\n  };\n\n  EditingStateBase.defaultProps = {\n    defaultEditingAppointment: undefined,\n    defaultAppointmentChanges: {},\n    defaultAddedAppointment: {},\n    preCommitChanges: preCommitChanges\n  };\n  return EditingStateBase;\n}(PureComponent);\n/** A plugin that manages the scheduler appointment editing state. */\n\n\nvar EditingState = EditingStateBase;\nvar pluginDependencies$4 = [{\n  name: 'Appointments'\n}, {\n  name: 'EditingState',\n  optional: true\n}, {\n  name: 'EditRecurrenceMenu',\n  optional: true\n}, {\n  name: 'IntegratedEditing',\n  optional: true\n}];\nvar commandButtonIds = {\n  open: OPEN_COMMAND_BUTTON,\n  close: CLOSE_COMMAND_BUTTON,\n  delete: DELETE_COMMAND_BUTTON\n};\n\nvar AppointmentTooltipBase = /*#__PURE__*/function (_super) {\n  __extends(AppointmentTooltipBase, _super);\n\n  function AppointmentTooltipBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      visible: props.visible,\n      appointmentMeta: props.appointmentMeta\n    };\n    var stateHelper = createStateHelper(_this, {\n      visible: function () {\n        var onVisibilityChange = _this.props.onVisibilityChange;\n        return onVisibilityChange;\n      },\n      appointmentMeta: function () {\n        var onAppointmentMetaChange = _this.props.onAppointmentMetaChange;\n        return onAppointmentMetaChange;\n      }\n    });\n\n    var toggleVisibility = function () {\n      var isOpen = _this.state.visible;\n      return !isOpen;\n    };\n\n    _this.toggleVisibility = stateHelper.applyFieldReducer.bind(stateHelper, 'visible', toggleVisibility);\n    _this.setAppointmentMeta = stateHelper.applyFieldReducer.bind(stateHelper, 'appointmentMeta', setAppointmentMeta);\n\n    _this.onAppointmentClick = function (_a) {\n      var target = _a.target,\n          data = _a.data;\n\n      _this.setAppointmentMeta({\n        target: target,\n        data: data\n      });\n\n      _this.toggleVisibility();\n    };\n\n    return _this;\n  }\n\n  AppointmentTooltipBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.visible,\n        visible = _a === void 0 ? prevState.visible : _a,\n        _b = nextProps.appointmentMeta,\n        appointmentMeta = _b === void 0 ? prevState.appointmentMeta : _b;\n    return {\n      appointmentMeta: appointmentMeta,\n      visible: visible\n    };\n  };\n\n  AppointmentTooltipBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        showOpenButton = _a.showOpenButton,\n        showDeleteButton = _a.showDeleteButton,\n        showCloseButton = _a.showCloseButton,\n        Layout = _a.layoutComponent,\n        headerComponent = _a.headerComponent,\n        contentComponent = _a.contentComponent,\n        commandButtonComponent = _a.commandButtonComponent,\n        recurringIconComponent = _a.recurringIconComponent;\n    var _b = this.state,\n        visible = _b.visible,\n        appointmentMeta = _b.appointmentMeta;\n    return createElement(Plugin, {\n      name: \"AppointmentTooltip\",\n      dependencies: pluginDependencies$4\n    }, createElement(Action, {\n      name: TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY,\n      action: this.toggleVisibility\n    }), createElement(Template, {\n      name: \"timeTable\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a, _b) {\n      var formatDate = _a.formatDate,\n          resources = _a.resources,\n          plainResources = _a.plainResources;\n      var finishDeleteAppointment = _b.finishDeleteAppointment,\n          openDeleteConfirmationDialog = _b.openDeleteConfirmationDialog;\n\n      var onDeleteButtonClick = function () {\n        if (openDeleteConfirmationDialog) {\n          openDeleteConfirmationDialog({\n            hideActionName: TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY,\n            appointmentData: appointmentMeta.data\n          });\n        } else {\n          _this.toggleVisibility();\n\n          finishDeleteAppointment(appointmentMeta.data);\n        }\n      };\n\n      return createElement(TemplatePlaceholder, {\n        name: \"tooltip\",\n        params: __assign(__assign({\n          commandButtonComponent: commandButtonComponent,\n          recurringIconComponent: recurringIconComponent,\n          showOpenButton: showOpenButton,\n          showDeleteButton: showDeleteButton,\n          showCloseButton: showCloseButton,\n          headerComponent: headerComponent,\n          contentComponent: contentComponent,\n          appointmentMeta: appointmentMeta,\n          appointmentResources: appointmentMeta ? getAppointmentResources(appointmentMeta.data, resources, plainResources) : [],\n          visible: visible,\n          onHide: _this.toggleVisibility,\n          commandButtonIds: commandButtonIds\n        }, finishDeleteAppointment && {\n          onDeleteButtonClick: onDeleteButtonClick\n        }), {\n          formatDate: formatDate\n        })\n      });\n    })), createElement(Template, {\n      name: \"tooltip\"\n    }, function (params) {\n      return createElement(Layout, __assign({}, params));\n    }), createElement(Template, {\n      name: \"appointment\"\n    }, function (params) {\n      return createElement(TemplatePlaceholder, {\n        params: __assign(__assign({}, params), {\n          onClick: function (_a) {\n            var target = _a.target,\n                data = _a.data;\n            return _this.onAppointmentClick({\n              target: target,\n              data: data\n            });\n          }\n        })\n      });\n    }));\n  };\n\n  AppointmentTooltipBase.defaultProps = {\n    showOpenButton: false,\n    showDeleteButton: false,\n    showCloseButton: false\n  };\n  AppointmentTooltipBase.components = {\n    layoutComponent: 'Layout',\n    headerComponent: 'Header',\n    contentComponent: 'Content',\n    commandButtonComponent: 'CommandButton',\n    recurringIconComponent: 'RecurringIcon'\n  };\n  return AppointmentTooltipBase;\n}(PureComponent); // tslint:disable: max-line-length\n\n/** The AppointmentTooltip plugin allows you to display information about an appointment in a tooltip. */\n\n\nvar AppointmentTooltip = AppointmentTooltipBase;\n\nvar addDoubleClickToCell = function (title, startDate, endDate, groupingInfo, resources, allDay, openFormHandler, addAppointment, params) {\n  var resourceFields = !!groupingInfo ? groupingInfo.reduce(function (acc, currentGroup) {\n    var _a;\n\n    return __assign(__assign({}, acc), (_a = {}, _a[currentGroup.fieldName] = currentGroup.id, _a));\n  }, {}) : {};\n  var validResourceFields = resources ? checkMultipleResourceFields(resourceFields, resources) : resourceFields;\n\n  var newAppointmentData = __assign({\n    title: title,\n    startDate: startDate,\n    endDate: endDate,\n    allDay: allDay\n  }, validResourceFields);\n\n  return createElement(TemplatePlaceholder, {\n    params: __assign(__assign({}, params), {\n      onDoubleClick: function () {\n        openFormHandler(newAppointmentData);\n        callActionIfExists(addAppointment, {\n          appointmentData: newAppointmentData\n        });\n      }\n    })\n  });\n};\n\nvar defaultMessages$1 = {\n  allDayLabel: '하루 종일',\n  titleLabel: '제목',\n  commitCommand: '저장',\n  detailsLabel: '상세페이지',\n  moreInformationLabel: '내용',\n  repeatLabel: '반복',\n  notesLabel: '내용을 입력하세요.',\n  never: '반복없음',\n  daily: '매일',\n  weekly: '매주',\n  monthly: '매월',\n  yearly: '매년',\n  repeatEveryLabel: '항상 반복',\n  // daysLabel: '일',\n  endRepeatLabel: '종료일',\n  onLabel: '시작',\n  afterLabel: '이후',\n  occurrencesLabel: '',\n  weeksOnLabel: '주',\n  monthsLabel: '월',\n  ofEveryMonthLabel: '매달',\n  theLabel: '그',\n  firstLabel: '첫째주',\n  secondLabel: '둘째주',\n  thirdLabel: '셋째주',\n  fourthLabel: '넷째주',\n  lastLabel: '마지막주',\n  yearsLabel: '년',\n  // ofLabel: 'of ',\n  everyLabel: '매번'\n};\n\nvar CommandLayoutPlaceholder = function () {\n  return createElement(TemplatePlaceholder, {\n    name: \"commandLayout\"\n  });\n};\n\nvar BasicLayoutPlaceholder = function () {\n  return createElement(TemplatePlaceholder, {\n    name: \"basicLayout\"\n  });\n};\n\nvar RecurrenceLayoutPlaceholder = function () {\n  return createElement(TemplatePlaceholder, {\n    name: \"recurrenceLayout\"\n  });\n};\n\nvar pluginDependencies$5 = [{\n  name: 'EditingState',\n  optional: true\n}, {\n  name: 'Appointments',\n  optional: true\n}, {\n  name: 'AppointmentTooltip',\n  optional: true\n}, {\n  name: 'EditRecurrenceMenu',\n  optional: true\n}, {\n  name: 'IntegratedEditing',\n  optional: true\n}];\n\nvar prepareChanges = function (appointmentData, editingAppointment, addedAppointment, appointmentChanges, resources, plainResources) {\n  var isNew = !editingAppointment;\n\n  var changedAppointment = __assign(__assign(__assign({}, appointmentData), appointmentChanges), isNew && addedAppointment);\n\n  var appointmentResources = getAppointmentResources(changedAppointment, resources, plainResources);\n  var isFormEdited = isNew || Object.getOwnPropertyNames(appointmentChanges).length !== 0;\n  return {\n    changedAppointment: changedAppointment,\n    appointmentResources: appointmentResources,\n    isNew: isNew,\n    isFormEdited: isFormEdited\n  };\n};\n\nvar isFormFullSize = function (isFormVisible, changedAppointmentRRule, previousAppointmentRRule) {\n  return !!changedAppointmentRRule || !isFormVisible && !!previousAppointmentRRule;\n};\n\nvar AppointmentFormBase = /*#__PURE__*/function (_super) {\n  __extends(AppointmentFormBase, _super);\n\n  function AppointmentFormBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.container = createRef();\n    _this.commitChanges = memoize(function (finishCommitAppointment, commitAddedAppointment, isNew, changedAppointment) {\n      return function () {\n        _this.toggleVisibility();\n\n        if (isNew) {\n          callActionIfExists(commitAddedAppointment, changedAppointment);\n        } else if (finishCommitAppointment) {\n          finishCommitAppointment();\n        }\n\n        _this.setState({\n          previousAppointment: changedAppointment\n        });\n      };\n    });\n    _this.cancelChanges = memoize(function (openCancelConfirmationDialog, isNew, stopEditAppointment, appointmentChanges, changedAppointment, cancelAddedAppointment, cancelChangedAppointment) {\n      return function () {\n        if (openCancelConfirmationDialog && Object.keys(appointmentChanges).length !== 0) {\n          openCancelConfirmationDialog(TOGGLE_APPOINTMENT_FORM_VISIBILITY);\n        } else {\n          if (isNew) {\n            callActionIfExists(cancelAddedAppointment, appointmentChanges);\n          } else {\n            callActionIfExists(stopEditAppointment, appointmentChanges);\n            callActionIfExists(cancelChangedAppointment, appointmentChanges);\n          }\n\n          _this.toggleVisibility();\n        }\n\n        _this.setState({\n          previousAppointment: changedAppointment\n        });\n      };\n    });\n    _this.deleteAppointment = memoize(function (finishDeleteAppointment, appointmentData, openDeleteConfirmationDialog, changedAppointment, cancelAddedAppointment, cancelChangedAppointment, stopEditAppointment, isNew) {\n      return function () {\n        if (openDeleteConfirmationDialog) {\n          openDeleteConfirmationDialog({\n            hideActionName: TOGGLE_APPOINTMENT_FORM_VISIBILITY,\n            appointmentData: changedAppointment\n          });\n        } else {\n          callActionIfExists(finishDeleteAppointment, appointmentData);\n\n          if (isNew) {\n            callActionIfExists(cancelAddedAppointment, appointmentData);\n          } else {\n            callActionIfExists(cancelChangedAppointment, appointmentData);\n            callActionIfExists(stopEditAppointment, appointmentData);\n          }\n\n          _this.toggleVisibility();\n        }\n\n        _this.setState({\n          previousAppointment: changedAppointment\n        });\n      };\n    });\n    _this.changeAppointmentField = memoize(function (isNew, changeAddedAppointment, changeAppointment) {\n      return function (change) {\n        if (change && change.rRule) {\n          _this.setState({\n            previousAppointment: __assign(__assign({}, _this.state.previousAppointment), {\n              rRule: change.rRule\n            })\n          });\n        }\n\n        if (isNew) {\n          callActionIfExists(changeAddedAppointment, {\n            change: change\n          });\n        } else {\n          callActionIfExists(changeAppointment, {\n            change: change\n          });\n        }\n      };\n    });\n    _this.getMessage = memoize(function (menuMessages, messages) {\n      return getMessagesFormatter(__assign(__assign({}, menuMessages), messages));\n    });\n    _this.state = {\n      visible: props.visible,\n      appointmentData: props.appointmentData || {},\n      previousAppointment: props.appointmentData || {}\n    };\n    var stateHelper = createStateHelper(_this, {\n      visible: function () {\n        var onVisibilityChange = _this.props.onVisibilityChange;\n        return onVisibilityChange;\n      },\n      appointmentData: function () {\n        var onAppointmentDataChange = _this.props.onAppointmentDataChange;\n        return onAppointmentDataChange;\n      }\n    });\n\n    var toggleVisibility = function () {\n      var isOpen = _this.state.visible;\n      return !isOpen;\n    };\n\n    _this.toggleVisibility = stateHelper.applyFieldReducer.bind(stateHelper, 'visible', toggleVisibility);\n    _this.setAppointmentData = stateHelper.applyFieldReducer.bind(stateHelper, 'appointmentData', setAppointmentData);\n\n    _this.openFormHandler = function (appointmentData) {\n      _this.setAppointmentData({\n        appointmentData: appointmentData\n      });\n\n      _this.toggleVisibility();\n    };\n\n    return _this;\n  }\n\n  AppointmentFormBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.visible,\n        visible = _a === void 0 ? prevState.visible : _a,\n        _b = nextProps.appointmentData,\n        appointmentData = _b === void 0 ? prevState.appointmentData : _b;\n    return {\n      appointmentData: appointmentData,\n      visible: visible\n    };\n  };\n\n  AppointmentFormBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        Container = _a.containerComponent,\n        Overlay = _a.overlayComponent,\n        Layout = _a.layoutComponent,\n        CommandLayout = _a.commandLayoutComponent,\n        BasicLayout = _a.basicLayoutComponent,\n        RecurrenceLayout = _a.recurrenceLayoutComponent,\n        commandButtonComponent = _a.commandButtonComponent,\n        textEditorComponent = _a.textEditorComponent,\n        labelComponent = _a.labelComponent,\n        dateEditorComponent = _a.dateEditorComponent,\n        booleanEditorComponent = _a.booleanEditorComponent,\n        selectComponent = _a.selectComponent,\n        radioGroupComponent = _a.radioGroupComponent,\n        weeklyRecurrenceSelectorComponent = _a.weeklyRecurrenceSelectorComponent,\n        resourceEditorComponent = _a.resourceEditorComponent,\n        readOnly = _a.readOnly,\n        messages = _a.messages;\n    var _b = this.state,\n        visible = _b.visible,\n        appointmentData = _b.appointmentData,\n        previousAppointment = _b.previousAppointment;\n    var getMessage = this.getMessage(defaultMessages$1, messages);\n    return createElement(Plugin, {\n      name: \"AppointmentForm\",\n      dependencies: pluginDependencies$5\n    }, createElement(Action, {\n      name: TOGGLE_APPOINTMENT_FORM_VISIBILITY,\n      action: this.toggleVisibility\n    }), createElement(Template, {\n      name: \"schedulerRoot\"\n    }, createElement(TemplateConnector, null, function (_a, _b) {\n      var editingAppointment = _a.editingAppointment,\n          addedAppointment = _a.addedAppointment,\n          appointmentChanges = _a.appointmentChanges,\n          resources = _a.resources,\n          plainResources = _a.plainResources;\n      var openCancelConfirmationDialog = _b.openCancelConfirmationDialog,\n          stopEditAppointment = _b.stopEditAppointment,\n          cancelAddedAppointment = _b.cancelAddedAppointment,\n          cancelChangedAppointment = _b.cancelChangedAppointment;\n\n      var _c = prepareChanges(appointmentData, editingAppointment, addedAppointment, appointmentChanges, resources, plainResources),\n          changedAppointment = _c.changedAppointment,\n          isNew = _c.isNew;\n\n      var fullSize = isFormFullSize(visible, changedAppointment.rRule, previousAppointment.rRule);\n\n      var onHideAction = function () {\n        return visible && _this.cancelChanges(openCancelConfirmationDialog, isNew, stopEditAppointment, __assign(__assign({}, appointmentChanges), addedAppointment), changedAppointment, cancelAddedAppointment, cancelChangedAppointment)();\n      };\n\n      return createElement(Fragment, null, createElement(Container, {\n        ref: _this.container\n      }), createElement(Overlay, {\n        visible: visible,\n        onHide: onHideAction,\n        fullSize: fullSize,\n        target: _this.container\n      }, createElement(Layout, {\n        basicLayoutComponent: BasicLayoutPlaceholder,\n        commandLayoutComponent: CommandLayoutPlaceholder,\n        recurrenceLayoutComponent: RecurrenceLayoutPlaceholder,\n        isRecurrence: fullSize\n      })), createElement(TemplatePlaceholder, null));\n    })), createElement(Template, {\n      name: \"commandLayout\"\n    }, createElement(TemplateConnector, null, function (_a, _b) {\n      var editingAppointment = _a.editingAppointment,\n          addedAppointment = _a.addedAppointment,\n          appointmentChanges = _a.appointmentChanges,\n          resources = _a.resources,\n          plainResources = _a.plainResources;\n      var commitAddedAppointment = _b.commitAddedAppointment,\n          finishCommitAppointment = _b.finishCommitAppointment,\n          finishDeleteAppointment = _b.finishDeleteAppointment,\n          stopEditAppointment = _b.stopEditAppointment,\n          cancelAddedAppointment = _b.cancelAddedAppointment,\n          cancelChangedAppointment = _b.cancelChangedAppointment,\n          openCancelConfirmationDialog = _b.openCancelConfirmationDialog,\n          openDeleteConfirmationDialog = _b.openDeleteConfirmationDialog;\n\n      var _c = prepareChanges(appointmentData, editingAppointment, addedAppointment, appointmentChanges, resources, plainResources),\n          isNew = _c.isNew,\n          changedAppointment = _c.changedAppointment,\n          isFormEdited = _c.isFormEdited;\n\n      var isRecurrence = isFormFullSize(visible, changedAppointment.rRule, previousAppointment.rRule);\n      return createElement(CommandLayout, {\n        commandButtonComponent: commandButtonComponent,\n        onCommitButtonClick: _this.commitChanges(finishCommitAppointment, commitAddedAppointment, isNew, changedAppointment),\n        onCancelButtonClick: _this.cancelChanges(openCancelConfirmationDialog, isNew, stopEditAppointment, __assign(__assign({}, appointmentChanges), addedAppointment), changedAppointment, cancelAddedAppointment, cancelChangedAppointment),\n        onDeleteButtonClick: _this.deleteAppointment(finishDeleteAppointment, appointmentData, openDeleteConfirmationDialog, changedAppointment, cancelAddedAppointment, cancelChangedAppointment, stopEditAppointment, isNew),\n        getMessage: getMessage,\n        readOnly: readOnly,\n        fullSize: isRecurrence,\n        disableSaveButton: !isFormEdited,\n        hideDeleteButton: isNew\n      });\n    })), createElement(Template, {\n      name: \"basicLayout\"\n    }, createElement(TemplateConnector, null, function (_a, _b) {\n      var editingAppointment = _a.editingAppointment,\n          addedAppointment = _a.addedAppointment,\n          appointmentChanges = _a.appointmentChanges,\n          locale = _a.locale,\n          resources = _a.resources,\n          plainResources = _a.plainResources;\n      var changeAppointment = _b.changeAppointment,\n          changeAddedAppointment = _b.changeAddedAppointment;\n\n      var _c = prepareChanges(appointmentData, editingAppointment, addedAppointment, appointmentChanges, resources, plainResources),\n          isNew = _c.isNew,\n          changedAppointment = _c.changedAppointment,\n          appointmentResources = _c.appointmentResources;\n\n      return createElement(BasicLayout, {\n        locale: locale,\n        appointmentData: visible ? changedAppointment : previousAppointment,\n        onFieldChange: _this.changeAppointmentField(isNew, changeAddedAppointment, changeAppointment),\n        getMessage: getMessage,\n        readOnly: readOnly,\n        textEditorComponent: textEditorComponent,\n        dateEditorComponent: dateEditorComponent,\n        booleanEditorComponent: booleanEditorComponent,\n        selectComponent: selectComponent,\n        labelComponent: labelComponent,\n        resourceEditorComponent: resourceEditorComponent,\n        fullSize: !changedAppointment.rRule,\n        resources: resources,\n        appointmentResources: appointmentResources\n      });\n    })), createElement(Template, {\n      name: \"recurrenceLayout\"\n    }, createElement(TemplateConnector, null, function (_a, _b) {\n      var editingAppointment = _a.editingAppointment,\n          addedAppointment = _a.addedAppointment,\n          appointmentChanges = _a.appointmentChanges,\n          formatDate = _a.formatDate,\n          locale = _a.locale,\n          firstDayOfWeek = _a.firstDayOfWeek;\n      var changeAddedAppointment = _b.changeAddedAppointment,\n          changeAppointment = _b.changeAppointment;\n\n      var _c = prepareChanges(appointmentData, editingAppointment, addedAppointment, appointmentChanges, undefined, undefined),\n          isNew = _c.isNew,\n          changedAppointment = _c.changedAppointment;\n\n      var isRecurrenceLayoutVisible = isFormFullSize(visible, changedAppointment.rRule, previousAppointment.rRule);\n      var correctedAppointment = !changedAppointment.rRule ? __assign(__assign({}, changedAppointment), {\n        rRule: previousAppointment.rRule\n      }) : changedAppointment;\n      return createElement(RecurrenceLayout, {\n        locale: locale,\n        appointmentData: visible ? correctedAppointment : previousAppointment,\n        onFieldChange: _this.changeAppointmentField(isNew, changeAddedAppointment, changeAppointment),\n        getMessage: getMessage,\n        readOnly: readOnly,\n        formatDate: formatDate,\n        textEditorComponent: textEditorComponent,\n        dateEditorComponent: dateEditorComponent,\n        radioGroupComponent: radioGroupComponent,\n        weeklyRecurrenceSelectorComponent: weeklyRecurrenceSelectorComponent,\n        labelComponent: labelComponent,\n        selectComponent: selectComponent,\n        visible: isRecurrenceLayoutVisible,\n        firstDayOfWeek: firstDayOfWeek\n      });\n    })), createElement(Template, {\n      name: \"tooltip\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (getters, _a) {\n        var startEditAppointment = _a.startEditAppointment;\n        return createElement(TemplatePlaceholder, {\n          params: __assign(__assign({}, params), {\n            onOpenButtonClick: function () {\n              _this.openFormHandler(params.appointmentMeta.data);\n\n              callActionIfExists(startEditAppointment, params.appointmentMeta.data);\n            }\n          })\n        });\n      });\n    }), createElement(Template, {\n      name: \"appointment\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (getters, _a) {\n        var startEditAppointment = _a.startEditAppointment;\n        return createElement(TemplatePlaceholder, {\n          params: __assign(__assign({}, params), {\n            onDoubleClick: function () {\n              _this.openFormHandler(params.data);\n\n              callActionIfExists(startEditAppointment, params.data);\n            }\n          })\n        });\n      });\n    }), createElement(Template, {\n      name: \"cell\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var resources = _a.resources;\n        var addAppointment = _b.addAppointment;\n        return addDoubleClickToCell(undefined, params.startDate, params.endDate, params.groupingInfo, resources, isAllDayCell(params.startDate, params.endDate), _this.openFormHandler, addAppointment, params);\n      });\n    }), createElement(Template, {\n      name: \"allDayPanelCell\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var resources = _a.resources;\n        var addAppointment = _b.addAppointment;\n        return addDoubleClickToCell(undefined, params.startDate, params.endDate, params.groupingInfo, resources, true, _this.openFormHandler, addAppointment, params);\n      });\n    }));\n  };\n\n  AppointmentFormBase.defaultProps = {\n    messages: {},\n    readOnly: false,\n    onVisibilityChange: function () {\n      return undefined;\n    },\n    onAppointmentDataChange: function () {\n      return undefined;\n    }\n  };\n  AppointmentFormBase.components = {\n    overlayComponent: 'Overlay',\n    layoutComponent: 'Layout',\n    commandLayoutComponent: 'CommandLayout',\n    commandButtonComponent: 'CommandButton',\n    basicLayoutComponent: 'BasicLayout',\n    textEditorComponent: 'TextEditor',\n    labelComponent: 'Label',\n    dateEditorComponent: 'DateEditor',\n    booleanEditorComponent: 'BooleanEditor',\n    selectComponent: 'Select',\n    recurrenceLayoutComponent: 'RecurrenceLayout',\n    radioGroupComponent: 'RadioGroup',\n    weeklyRecurrenceSelectorComponent: 'WeeklyRecurrenceSelector',\n    resourceEditorComponent: 'ResourceEditor',\n    containerComponent: 'Container'\n  };\n  return AppointmentFormBase;\n}(PureComponent); // tslint:disable-next-line: max-line-length\n\n/** The AppointmentForm plugin renders a form that visualizes appointment’s data and allows a user to modify this data. */\n\n\nvar AppointmentForm = AppointmentFormBase;\n\nvar renderAppointmentItems = function (items, Wrapper, draftData) {\n  return items.length > 0 ? createElement(Wrapper, null, items.map(function (draftAppointment, index) {\n    return createElement(TemplatePlaceholder, {\n      name: \"draftAppointment\",\n      key: index.toString(),\n      params: {\n        data: draftData,\n        draftAppointment: draftAppointment\n      }\n    });\n  })) : null;\n};\n\nvar pluginDependencies$6 = [{\n  name: 'EditingState'\n}, {\n  name: 'Appointments'\n}, {\n  name: 'EditRecurrenceMenu',\n  optional: true\n}, {\n  name: 'IntegratedEditing',\n  optional: true\n}, {\n  name: 'DayView',\n  optional: true\n}, {\n  name: 'WeekView',\n  optional: true\n}, {\n  name: 'MonthView',\n  optional: true\n}, {\n  name: 'AllDayPanel',\n  optional: true\n}];\n\nvar DragDropProviderBase = /*#__PURE__*/function (_super) {\n  __extends(DragDropProviderBase, _super);\n\n  function DragDropProviderBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.timeTableDraftAppointments = [];\n    _this.allDayDraftAppointments = [];\n    _this.offsetTimeTop = null;\n    _this.appointmentStartTime = null;\n    _this.appointmentEndTime = null;\n    _this.appointmentGroupingInfo = {};\n    _this.state = {\n      startTime: null,\n      endTime: null,\n      appointmentGroupingInfo: null,\n      payload: null,\n      isOutside: false,\n      allowDrag: function () {\n        return true;\n      },\n      allowResize: function () {\n        return true;\n      },\n      appointmentContentTemplateKey: 0,\n      appointmentTopTemplateKey: 0,\n      appointmentBottomTemplateKey: 0\n    };\n\n    _this.handleDrop = function (_a) {\n      var finishCommitAppointment = _a.finishCommitAppointment;\n      return function () {\n        finishCommitAppointment();\n\n        _this.resetCache();\n      };\n    };\n\n    _this.handleLeave = function () {\n      _this.setState({\n        isOutside: true\n      });\n    };\n\n    return _this;\n  }\n\n  DragDropProviderBase.getDerivedStateFromProps = function (props, state) {\n    var isAllowDragSame = props.allowDrag === state.allowDrag;\n    var isAllowResizeSame = props.allowResize === state.allowResize;\n\n    if (isAllowDragSame && isAllowResizeSame) {\n      return null;\n    }\n\n    return __assign(__assign({}, state), {\n      appointmentContentTemplateKey: isAllowDragSame ? state.appointmentContentTemplateKey : Math.random(),\n      appointmentTopTemplateKey: isAllowResizeSame ? state.appointmentTopTemplateKey : Math.random(),\n      appointmentBottomTemplateKey: isAllowResizeSame ? state.appointmentBottomTemplateKey : Math.random(),\n      allowDrag: props.allowDrag,\n      allowResize: props.allowResize\n    });\n  };\n\n  DragDropProviderBase.prototype.onPayloadChange = function (actions) {\n    var _this = this;\n\n    return function (args) {\n      return _this.handlePayloadChange(args, actions);\n    };\n  };\n\n  DragDropProviderBase.prototype.calculateNextBoundaries = function (getters, actions, scrollSpeed) {\n    var _this = this;\n\n    return function (args) {\n      return _this.calculateBoundaries(args, getters, actions, scrollSpeed);\n    };\n  };\n\n  DragDropProviderBase.prototype.resetCache = function () {\n    this.timeTableDraftAppointments = [];\n    this.allDayDraftAppointments = [];\n    this.offsetTimeTop = null;\n    this.appointmentStartTime = null;\n    this.appointmentEndTime = null;\n    this.appointmentGroupingInfo = {};\n    this.setState({\n      payload: null,\n      startTime: null,\n      endTime: null,\n      isOutside: false\n    });\n  };\n\n  DragDropProviderBase.prototype.applyChanges = function (startTime, endTime, payload, startEditAppointment, changeAppointment, appointmentGroupingInfo) {\n    startEditAppointment(payload);\n    changeAppointment({\n      change: __assign(__assign({\n        startDate: startTime,\n        endDate: endTime\n      }, payload.allDay && {\n        allDay: undefined\n      }), this.appointmentGroupingInfo)\n    });\n    this.setState({\n      startTime: startTime,\n      endTime: endTime,\n      payload: payload,\n      isOutside: false,\n      appointmentGroupingInfo: appointmentGroupingInfo\n    });\n  };\n\n  DragDropProviderBase.prototype.handlePayloadChange = function (_a, _b) {\n    var payload = _a.payload;\n    var finishCommitAppointment = _b.finishCommitAppointment;\n    var isOutside = this.state.isOutside;\n    if (payload || !isOutside) return;\n    finishCommitAppointment();\n    this.resetCache();\n  };\n\n  DragDropProviderBase.prototype.calculateBoundaries = function (_a, _b, _c, scrollSpeed) {\n    var payload = _a.payload,\n        clientOffset = _a.clientOffset;\n    var viewCellsData = _b.viewCellsData,\n        allDayCellsData = _b.allDayCellsData,\n        startViewDate = _b.startViewDate,\n        endViewDate = _b.endViewDate,\n        excludedDays = _b.excludedDays,\n        currentView = _b.currentView,\n        timeTableElementsMeta = _b.timeTableElementsMeta,\n        allDayElementsMeta = _b.allDayElementsMeta,\n        scrollingStrategy = _b.scrollingStrategy,\n        grouping = _b.grouping,\n        resources = _b.resources,\n        groups = _b.groups,\n        getGroupOrientation = _b.groupOrientation,\n        groupByDate = _b.groupByDate;\n    var changeAppointment = _c.changeAppointment,\n        startEditAppointment = _c.startEditAppointment;\n\n    if (clientOffset) {\n      autoScroll(clientOffset, scrollingStrategy, scrollSpeed);\n    }\n\n    var tableCellElementsMeta = timeTableElementsMeta;\n    var groupOrientation = getGroupOrientation ? getGroupOrientation(currentView === null || currentView === void 0 ? void 0 : currentView.name) : HORIZONTAL_GROUP_ORIENTATION; // AllDayPanel doesn't always exist\n\n    var allDayCellsElementsMeta = allDayElementsMeta && allDayElementsMeta.getCellRects ? allDayElementsMeta : {\n      getCellRects: []\n    };\n    var timeTableIndex = cellIndex(tableCellElementsMeta.getCellRects, clientOffset);\n    var allDayIndex = cellIndex(allDayCellsElementsMeta.getCellRects, clientOffset);\n    if (allDayIndex === -1 && timeTableIndex === -1) return;\n    var targetData = cellData(timeTableIndex, allDayIndex, viewCellsData, allDayCellsData);\n    var targetType = cellType(targetData);\n    var insidePart = calculateInsidePart(clientOffset.y, tableCellElementsMeta.getCellRects, timeTableIndex);\n    var cellDurationMinutes = intervalDuration(targetData, 'minutes');\n\n    var _d = calculateAppointmentTimeBoundaries(payload, targetData, targetType, cellDurationMinutes, insidePart, this.offsetTimeTop),\n        appointmentStartTime = _d.appointmentStartTime,\n        appointmentEndTime = _d.appointmentEndTime,\n        offsetTimeTop = _d.offsetTimeTop;\n\n    var appointmentGroups = calculateAppointmentGroups(targetData.groupingInfo, resources, payload);\n    this.appointmentStartTime = appointmentStartTime || this.appointmentStartTime;\n    this.appointmentEndTime = appointmentEndTime || this.appointmentEndTime;\n    this.appointmentGroupingInfo = appointmentGroups || this.appointmentGroupingInfo;\n    this.offsetTimeTop = offsetTimeTop;\n    var _e = this.state,\n        startTime = _e.startTime,\n        endTime = _e.endTime,\n        appointmentGroupingInfo = _e.appointmentGroupingInfo;\n\n    if (!appointmentDragged(this.appointmentStartTime, startTime, this.appointmentEndTime, endTime, this.appointmentGroupingInfo, appointmentGroupingInfo)) {\n      return;\n    }\n\n    var draftAppointments = [{\n      dataItem: __assign(__assign(__assign({}, payload), {\n        startDate: this.appointmentStartTime,\n        endDate: this.appointmentEndTime\n      }), this.appointmentGroupingInfo),\n      start: this.appointmentStartTime,\n      end: this.appointmentEndTime\n    }];\n\n    var _f = calculateDraftAppointments(allDayIndex, draftAppointments, startViewDate, endViewDate, excludedDays, viewCellsData, allDayCellsElementsMeta, targetType, cellDurationMinutes, tableCellElementsMeta, grouping, resources, groups, groupOrientation, groupByDate === null || groupByDate === void 0 ? void 0 : groupByDate(currentView === null || currentView === void 0 ? void 0 : currentView.name)),\n        allDayDraftAppointments = _f.allDayDraftAppointments,\n        timeTableDraftAppointments = _f.timeTableDraftAppointments;\n\n    this.allDayDraftAppointments = allDayDraftAppointments;\n    this.timeTableDraftAppointments = timeTableDraftAppointments;\n    this.applyChanges(this.appointmentStartTime, this.appointmentEndTime, payload, startEditAppointment, changeAppointment, this.appointmentGroupingInfo);\n  };\n\n  DragDropProviderBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.state,\n        payload = _a.payload,\n        appointmentContentTemplateKey = _a.appointmentContentTemplateKey,\n        appointmentBottomTemplateKey = _a.appointmentBottomTemplateKey,\n        appointmentTopTemplateKey = _a.appointmentTopTemplateKey;\n    var _b = this.props,\n        Container = _b.containerComponent,\n        DraftAppointment = _b.draftAppointmentComponent,\n        SourceAppointment = _b.sourceAppointmentComponent,\n        Resize = _b.resizeComponent,\n        allowDrag = _b.allowDrag,\n        allowResize = _b.allowResize,\n        scrollSpeed = _b.scrollSpeed;\n\n    var draftData = __assign(__assign({}, payload), {\n      startDate: this.appointmentStartTime,\n      endDate: this.appointmentEndTime\n    });\n\n    return createElement(Plugin, {\n      name: \"DragDropProvider\",\n      dependencies: pluginDependencies$6\n    }, createElement(Template, {\n      name: \"body\"\n    }, createElement(TemplateConnector, null, function (_a, _b) {\n      var viewCellsData = _a.viewCellsData,\n          allDayCellsData = _a.allDayCellsData,\n          startViewDate = _a.startViewDate,\n          endViewDate = _a.endViewDate,\n          excludedDays = _a.excludedDays,\n          timeTableElementsMeta = _a.timeTableElementsMeta,\n          allDayElementsMeta = _a.allDayElementsMeta,\n          scrollingStrategy = _a.scrollingStrategy,\n          grouping = _a.grouping,\n          resources = _a.resources,\n          groups = _a.groups,\n          currentView = _a.currentView,\n          groupByDate = _a.groupByDate,\n          groupOrientation = _a.groupOrientation;\n      var changeAppointment = _b.changeAppointment,\n          startEditAppointment = _b.startEditAppointment,\n          finishCommitAppointment = _b.finishCommitAppointment;\n\n      var calculateBoundariesByMove = _this.calculateNextBoundaries({\n        viewCellsData: viewCellsData,\n        allDayCellsData: allDayCellsData,\n        currentView: currentView,\n        startViewDate: startViewDate,\n        endViewDate: endViewDate,\n        excludedDays: excludedDays,\n        timeTableElementsMeta: timeTableElementsMeta,\n        allDayElementsMeta: allDayElementsMeta,\n        scrollingStrategy: scrollingStrategy,\n        resources: resources,\n        grouping: grouping,\n        groups: groups,\n        groupByDate: groupByDate,\n        groupOrientation: groupOrientation\n      }, {\n        changeAppointment: changeAppointment,\n        startEditAppointment: startEditAppointment\n      }, scrollSpeed);\n\n      return createElement(DragDropProvider$1, {\n        onChange: _this.onPayloadChange({\n          finishCommitAppointment: finishCommitAppointment\n        })\n      }, createElement(DropTarget, {\n        onOver: calculateBoundariesByMove,\n        onEnter: calculateBoundariesByMove,\n        onDrop: _this.handleDrop({\n          finishCommitAppointment: finishCommitAppointment\n        }),\n        onLeave: _this.handleLeave\n      }, createElement(TemplatePlaceholder, null)));\n    })), createElement(Template, {\n      name: \"appointmentContent\",\n      predicate: function (_a) {\n        var data = _a.data;\n        return allowDrag(data);\n      },\n      key: appointmentContentTemplateKey\n    }, function (_a) {\n      var styles = _a.styles,\n          params = __rest(_a, [\"styles\"]);\n\n      return createElement(DragSource, {\n        payload: __assign(__assign({}, params.data), {\n          type: params.type\n        })\n      }, payload && params.data.id === payload.id ? createElement(SourceAppointment, __assign({}, params)) : createElement(TemplatePlaceholder, {\n        params: __assign(__assign({}, params), {\n          draggable: true\n        })\n      }));\n    }), createElement(Template, {\n      name: \"appointmentTop\",\n      predicate: function (params) {\n        return !params.slice && allowResize(params.data);\n      },\n      key: appointmentTopTemplateKey\n    }, function (_a) {\n      var data = _a.data,\n          type = _a.type;\n      return createElement(DragSource, {\n        payload: __assign(__assign({}, data), {\n          type: RESIZE_TOP,\n          appointmentType: type\n        })\n      }, createElement(Resize, {\n        position: POSITION_START,\n        appointmentType: type\n      }));\n    }), createElement(Template, {\n      name: \"appointmentBottom\",\n      predicate: function (params) {\n        return !params.slice && allowResize(params.data);\n      },\n      key: appointmentBottomTemplateKey\n    }, function (_a) {\n      var data = _a.data,\n          type = _a.type;\n      return createElement(DragSource, {\n        payload: __assign(__assign({}, data), {\n          type: RESIZE_BOTTOM,\n          appointmentType: type\n        })\n      }, createElement(Resize, {\n        position: POSITION_END,\n        appointmentType: type\n      }));\n    }), createElement(Template, {\n      name: \"allDayPanel\"\n    }, createElement(TemplateConnector, null, function (_a) {\n      var currentView = _a.currentView,\n          groupOrientation = _a.groupOrientation;\n      return createElement(Fragment, null, createElement(TemplatePlaceholder, null), (groupOrientation === null || groupOrientation === void 0 ? void 0 : groupOrientation(currentView.name)) !== VERTICAL_GROUP_ORIENTATION ? renderAppointmentItems(_this.allDayDraftAppointments, Container, draftData) : null);\n    })), createElement(Template, {\n      name: \"timeTable\"\n    }, createElement(TemplateConnector, null, function (_a) {\n      var currentView = _a.currentView,\n          groupOrientation = _a.groupOrientation;\n      return createElement(Fragment, null, createElement(TemplatePlaceholder, null), renderAppointmentItems(_this.timeTableDraftAppointments, Container, draftData), (groupOrientation === null || groupOrientation === void 0 ? void 0 : groupOrientation(currentView.name)) === VERTICAL_GROUP_ORIENTATION ? renderAppointmentItems(_this.allDayDraftAppointments, Container, draftData) : null);\n    })), createElement(Template, {\n      name: \"draftAppointment\"\n    }, function (_a) {\n      var data = _a.data,\n          draftAppointment = _a.draftAppointment,\n          restParams = __rest(_a, [\"data\", \"draftAppointment\"]);\n\n      return createElement(TemplateConnector, null, function (_a) {\n        var formatDate = _a.formatDate,\n            resources = _a.resources,\n            plainResources = _a.plainResources;\n\n        var dataItem = draftAppointment.dataItem,\n            type = draftAppointment.type,\n            fromPrev = draftAppointment.fromPrev,\n            toNext = draftAppointment.toNext,\n            durationType = draftAppointment.durationType,\n            geometry = __rest(draftAppointment, [\"dataItem\", \"type\", \"fromPrev\", \"toNext\", \"durationType\"]);\n\n        return createElement(DraftAppointment, __assign({\n          data: data,\n          resources: getAppointmentResources(dataItem, resources, plainResources),\n          durationType: durationType,\n          style: getAppointmentStyle(geometry),\n          type: type,\n          fromPrev: fromPrev,\n          toNext: toNext,\n          formatDate: formatDate\n        }, restParams));\n      });\n    }));\n  };\n\n  DragDropProviderBase.components = {\n    containerComponent: 'Container',\n    draftAppointmentComponent: 'DraftAppointment',\n    sourceAppointmentComponent: 'SourceAppointment',\n    resizeComponent: 'Resize'\n  };\n  DragDropProviderBase.defaultProps = {\n    allowDrag: function () {\n      return true;\n    },\n    allowResize: function () {\n      return true;\n    },\n    scrollSpeed: SCROLL_SPEED_PX\n  };\n  return DragDropProviderBase;\n}(PureComponent);\n/** A plugin that enables users to edit appointments via drag-and-drop. */\n\n\nvar DragDropProvider = DragDropProviderBase;\nvar pluginDependencies$7 = [{\n  name: 'Toolbar'\n}, {\n  name: 'ViewState'\n}];\nvar defaultMessages$2 = {\n  today: 'Today'\n};\n\nvar TodayButtonBase = /*#__PURE__*/function (_super) {\n  __extends(TodayButtonBase, _super);\n\n  function TodayButtonBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TodayButtonBase.prototype.render = function () {\n    var _a = this.props,\n        Button = _a.buttonComponent,\n        messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$2), messages));\n    return createElement(Plugin, {\n      name: \"TodayButton\",\n      dependencies: pluginDependencies$7\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplateConnector, null, function (getters, _a) {\n      var changeCurrentDate = _a.changeCurrentDate;\n\n      var setCurrentDate = function (nextDate) {\n        return changeCurrentDate({\n          nextDate: nextDate\n        });\n      };\n\n      return createElement(Button, {\n        getMessage: getMessage,\n        setCurrentDate: setCurrentDate\n      });\n    }), createElement(TemplatePlaceholder, null)));\n  };\n\n  TodayButtonBase.components = {\n    buttonComponent: 'Button'\n  };\n  return TodayButtonBase;\n}(PureComponent);\n/** A plugin that renders the Scheduler's button which sets the current date to today's date. */\n\n\nvar TodayButton = TodayButtonBase;\n\nvar _a;\n\nvar pluginDependencies$8 = [{\n  name: 'EditingState'\n}];\nvar defaultAvailableOperations = [{\n  value: RECURRENCE_EDIT_SCOPE.CURRENT\n}, {\n  value: RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING\n}, {\n  value: RECURRENCE_EDIT_SCOPE.ALL\n}];\nvar defaultMessages$3 = (_a = {}, _a[RECURRENCE_EDIT_SCOPE.CURRENT] = 'This appointment', _a[RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING] = 'This and following appointments', _a[RECURRENCE_EDIT_SCOPE.ALL] = 'All appointments', _a.menuEditingTitle = 'Edit recurring appointment', _a.menuDeletingTitle = 'Delete recurring appointment', _a.cancelButton = 'Cancel', _a.commitButton = 'OK', _a);\n\nvar EditRecurrenceMenuBase = /*#__PURE__*/function (_super) {\n  __extends(EditRecurrenceMenuBase, _super);\n\n  function EditRecurrenceMenuBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.modalContainer = createRef();\n    _this.state = {\n      isOpen: false,\n      deletedAppointmentData: null\n    };\n\n    _this.finishCommitAppointment = function (payload, _a, _b) {\n      var editingAppointment = _a.editingAppointment;\n      var commitChangedAppointment = _b.commitChangedAppointment;\n\n      if (editingAppointment && !editingAppointment.rRule) {\n        commitChangedAppointment();\n      } else {\n        _this.setState({\n          isOpen: true,\n          deletedAppointmentData: null\n        });\n      }\n    };\n\n    _this.finishDeleteAppointment = function (payload, getters, _a) {\n      var commitDeletedAppointment = _a.commitDeletedAppointment;\n\n      if (payload && !payload.rRule) {\n        commitDeletedAppointment({\n          deletedAppointmentData: payload\n        });\n      } else {\n        _this.setState({\n          isOpen: true,\n          deletedAppointmentData: payload\n        });\n      }\n    };\n\n    _this.commit = memoize(function (editAction, deleteAction, payload) {\n      return function (type) {\n        if (payload) {\n          deleteAction({\n            deletedAppointmentData: payload,\n            type: type\n          });\n        } else {\n          editAction(type);\n        }\n\n        _this.closeMenu();\n      };\n    });\n\n    _this.closeMenu = function () {\n      _this.setState({\n        isOpen: false,\n        deletedAppointmentData: null\n      });\n    };\n\n    _this.cancelEditing = memoize(function (cancelAction, stopEditAction) {\n      return function () {\n        stopEditAction();\n        cancelAction();\n\n        _this.closeMenu();\n      };\n    });\n    _this.availableOperations = memoize(function (getMessage, menuAvailableOperations) {\n      return menuAvailableOperations.map(function (_a) {\n        var value = _a.value;\n        return {\n          value: value,\n          title: getMessage([value])\n        };\n      });\n    });\n    _this.getMessage = memoize(function (messages, menuMessages) {\n      return getMessagesFormatter(__assign(__assign({}, menuMessages), messages));\n    });\n    return _this;\n  }\n\n  EditRecurrenceMenuBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.state,\n        isOpen = _a.isOpen,\n        deletedAppointmentData = _a.deletedAppointmentData;\n    var _b = this.props,\n        Layout = _b.layoutComponent,\n        Overlay = _b.overlayComponent,\n        Container = _b.containerComponent,\n        buttonComponent = _b.buttonComponent,\n        messages = _b.messages;\n    var getMessage = this.getMessage(messages, defaultMessages$3);\n    var availableOperations = this.availableOperations(getMessage, defaultAvailableOperations);\n    return createElement(Plugin, {\n      name: \"EditRecurrenceMenu\",\n      dependencies: pluginDependencies$8\n    }, createElement(Action, {\n      name: \"finishCommitAppointment\",\n      action: this.finishCommitAppointment\n    }), createElement(Action, {\n      name: \"finishDeleteAppointment\",\n      action: this.finishDeleteAppointment\n    }), createElement(Template, {\n      name: \"schedulerRoot\"\n    }, createElement(TemplatePlaceholder, null), createElement(Container, {\n      ref: this.modalContainer\n    }), createElement(TemplatePlaceholder, {\n      name: \"overlay\"\n    })), createElement(Template, {\n      name: \"overlay\"\n    }, createElement(TemplateConnector, null, function (getters, _a) {\n      var commitChangedAppointment = _a.commitChangedAppointment,\n          commitDeletedAppointment = _a.commitDeletedAppointment,\n          cancelChangedAppointment = _a.cancelChangedAppointment,\n          stopEditAppointment = _a.stopEditAppointment;\n\n      var commit = _this.commit(commitChangedAppointment, commitDeletedAppointment, deletedAppointmentData);\n\n      var cancelEditing = _this.cancelEditing(cancelChangedAppointment, stopEditAppointment);\n\n      return createElement(Overlay, {\n        target: _this.modalContainer,\n        visible: isOpen,\n        onHide: _this.closeMenu\n      }, createElement(Layout, {\n        isDeleting: !!deletedAppointmentData,\n        buttonComponent: buttonComponent,\n        handleClose: cancelEditing,\n        commit: commit,\n        availableOperations: availableOperations,\n        getMessage: getMessage\n      }));\n    })));\n  };\n\n  EditRecurrenceMenuBase.components = {\n    layoutComponent: 'Layout',\n    overlayComponent: 'Overlay',\n    buttonComponent: 'Button',\n    containerComponent: 'Container'\n  };\n  return EditRecurrenceMenuBase;\n}(PureComponent);\n/**\r\n * A plugin that renders the Scheduler's edit menu.\r\n * Should not be used with the `IntegratedEditing` plugin.\r\n */\n\n\nvar EditRecurrenceMenu = EditRecurrenceMenuBase;\nvar pluginDependencies$9 = [{\n  name: 'EditingState'\n}];\n\nvar IntegratedEditingBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedEditingBase, _super);\n\n  function IntegratedEditingBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.finishCommitAppointment = function (payload, getters, _a) {\n      var commitChangedAppointment = _a.commitChangedAppointment;\n      commitChangedAppointment();\n    };\n\n    _this.finishDeleteAppointment = function (payload, getters, _a) {\n      var commitDeletedAppointment = _a.commitDeletedAppointment;\n      commitDeletedAppointment({\n        deletedAppointmentData: payload\n      });\n    };\n\n    return _this;\n  }\n\n  IntegratedEditingBase.prototype.render = function () {\n    return createElement(Plugin, {\n      name: \"IntegratedEditing\",\n      dependencies: pluginDependencies$9\n    }, createElement(Action, {\n      name: \"finishCommitAppointment\",\n      action: this.finishCommitAppointment\n    }), createElement(Action, {\n      name: \"finishDeleteAppointment\",\n      action: this.finishDeleteAppointment\n    }));\n  };\n\n  IntegratedEditingBase.defaultProps = {\n    totalCount: 0\n  };\n  return IntegratedEditingBase;\n}(PureComponent);\n/** A plugin that allows implementing a editing calculation logic. */\n\n\nvar IntegratedEditing = IntegratedEditingBase;\nvar pluginDependencies$a = [{\n  name: 'Appointments'\n}];\n\nvar addResourcesToTimeTableAppointments = function (_a) {\n  var timeTableAppointments = _a.timeTableAppointments,\n      resources = _a.resources,\n      plainResources = _a.plainResources;\n  return timeTableAppointments && addResourcesToAppointments(timeTableAppointments[0], resources, plainResources);\n};\n\nvar addResourcesToAllDayAppointments = function (_a) {\n  var allDayAppointments = _a.allDayAppointments,\n      resources = _a.resources,\n      plainResources = _a.plainResources;\n  return allDayAppointments && addResourcesToAppointments(allDayAppointments[0], resources, plainResources);\n};\n\nvar ResourcesBase = memo(function (_a) {\n  var data = _a.data,\n      mainResourceName = _a.mainResourceName,\n      palette = _a.palette;\n\n  var convertResources = function (_a) {\n    var resources = _a.resources;\n    return convertResourcesToPlain(resources);\n  };\n\n  return createElement(Plugin, {\n    name: \"Resources\",\n    dependencies: pluginDependencies$a\n  }, createElement(Getter, {\n    name: \"resources\",\n    value: validateResources(data, mainResourceName, palette)\n  }), createElement(Getter, {\n    name: \"plainResources\",\n    computed: convertResources\n  }), createElement(Getter, {\n    name: \"timeTableAppointments\",\n    computed: addResourcesToTimeTableAppointments\n  }), createElement(Getter, {\n    name: \"allDayAppointments\",\n    computed: addResourcesToAllDayAppointments\n  }));\n});\n/** A plugin that manages schedule's resources. */\n\nvar Resources = ResourcesBase;\nvar defaultMessages$4 = {\n  discardButton: 'Discard',\n  deleteButton: 'Delete',\n  cancelButton: 'Cancel',\n  confirmDeleteMessage: 'Are you sure you want to delete this appointment?',\n  confirmCancelMessage: 'Discard unsaved changes?'\n};\nvar pluginDependencies$b = [{\n  name: 'EditingState'\n}, {\n  name: 'EditRecurrenceMenu',\n  optional: true\n}, {\n  name: 'IntegratedEditing',\n  optional: true\n}];\nvar ACTION_TYPES = {\n  CANCEL: 'cancel',\n  DELETE: 'delete'\n};\n\nvar ConfirmationDialogBase = function (_a) {\n  var messages = _a.messages,\n      Overlay = _a.overlayComponent,\n      Layout = _a.layoutComponent,\n      Container = _a.containerComponent,\n      buttonComponent = _a.buttonComponent,\n      ignoreDelete = _a.ignoreDelete,\n      ignoreCancel = _a.ignoreCancel;\n  var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$4), messages));\n  var modalContainer = useRef();\n\n  var _b = __read(useState(false), 2),\n      visible = _b[0],\n      setVisible = _b[1];\n\n  var _c = __read(useState(''), 2),\n      actionType = _c[0],\n      setActionType = _c[1];\n\n  var _d = __read(useState(''), 2),\n      hideActionName = _d[0],\n      setHideActionName = _d[1];\n\n  var _e = __read(useState({}), 2),\n      appointmentData = _e[0],\n      setAppointmentData = _e[1];\n\n  var toggleVisibility = useCallback(function () {\n    setVisible(!visible);\n  }, [visible, setVisible]);\n  var confirmCancelChanges = useCallback(function (hideAction) {\n    toggleVisibility();\n    setHideActionName(hideAction);\n    setActionType(ACTION_TYPES.CANCEL);\n  }, [toggleVisibility, setHideActionName, setActionType]);\n  var confirmDelete = useCallback(function (_a) {\n    var hideAction = _a.hideActionName,\n        changedAppointment = _a.appointmentData;\n    toggleVisibility();\n    setHideActionName(hideAction);\n    setActionType(ACTION_TYPES.DELETE);\n    setAppointmentData(changedAppointment);\n  }, [toggleVisibility, setHideActionName, setActionType, setAppointmentData]);\n  var confirmAction = useCallback(function (isNewAppointment, hideEditor, stopEditAppointment, finishDeleteAppointment, cancelAddedAppointment, cancelChangedAppointment) {\n    return function () {\n      hideEditor();\n      toggleVisibility();\n\n      if (isNewAppointment) {\n        cancelAddedAppointment();\n      } else {\n        stopEditAppointment();\n        cancelChangedAppointment();\n      }\n\n      if (actionType === ACTION_TYPES.DELETE) {\n        finishDeleteAppointment(appointmentData);\n      }\n    };\n  }, [toggleVisibility, actionType, appointmentData]);\n  return createElement(Plugin, {\n    name: \"ConfirmationDialog\",\n    dependencies: pluginDependencies$b\n  }, !ignoreCancel && createElement(Action, {\n    name: \"openCancelConfirmationDialog\",\n    action: confirmCancelChanges\n  }), !ignoreDelete && createElement(Action, {\n    name: \"openDeleteConfirmationDialog\",\n    action: confirmDelete\n  }), createElement(Template, {\n    name: \"schedulerRoot\"\n  }, createElement(TemplatePlaceholder, null), createElement(Container, {\n    ref: modalContainer\n  }), createElement(TemplatePlaceholder, {\n    name: \"confirmationDialogOverlay\"\n  })), createElement(Template, {\n    name: \"confirmationDialogOverlay\"\n  }, createElement(TemplateConnector, null, function (_a, actions) {\n    var editingAppointment = _a.editingAppointment;\n    var handleConfirm = confirmAction(!editingAppointment, actions[hideActionName], actions.stopEditAppointment, actions.finishDeleteAppointment, actions.cancelAddedAppointment, actions.cancelChangedAppointment);\n    return createElement(Overlay, {\n      target: modalContainer,\n      visible: visible,\n      onHide: toggleVisibility\n    }, createElement(Layout, {\n      buttonComponent: buttonComponent,\n      handleCancel: toggleVisibility,\n      handleConfirm: handleConfirm,\n      getMessage: getMessage,\n      isDeleting: actionType === ACTION_TYPES.DELETE,\n      appointmentData: appointmentData\n    }));\n  })));\n};\n\nConfirmationDialogBase.components = {\n  overlayComponent: 'Overlay',\n  containerComponent: 'Container',\n  layoutComponent: 'Layout',\n  buttonComponent: 'Button'\n};\nConfirmationDialogBase.defaultProps = {\n  ignoreCancel: false,\n  ignoreDelete: false\n}; // tslint:disable-next-line: max-line-length\n\n/** A plugin that renders the dialog which allows users to confirm or to discard delete and cancel appointment actions. */\n\nvar ConfirmationDialog = ConfirmationDialogBase;\n\nvar GroupingStateBase = /*#__PURE__*/function (_super) {\n  __extends(GroupingStateBase, _super);\n\n  function GroupingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      grouping: props.grouping,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups\n    };\n    _this.stateHelper = createStateHelper(_this, {\n      expandedGroups: function () {\n        var onExpandedGroupsChange = _this.props.onExpandedGroupsChange;\n        return onExpandedGroupsChange;\n      }\n    });\n    _this.toggleGroupExpanded = _this.stateHelper.applyReducer.bind(_this.stateHelper, toggleExpandedGroups);\n    return _this;\n  }\n\n  GroupingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.grouping,\n        grouping = _a === void 0 ? prevState.grouping : _a,\n        _b = nextProps.expandedGroups,\n        expandedGroups = _b === void 0 ? prevState.expandedGroups : _b;\n    return {\n      grouping: grouping,\n      expandedGroups: expandedGroups\n    };\n  };\n\n  GroupingStateBase.prototype.render = function () {\n    var _a = this.state,\n        grouping = _a.grouping,\n        expandedGroups = _a.expandedGroups;\n    var _b = this.props,\n        groupByDate = _b.groupByDate,\n        groupOrientation = _b.groupOrientation;\n    return createElement(Plugin, {\n      name: \"GroupingState\"\n    }, createElement(Getter, {\n      name: \"grouping\",\n      value: grouping\n    }), createElement(Getter, {\n      name: \"groupByDate\",\n      value: groupByDate\n    }), createElement(Getter, {\n      name: \"groupOrientation\",\n      value: groupOrientation\n    }), createElement(Getter, {\n      name: \"expandedGroups\",\n      value: expandedGroups\n    }), createElement(Action, {\n      name: \"toggleGroupExpanded\",\n      action: this.toggleGroupExpanded\n    }));\n  };\n\n  GroupingStateBase.defaultProps = {\n    defaultExpandedGroups: [],\n    groupByDate: function () {\n      return false;\n    },\n    groupOrientation: function () {\n      return HORIZONTAL_GROUP_ORIENTATION;\n    }\n  };\n  return GroupingStateBase;\n}(PureComponent);\n/** A plugin that manages the grouping state. */\n\n\nvar GroupingState = GroupingStateBase;\nvar pluginDependencies$c = [{\n  name: 'GroupingState'\n}, {\n  name: 'IntegratedGrouping'\n}, {\n  name: 'DayView',\n  optional: true\n}, {\n  name: 'MonthView',\n  optional: true\n}, {\n  name: 'WeekView',\n  optional: true\n}, {\n  name: 'ViewState',\n  optional: true\n}];\n\nvar GroupingPanelBase = /*#__PURE__*/function (_super) {\n  __extends(GroupingPanelBase, _super);\n\n  function GroupingPanelBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GroupingPanelBase.prototype.render = function () {\n    var _a = this.props,\n        HorizontalLayout = _a.horizontalLayoutComponent,\n        VerticalLayout = _a.verticalLayoutComponent,\n        rowComponent = _a.rowComponent,\n        cellComponent = _a.cellComponent;\n    return createElement(Plugin, {\n      name: \"GroupingPanel\",\n      dependencies: pluginDependencies$c\n    }, createElement(Template, {\n      name: \"groupingPanel\"\n    }, createElement(TemplateConnector, null, function (_a) {\n      var viewCellsData = _a.viewCellsData,\n          currentView = _a.currentView,\n          scrollingStrategy = _a.scrollingStrategy,\n          allDayPanelExists = _a.allDayPanelExists,\n          groupByDate = _a.groupByDate,\n          getGroupOrientation = _a.groupOrientation,\n          groups = _a.groups;\n      var groupOrientation = getGroupOrientation(currentView === null || currentView === void 0 ? void 0 : currentView.name);\n      return groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? createElement(HorizontalLayout, {\n        rowComponent: rowComponent,\n        cellComponent: cellComponent,\n        groups: groups,\n        colSpan: viewCellsData[0].length,\n        cellStyle: {\n          left: scrollingStrategy.fixedLeftWidth ? scrollingStrategy.fixedLeftWidth : (currentView === null || currentView === void 0 ? void 0 : currentView.type) === VIEW_TYPES.MONTH ? HORIZONTAL_VIEW_LEFT_OFFSET : VERTICAL_VIEW_LEFT_OFFSET\n        },\n        showHeaderForEveryDate: groupByDate === null || groupByDate === void 0 ? void 0 : groupByDate(currentView && currentView.name)\n      }) : createElement(VerticalLayout, {\n        rowComponent: rowComponent,\n        cellComponent: cellComponent,\n        groups: groups,\n        rowSpan: viewCellsData.length,\n        viewType: currentView === null || currentView === void 0 ? void 0 : currentView.type,\n        cellTextTopOffset: scrollingStrategy === null || scrollingStrategy === void 0 ? void 0 : scrollingStrategy.fixedTopHeight,\n        alignWithAllDayRow: allDayPanelExists\n      });\n    })));\n  };\n\n  GroupingPanelBase.components = {\n    horizontalLayoutComponent: 'HorizontalLayout',\n    verticalLayoutComponent: 'VerticalLayout',\n    rowComponent: 'Row',\n    cellComponent: 'Cell'\n  };\n  return GroupingPanelBase;\n}(PureComponent);\n/** A plugin that renders the grouping panel used to display group names. */\n\n\nvar GroupingPanel = GroupingPanelBase;\nvar pluginDependencies$d = [{\n  name: 'DayView',\n  optional: true\n}, {\n  name: 'WeekView',\n  optional: true\n}, {\n  name: 'MonthView',\n  optional: true\n}, {\n  name: 'DragDropProvider',\n  optional: true\n}, {\n  name: 'Appointments',\n  optional: true\n}];\n\nvar CurrentTimeIndicatorBase = function (_a) {\n  var indicatorComponent = _a.indicatorComponent,\n      shadePreviousAppointments = _a.shadePreviousAppointments,\n      shadePreviousCells = _a.shadePreviousCells,\n      updateInterval = _a.updateInterval;\n\n  var _b = __read(useState(Date.now), 2),\n      currentTime = _b[0],\n      setCurrentTime = _b[1];\n\n  useEffect(function () {\n    var tick = function () {\n      return setCurrentTime(Date.now());\n    };\n\n    var intervalId = updateInterval ? window.setInterval(tick, updateInterval) : undefined;\n    return function () {\n      return window.clearInterval(intervalId);\n    };\n  }, [updateInterval]);\n  return createElement(Plugin, {\n    name: \"CurrentTimeIndicator\",\n    dependencies: pluginDependencies$d\n  }, createElement(Template, {\n    name: \"cell\",\n    predicate: function (_a) {\n      var otherMonth = _a.otherMonth;\n      return !isMonthCell(otherMonth);\n    }\n  }, function (params) {\n    return createElement(TemplatePlaceholder, {\n      params: __assign(__assign({}, params), {\n        currentTimeIndicatorPosition: getCurrentTimeIndicatorTop(params, currentTime),\n        currentTimeIndicatorComponent: indicatorComponent\n      })\n    });\n  }), createElement(Template, {\n    name: \"cell\"\n  }, function (params) {\n    return createElement(TemplatePlaceholder, {\n      params: __assign(__assign({}, params), {\n        isShaded: isCellShaded(params, currentTime, shadePreviousCells)\n      })\n    });\n  }), createElement(Template, {\n    name: \"appointmentContent\"\n  }, function (params) {\n    return createElement(TemplatePlaceholder, {\n      params: __assign(__assign({}, params), {\n        isShaded: isShadedAppointment(params, currentTime, shadePreviousAppointments)\n      })\n    });\n  }), createElement(Template, {\n    name: \"draftAppointment\"\n  }, function (params) {\n    return createElement(TemplatePlaceholder, {\n      params: __assign(__assign({}, params), {\n        isShaded: isShadedAppointment(params, currentTime, shadePreviousAppointments)\n      })\n    });\n  }));\n};\n\nCurrentTimeIndicatorBase.defaultProps = {\n  updateInterval: 60000,\n  shadePreviousCells: false,\n  shadePreviousAppointments: false\n};\nCurrentTimeIndicatorBase.components = {\n  indicatorComponent: 'Indicator'\n}; // tslint:disable-next-line: max-line-length\n\n/** A plugin that renders the current time indicator and the shading that covers appointments and timetable cells up to the current time. */\n\nvar CurrentTimeIndicator = CurrentTimeIndicatorBase;\nvar pluginDependencies$e = [{\n  name: 'Resources'\n}, {\n  name: 'GroupingState'\n}, {\n  name: 'DayView',\n  optional: true\n}, {\n  name: 'MonthView',\n  optional: true\n}, {\n  name: 'WeekView',\n  optional: true\n}];\n\nvar getViewCellsDataComputed = function (_a) {\n  var viewCellsData = _a.viewCellsData,\n      groups = _a.groups,\n      resourcesToGroupBy = _a.resourcesToGroupBy,\n      groupByDate = _a.groupByDate,\n      currentView = _a.currentView,\n      groupOrientation = _a.groupOrientation;\n  return expandViewCellsDataWithGroups(viewCellsData, groups, resourcesToGroupBy, groupByDate(currentView.name), groupOrientation(currentView.name));\n};\n\nvar getAllDayCellsDataComputed = function (_a) {\n  var allDayCellsData = _a.allDayCellsData,\n      groups = _a.groups,\n      resourcesToGroupBy = _a.resourcesToGroupBy,\n      groupByDate = _a.groupByDate,\n      currentView = _a.currentView,\n      groupOrientation = _a.groupOrientation;\n  return allDayCellsData && expandViewCellsDataWithGroups(allDayCellsData, groups, resourcesToGroupBy, groupByDate(currentView.name), groupOrientation(currentView.name));\n};\n\nvar getGroupsComputed = function (_a) {\n  var resourcesToGroupBy = _a.resourcesToGroupBy;\n  return getGroupsFromResources(resourcesToGroupBy);\n};\n\nvar getResourcesToGroupByComputed = function (_a) {\n  var resources = _a.resources,\n      grouping = _a.grouping;\n  return sortFilteredResources(filterResourcesByGrouping(resources, grouping), grouping);\n};\n\nvar getGroupingComputed = function (_a) {\n  var grouping = _a.grouping,\n      resources = _a.resources;\n  return updateGroupingWithMainResource(grouping, resources);\n};\n\nvar getTimeTableAppointmentsComputed = function (_a) {\n  var timeTableAppointments = _a.timeTableAppointments,\n      grouping = _a.grouping,\n      resourcesToGroupBy = _a.resourcesToGroupBy,\n      groups = _a.groups,\n      groupByDate = _a.groupByDate,\n      currentView = _a.currentView,\n      excludedDays = _a.excludedDays;\n  return timeTableAppointments && expandGroups(timeTableAppointments, grouping, resourcesToGroupBy, groups, excludedDays, groupByDate(currentView === null || currentView === void 0 ? void 0 : currentView.name) && (currentView === null || currentView === void 0 ? void 0 : currentView.type) === VIEW_TYPES.MONTH);\n};\n\nvar getAllDayAppointmentsComputed = function (_a) {\n  var allDayAppointments = _a.allDayAppointments,\n      grouping = _a.grouping,\n      resourcesToGroupBy = _a.resourcesToGroupBy,\n      groups = _a.groups,\n      groupByDate = _a.groupByDate,\n      currentView = _a.currentView,\n      excludedDays = _a.excludedDays;\n  return allDayAppointments && expandGroups(allDayAppointments, grouping, resourcesToGroupBy, groups, excludedDays, groupByDate(currentView === null || currentView === void 0 ? void 0 : currentView.name));\n};\n\nvar getGroupByDateComputed = function (_a) {\n  var currentView = _a.currentView,\n      groupByDate = _a.groupByDate,\n      groupOrientation = _a.groupOrientation;\n  return groupOrientation(currentView === null || currentView === void 0 ? void 0 : currentView.name) === VERTICAL_GROUP_ORIENTATION ? function () {\n    return false;\n  } : groupByDate;\n};\n\nvar getTimeTableElementsMetaComputed = function (_a) {\n  var timeTableElementsMeta = _a.timeTableElementsMeta,\n      groupOrientation = _a.groupOrientation,\n      groups = _a.groups,\n      allDayPanelExists = _a.allDayPanelExists,\n      viewCellsData = _a.viewCellsData,\n      currentView = _a.currentView;\n  return updateTimeTableCellElementsMeta(timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData, currentView);\n};\n\nvar getAllDayElementsMetaComputed = function (_a) {\n  var allDayElementsMeta = _a.allDayElementsMeta,\n      timeTableElementsMeta = _a.timeTableElementsMeta,\n      groupOrientation = _a.groupOrientation,\n      groups = _a.groups,\n      allDayPanelExists = _a.allDayPanelExists,\n      viewCellsData = _a.viewCellsData,\n      currentView = _a.currentView;\n  return updateAllDayCellElementsMeta(allDayElementsMeta, timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData, currentView);\n};\n\nvar getTimeCellsDataComputed = function (_a) {\n  var viewCellsData = _a.viewCellsData,\n      timeCellsData = _a.timeCellsData,\n      currentView = _a.currentView,\n      groups = _a.groups,\n      resourcesToGroupBy = _a.resourcesToGroupBy,\n      groupOrientation = _a.groupOrientation;\n  return timeCellsData && updateTimeCellsData(viewCellsData, timeCellsData, groups, resourcesToGroupBy, groupOrientation(currentView.name));\n};\n\nvar IntegratedGroupingBase = memo(function () {\n  return createElement(Plugin, {\n    name: \"IntegratedGrouping\",\n    dependencies: pluginDependencies$e\n  }, createElement(Getter, {\n    name: \"groupByDate\",\n    computed: getGroupByDateComputed\n  }), createElement(Getter, {\n    name: \"grouping\",\n    computed: getGroupingComputed\n  }), createElement(Getter, {\n    name: \"resourcesToGroupBy\",\n    computed: getResourcesToGroupByComputed\n  }), createElement(Getter, {\n    name: \"groups\",\n    computed: getGroupsComputed\n  }), createElement(Getter, {\n    name: \"viewCellsData\",\n    computed: getViewCellsDataComputed\n  }), createElement(Getter, {\n    name: \"allDayCellsData\",\n    computed: getAllDayCellsDataComputed\n  }), createElement(Getter, {\n    name: \"timeCellsData\",\n    computed: getTimeCellsDataComputed\n  }), createElement(Getter, {\n    name: \"timeTableAppointments\",\n    computed: getTimeTableAppointmentsComputed\n  }), createElement(Getter, {\n    name: \"allDayAppointments\",\n    computed: getAllDayAppointmentsComputed\n  }), createElement(Getter, {\n    name: \"allDayElementsMeta\",\n    computed: getAllDayElementsMetaComputed\n  }), createElement(Getter, {\n    name: \"timeTableElementsMeta\",\n    computed: getTimeTableElementsMetaComputed\n  }));\n});\n/** A plugin that implements grouping. */\n\nvar IntegratedGrouping = IntegratedGroupingBase;\nexport { AllDayPanel, AppointmentForm, AppointmentTooltip, Appointments, ConfirmationDialog, CurrentTimeIndicator, DateNavigator, DayView, DragDropProvider, EditRecurrenceMenu, EditingState, GroupingPanel, GroupingState, IntegratedEditing, IntegratedGrouping, MonthView, Resources, Scheduler, TodayButton, Toolbar, ViewState, ViewSwitcher, WeekView };","map":{"version":3,"sources":["../src/plugins/scheduler-core.tsx","../src/scheduler.tsx","../src/plugins/basic-view.tsx","../src/plugins/vertical-view.tsx","../src/plugins/day-view.tsx","../src/plugins/week-view.tsx","../src/plugins/month-view.tsx","../src/plugins/toolbar.tsx","../src/plugins/date-navigator.tsx","../src/plugins/view-switcher.tsx","../src/plugins/appointments.tsx","../src/plugins/all-day-panel.tsx","../src/plugins/view-state.tsx","../src/plugins/editing-state.tsx","../src/plugins/appointment-tooltip.tsx","../src/plugins/appointment-form.tsx","../src/plugins/drag-drop-provider.tsx","../src/plugins/today-button.tsx","../src/plugins/edit-recurrence-menu.tsx","../src/plugins/integrated-editing.tsx","../src/plugins/resources.tsx","../src/plugins/confirmation-dialog.tsx","../src/plugins/grouping-state.tsx","../src/plugins/grouping-panel.tsx","../src/plugins/current-time-indicator.tsx","../src/plugins/integrated-grouping.tsx"],"names":["React.PureComponent","React.createElement","availableViews","viewCellsDataCore","viewCellsDataBaseComputed","calculateAppointmentsIntervalsBaseComputed","pluginDependencies","CellPlaceholder","preCommitChangesBase","React.createRef","defaultMessages","DragDropProviderCore","React.useState","React.useCallback","React.useEffect"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { appointments, formatDateTimeGetter } from '@devexpress/dx-scheduler-core';\nimport { SchedulerProps } from '../types';\nimport { memoize } from '@devexpress/dx-core';\n\nclass SchedulerCoreBase extends React.PureComponent<SchedulerProps> {\n  formatDateTimeGetter = memoize(locale => formatDateTimeGetter(locale));\n\n  render() {\n    const {\n      data,\n      rootComponent: Root,\n      locale,\n      height,\n      firstDayOfWeek,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"SchedulerCore\"\n      >\n        <Getter name=\"appointments\" value={appointments(data)} />\n        <Getter name=\"formatDate\" value={this.formatDateTimeGetter(locale)} />\n        <Getter name=\"firstDayOfWeek\" value={firstDayOfWeek} />\n        <Getter name=\"locale\" value={locale} />\n        <Template name=\"root\">\n          <Root height={height}>\n            <TemplatePlaceholder name=\"schedulerRoot\" />\n            <TemplatePlaceholder name=\"header\" />\n            <TemplatePlaceholder name=\"body\" />\n            <TemplatePlaceholder name=\"footer\" />\n          </Root>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * The Scheduler is a root container component designed to process\n * and display the specified data. The Scheduler's functionality\n * (data visualization and processing) is implemented in several plugins\n * specified as child components.\n * */\nexport const SchedulerCore: React.ComponentType<SchedulerProps> = SchedulerCoreBase;\n","import * as React from 'react';\nimport { PluginHost } from '@devexpress/dx-react-core';\nimport { SchedulerCore } from './plugins/scheduler-core';\nimport { SchedulerProps } from './types';\n\nconst SchedulerBase: React.SFC<SchedulerProps> = ({\n  data,\n  rootComponent,\n  children,\n  locale,\n  height,\n  firstDayOfWeek,\n}) => (\n  <PluginHost>\n    <SchedulerCore\n      data={data}\n      rootComponent={rootComponent}\n      locale={locale}\n      height={height}\n      firstDayOfWeek={firstDayOfWeek}\n    />\n    {children}\n  </PluginHost>\n);\n\nSchedulerBase.defaultProps = {\n  data: [],\n  locale: 'en-US',\n  height: 'auto',\n  firstDayOfWeek: 0,\n};\n\n// tslint:disable: max-line-length\n/***\n * The Scheduler is a root container component designed to process\n * and display the specified data. The Scheduler’s functionality\n * (data visualization and processing) is implemented in several plugins specified as child components.\n * */\nexport const Scheduler: React.ComponentType<SchedulerProps> = SchedulerBase;\n","import * as React from 'react';\nimport {\n  Template,\n  Plugin,\n  Getter,\n  TemplateConnector,\n  TemplatePlaceholder,\n  ComputedFn,\n} from '@devexpress/dx-react-core';\nimport {\n  computed,\n  startViewDate as startViewDateCore,\n  endViewDate as endViewDateCore,\n  availableViews as availableViewsCore,\n  HORIZONTAL_GROUP_ORIENTATION,\n  VERTICAL_GROUP_ORIENTATION,\n} from '@devexpress/dx-scheduler-core';\nimport { memoize } from '@devexpress/dx-core';\nimport { BasicViewProps, BasicViewState, ScrollingStrategy } from '../types';\n\nconst CellPlaceholder = params => <TemplatePlaceholder name=\"cell\" params={params} />;\nconst TimeTableAppointmentLayer = () => <TemplatePlaceholder name=\"timeTableAppointmentLayer\" />;\n\nconst startViewDateBaseComputed = ({ viewCellsData }) => startViewDateCore(viewCellsData);\nconst endViewDateBaseComputed = ({ viewCellsData }) => endViewDateCore(viewCellsData);\n\nconst TimeTablePlaceholder = () => <TemplatePlaceholder name=\"timeTable\" />;\nconst DayScalePlaceholder = () => <TemplatePlaceholder name=\"dayScale\" />;\nconst DayScaleEmptyCellPlaceholder = () => <TemplatePlaceholder name=\"dayScaleEmptyCell\" />;\n\nconst GroupingPanelPlaceholder = () => <TemplatePlaceholder name=\"groupingPanel\" />;\n\nclass BasicViewBase extends React.PureComponent<BasicViewProps, BasicViewState> {\n  state = {\n    timeTableElementsMeta: {},\n    scrollingStrategy: {\n      topBoundary: 0,\n      bottomBoundary: 0,\n      leftBoundary: 0,\n      rightBoundary: 0,\n      changeVerticalScroll: () => undefined,\n      changeHorizontalScroll: () => undefined,\n    },\n    previousTimeTableCell: null,\n    // The key has to be generated every time the TimeTableCell is updated to rerender TimeTable\n    // and, consequently, update timeTableElementsMeta\n    timeTableLayoutKey: 0,\n  };\n\n  static getDerivedStateFromProps(\n    props: BasicViewProps, state: BasicViewState,\n  ): BasicViewState | null {\n\n    if (props.timeTableCellComponent !== state.previousTimeTableCell) {\n      return {\n        ...state,\n        previousTimeTableCell: props.timeTableCellComponent,\n        timeTableLayoutKey: Math.random(),\n      };\n    }\n    return null;\n  }\n\n  scrollingStrategyComputed = memoize((viewName, scrollingStrategy) => getters =>\n    computed(getters, viewName!, () => scrollingStrategy, getters.scrollingStrategy));\n\n  timeTableElementsMetaComputed = memoize((viewName, timeTableElementsMeta) => getters =>\n    computed(getters, viewName!, () => timeTableElementsMeta, getters.timeTableElementsMeta));\n\n  intervalCountComputed = memoize((viewName, intervalCount) => getters =>\n    computed(getters, viewName!, () => intervalCount, getters.intervalCount));\n\n  cellDurationComputed = memoize((viewName, cellDuration) => getters =>\n    computed(getters, viewName, () => cellDuration, getters.cellDuration));\n\n  excludedDaysComputed = memoize((viewName, excludedDays) => getters => computed(\n    getters, viewName!, () => excludedDays, getters.excludedDays,\n  ));\n\n  availableViewsComputed = memoize((viewName, viewDisplayName) => ({ availableViews }) =>\n    availableViewsCore(availableViews, viewName!, viewDisplayName));\n\n  currentViewComputed = memoize((viewName, viewDisplayName, type) => ({ currentView }) => (\n    currentView && currentView.name !== viewName\n      ? currentView\n      : { name: viewName, type, displayName: viewDisplayName }\n  ));\n\n  endViewDateComputed: ComputedFn = (getters) => {\n    const { name: viewName } = this.props;\n    return computed(\n      getters, viewName!, endViewDateBaseComputed, getters.endViewDate,\n    );\n  }\n\n  startViewDateComputed: ComputedFn = (getters) => {\n    const { name: viewName } = this.props;\n    return computed(\n      getters, viewName!, startViewDateBaseComputed, getters.startViewDate,\n    );\n  }\n\n  viewCellsDataComputed = memoize((\n    viewName, cellDuration, startDayHour, endDayHour, viewCellsDataBaseComputed,\n  ) => getters => computed(\n    getters,\n    viewName,\n    viewCellsDataBaseComputed(cellDuration, startDayHour, endDayHour),\n    getters.viewCellsData,\n  ));\n\n  timeTableAppointmentsComputed = memoize((\n    viewName, cellDuration, calculateAppointmentsIntervals,\n  ) => getters => computed(\n      getters,\n      viewName,\n      calculateAppointmentsIntervals(cellDuration),\n      getters.timeTableAppointments,\n    ));\n\n  updateCellElementsMeta = memoize((cellElementsMeta) => {\n    this.setState({ timeTableElementsMeta: cellElementsMeta });\n  });\n\n  setScrollingStrategy = (scrollingStrategy: ScrollingStrategy) => {\n    this.setState({ scrollingStrategy });\n  }\n\n  render() {\n    const {\n      name: viewName,\n      intervalCount,\n      displayName,\n      type,\n      excludedDays,\n      cellDuration,\n      startDayHour,\n      endDayHour,\n      viewCellsDataComputed,\n      calculateAppointmentsIntervals,\n      dayScaleCellComponent,\n      dayScaleRowComponent,\n      dayScaleLayoutComponent: DayScale,\n      timeTableCellComponent: TimeTableCell,\n      timeTableLayoutComponent: TimeTableLayout,\n      timeTableRowComponent,\n      appointmentLayerComponent: AppointmentLayer,\n      dayScaleEmptyCellComponent: DayScaleEmptyCell,\n      layoutProps,\n      layoutComponent: Layout,\n    } = this.props;\n    const { timeTableElementsMeta, scrollingStrategy, timeTableLayoutKey } = this.state;\n    const viewDisplayName = displayName || viewName;\n\n    return (\n      <Plugin name=\"basicView\">\n        <Getter\n          name=\"availableViews\"\n          computed={this.availableViewsComputed(viewName, viewDisplayName)}\n        />\n        <Getter\n          name=\"currentView\"\n          computed={this.currentViewComputed(viewName, viewDisplayName, type)}\n        />\n        <Getter\n          name=\"intervalCount\"\n          computed={this.intervalCountComputed(viewName, intervalCount)}\n        />\n        <Getter name=\"excludedDays\" computed={this.excludedDaysComputed(viewName, excludedDays)} />\n        <Getter\n          name=\"viewCellsData\"\n          computed={this.viewCellsDataComputed(\n            viewName, cellDuration, startDayHour, endDayHour, viewCellsDataComputed,\n          )}\n        />\n        <Getter name=\"startViewDate\" computed={this.startViewDateComputed} />\n        <Getter name=\"endViewDate\" computed={this.endViewDateComputed} />\n        <Getter\n          name=\"cellDuration\"\n          computed={this.cellDurationComputed(viewName, cellDuration)}\n        />\n\n        <Getter\n          name=\"timeTableElementsMeta\"\n          computed={this.timeTableElementsMetaComputed(viewName, timeTableElementsMeta)}\n        />\n        <Getter\n          name=\"scrollingStrategy\"\n          computed={this.scrollingStrategyComputed(viewName, scrollingStrategy)}\n        />\n\n        <Getter\n          name=\"timeTableAppointments\"\n          computed={this.timeTableAppointmentsComputed(\n            viewName, cellDuration, calculateAppointmentsIntervals,\n          )}\n        />\n\n        <Template name=\"body\">\n          <TemplateConnector>\n            {({ currentView, groupOrientation, groups }) => {\n              if (currentView.name !== viewName) return <TemplatePlaceholder />;\n              const isVerticalGrouping = groupOrientation?.(viewName)\n                === VERTICAL_GROUP_ORIENTATION;\n              return (\n                <Layout\n                  dayScaleComponent={DayScalePlaceholder}\n                  timeTableComponent={TimeTablePlaceholder}\n                  setScrollingStrategy={this.setScrollingStrategy}\n                  groupingPanelComponent={\n                    isVerticalGrouping ? GroupingPanelPlaceholder : undefined\n                  }\n                  groupingPanelSize={isVerticalGrouping ? groups?.length : 0}\n                  dayScaleEmptyCellComponent={DayScaleEmptyCellPlaceholder}\n                  {...layoutProps}\n                />\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n\n        <Template name=\"dayScale\">\n          <TemplateConnector>\n            {({ currentView, viewCellsData, formatDate, groupByDate, groupOrientation }) => {\n              if (currentView.name !== viewName) return <TemplatePlaceholder />;\n              const groupByDateEnabled = groupByDate?.(viewName);\n              const isHorizontalGrouping = groupOrientation?.(viewName)\n                === HORIZONTAL_GROUP_ORIENTATION;\n              return (\n                <DayScale\n                  cellComponent={dayScaleCellComponent}\n                  rowComponent={dayScaleRowComponent}\n                  groupingPanelComponent={\n                    isHorizontalGrouping ? GroupingPanelPlaceholder : undefined\n                  }\n                  cellsData={viewCellsData}\n                  formatDate={formatDate}\n                  groupedByDate={groupByDateEnabled}\n                />\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n\n        <Template name=\"cell\">\n          {params => (\n            <TemplateConnector>\n              {({ currentView }) => {\n                if (currentView.name !== viewName) return <TemplatePlaceholder params={params} />;\n                return (\n                  <TimeTableCell {...params} />\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n\n        <Template name=\"timeTable\">\n          {(params: any) => (\n            <TemplateConnector>\n              {({ formatDate, currentView, viewCellsData }) => {\n                if (currentView.name !== viewName) return <TemplatePlaceholder />;\n                return (\n                  <>\n                    <TimeTableLayout\n                      cellsData={viewCellsData}\n                      rowComponent={timeTableRowComponent}\n                      cellComponent={CellPlaceholder}\n                      formatDate={formatDate}\n                      setCellElementsMeta={this.updateCellElementsMeta}\n                      key={timeTableLayoutKey}\n                      {...params}\n                    />\n                    <AppointmentLayer>\n                      <TimeTableAppointmentLayer />\n                    </AppointmentLayer>\n                  </>\n                );\n              }}\n          </TemplateConnector>\n          )}\n        </Template>\n\n        <Template name=\"dayScaleEmptyCell\">\n          <TemplateConnector>\n            {({ currentView }) => {\n              if (currentView.name !== viewName || !DayScaleEmptyCell) {\n                return <TemplatePlaceholder />;\n              }\n              return (\n                <DayScaleEmptyCell />\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\nexport const BasicView: React.ComponentType<BasicViewProps> = BasicViewBase;\n","import * as React from 'react';\nimport {\n  Template,\n  Plugin,\n  TemplateConnector,\n  TemplatePlaceholder,\n  Getter,\n} from '@devexpress/dx-react-core';\nimport {\n  calculateWeekDateIntervals,\n  getTimeTableHeight,\n  timeCellsData as timeCellsDataCore,\n  computed,\n} from '@devexpress/dx-scheduler-core';\nimport { BasicView } from './basic-view';\nimport { CommonVerticalViewProps } from '../types';\nimport { memoize } from '@devexpress/dx-core';\n\nconst calculateAppointmentsIntervalsBaseComputed = cellDuration => ({\n  appointments, startViewDate, endViewDate, excludedDays,\n}) => calculateWeekDateIntervals(\n  appointments, startViewDate, endViewDate, excludedDays, cellDuration,\n);\nconst timeCellsDataComputed = (startDayHour, endDayHour) => ({\n  viewCellsData, cellDuration,\n}) => timeCellsDataCore(viewCellsData, startDayHour, endDayHour, cellDuration, Date.now());\n\nconst TimeScalePlaceholder = () => <TemplatePlaceholder name=\"timeScale\" />;\n\nclass VericalViewBase extends React.PureComponent<CommonVerticalViewProps> {\n  timeCellsDataComputed = memoize((viewName, startDayHour, endDayHour) => getters => computed(\n    getters,\n    viewName,\n    timeCellsDataComputed(startDayHour, endDayHour),\n    getters.timeCellsData,\n  ));\n\n  render() {\n    const {\n      layoutComponent,\n      dayScaleEmptyCellComponent,\n      timeScaleLayoutComponent: TimeScale,\n      timeScaleLabelComponent: TimeScaleLabel,\n      timeScaleTickCellComponent,\n      timeScaleTicksRowComponent,\n      dayScaleLayoutComponent,\n      dayScaleCellComponent,\n      dayScaleRowComponent,\n      timeTableLayoutComponent,\n      timeTableRowComponent,\n      timeTableCellComponent,\n      cellDuration,\n      excludedDays,\n      name: viewName,\n      appointmentLayerComponent,\n      intervalCount,\n      displayName,\n      startDayHour,\n      endDayHour,\n      viewCellsDataComputed,\n      type,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"WeekView\"\n      >\n        <BasicView\n          viewCellsDataComputed={viewCellsDataComputed}\n          type={type}\n          cellDuration={cellDuration}\n          name={viewName}\n          intervalCount={intervalCount}\n          displayName={displayName}\n          startDayHour={startDayHour}\n          endDayHour={endDayHour}\n          excludedDays={excludedDays}\n          calculateAppointmentsIntervals={calculateAppointmentsIntervalsBaseComputed}\n          dayScaleEmptyCellComponent={dayScaleEmptyCellComponent}\n          dayScaleLayoutComponent={dayScaleLayoutComponent}\n          dayScaleCellComponent={dayScaleCellComponent}\n          dayScaleRowComponent={dayScaleRowComponent}\n          timeTableCellComponent={timeTableCellComponent}\n          timeTableLayoutComponent={timeTableLayoutComponent}\n          timeTableRowComponent={timeTableRowComponent}\n          appointmentLayerComponent={appointmentLayerComponent}\n          layoutComponent={layoutComponent}\n          layoutProps={{\n            timeScaleComponent: TimeScalePlaceholder,\n          }}\n        />\n\n        <Getter\n          name=\"timeCellsData\"\n          computed={this.timeCellsDataComputed(viewName, startDayHour, endDayHour)}\n        />\n\n        <Template name=\"timeScale\">\n          {(params: any) => (\n            <TemplateConnector>\n              {({\n                currentView, timeCellsData, groups, formatDate,\n                groupOrientation: getGroupOrientation,\n                timeTableElementsMeta,\n              }) => {\n                if (currentView.name !== viewName) return <TemplatePlaceholder />;\n                const groupOrientation = getGroupOrientation?.(viewName);\n\n                return (\n                  <TimeScale\n                    labelComponent={TimeScaleLabel}\n                    tickCellComponent={timeScaleTickCellComponent}\n                    rowComponent={timeScaleTicksRowComponent}\n                    cellsData={timeCellsData}\n                    formatDate={formatDate}\n                    groups={groups}\n                    groupOrientation={groupOrientation}\n                    height={getTimeTableHeight(timeTableElementsMeta)}\n                    {...params}\n                  />\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nexport const VerticalView: React.ComponentType<CommonVerticalViewProps> = VericalViewBase;\n","import * as React from 'react';\nimport {\n  Plugin,\n  PluginComponents,\n} from '@devexpress/dx-react-core';\nimport {\n  viewCellsData as viewCellsDataCore,\n  VIEW_TYPES,\n} from '@devexpress/dx-scheduler-core';\nimport { VerticalViewProps } from '../types';\nimport { VerticalView } from './vertical-view';\n\nconst viewCellsDataBaseComputed = (\n  cellDuration, startDayHour, endDayHour,\n) => ({ currentDate, intervalCount }) => {\n  return viewCellsDataCore(\n    currentDate, undefined,\n    intervalCount, [],\n    startDayHour!, endDayHour!, cellDuration!,\n    Date.now(),\n  );\n};\n\nclass DayViewBase extends React.PureComponent<VerticalViewProps> {\n  static defaultProps: Partial<VerticalViewProps> = {\n    name: 'Day',\n    startDayHour: 0,\n    endDayHour: 24,\n    cellDuration: 30,\n    intervalCount: 1,\n  };\n\n  static components: PluginComponents = {\n    layoutComponent: 'Layout',\n    layoutContainer: 'LayoutContainer',\n    appointmentLayerComponent: 'AppointmentLayer',\n    dayScaleEmptyCellComponent: 'DayScaleEmptyCell',\n    timeScaleLayoutComponent: 'TimeScaleLayout',\n    timeScaleLabelComponent: 'TimeScaleLabel',\n    timeScaleTickCellComponent: 'TimeScaleTickCell',\n    timeScaleTicksRowComponent: 'TimeScaleTicksRow',\n    dayScaleLayoutComponent: 'DayScaleLayout',\n    dayScaleCellComponent: 'DayScaleCell',\n    dayScaleRowComponent: 'DayScaleRow',\n    timeTableContainerComponent: 'TimeTableContainer',\n    timeTableLayoutComponent: 'TimeTableLayout',\n    timeTableCellComponent: 'TimeTableCell',\n    timeTableRowComponent: 'TimeTableRow',\n  };\n\n  render() {\n    const {\n      layoutComponent,\n      dayScaleEmptyCellComponent: DayScaleEmptyCell,\n      timeScaleLayoutComponent,\n      timeScaleLabelComponent,\n      timeScaleTickCellComponent,\n      timeScaleTicksRowComponent,\n      dayScaleLayoutComponent,\n      dayScaleCellComponent,\n      dayScaleRowComponent,\n      timeTableLayoutComponent,\n      timeTableRowComponent,\n      timeTableCellComponent,\n      appointmentLayerComponent,\n      cellDuration,\n      name: viewName,\n      intervalCount,\n      displayName,\n      startDayHour,\n      endDayHour,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"DayView\"\n      >\n        <VerticalView\n          viewCellsDataComputed={viewCellsDataBaseComputed}\n          type={VIEW_TYPES.DAY}\n          cellDuration={cellDuration}\n          name={viewName}\n          intervalCount={intervalCount}\n          displayName={displayName}\n          startDayHour={startDayHour}\n          endDayHour={endDayHour}\n          dayScaleEmptyCellComponent={DayScaleEmptyCell}\n          dayScaleLayoutComponent={dayScaleLayoutComponent}\n          dayScaleCellComponent={dayScaleCellComponent}\n          dayScaleRowComponent={dayScaleRowComponent}\n          timeTableCellComponent={timeTableCellComponent}\n          timeTableLayoutComponent={timeTableLayoutComponent}\n          timeTableRowComponent={timeTableRowComponent}\n          appointmentLayerComponent={appointmentLayerComponent}\n          layoutComponent={layoutComponent}\n          timeScaleLayoutComponent={timeScaleLayoutComponent}\n          timeScaleLabelComponent={timeScaleLabelComponent}\n          timeScaleTickCellComponent={timeScaleTickCellComponent}\n          timeScaleTicksRowComponent={timeScaleTicksRowComponent}\n        />\n      </Plugin >\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/*** A plugin that renders Scheduler data for a day. This plugin arranges appointments from top to bottom.\n * If their time intervals overlap, their width is decreased and they are placed next to each other.\n * */\nexport const DayView: React.ComponentType<VerticalViewProps> = DayViewBase;\n","import * as React from 'react';\nimport {\n  Plugin,\n  PluginComponents,\n} from '@devexpress/dx-react-core';\nimport {\n  viewCellsData as viewCellsDataCore,\n  VIEW_TYPES,\n} from '@devexpress/dx-scheduler-core';\nimport { WeekViewProps } from '../types';\nimport { VerticalView } from './vertical-view';\n\nconst DAYS_IN_WEEK = 7;\nconst viewCellsDataBaseComputed = (\n  cellDuration, startDayHour, endDayHour,\n) => ({ firstDayOfWeek, intervalCount, excludedDays, currentDate }) => {\n  return viewCellsDataCore(\n    currentDate, firstDayOfWeek,\n    intervalCount! * DAYS_IN_WEEK, excludedDays!,\n    startDayHour!, endDayHour!, cellDuration!,\n    Date.now(),\n  );\n};\n\nclass WeekViewBase extends React.PureComponent<WeekViewProps> {\n  static defaultProps: Partial<WeekViewProps> = {\n    startDayHour: 0,\n    endDayHour: 24,\n    cellDuration: 30,\n    intervalCount: 1,\n    excludedDays: [],\n    name: 'Week',\n  };\n\n  static components: PluginComponents = {\n    layoutComponent: 'Layout',\n    layoutContainerComponent: 'LayoutContainer',\n    appointmentLayerComponent: 'AppointmentLayer',\n    dayScaleEmptyCellComponent: 'DayScaleEmptyCell',\n    timeScaleLayoutComponent: 'TimeScaleLayout',\n    timeScaleLabelComponent: 'TimeScaleLabel',\n    timeScaleTickCellComponent: 'TimeScaleTickCell',\n    timeScaleTicksRowComponent: 'TimeScaleTicksRow',\n    dayScaleLayoutComponent: 'DayScaleLayout',\n    dayScaleCellComponent: 'DayScaleCell',\n    dayScaleRowComponent: 'DayScaleRow',\n    timeTableContainerComponent: 'TimeTableContainer',\n    timeTableLayoutComponent: 'TimeTableLayout',\n    timeTableCellComponent: 'TimeTableCell',\n    timeTableRowComponent: 'TimeTableRow',\n  };\n\n  render() {\n    const {\n      layoutComponent,\n      dayScaleEmptyCellComponent,\n      timeScaleLayoutComponent,\n      timeScaleLabelComponent,\n      timeScaleTickCellComponent,\n      timeScaleTicksRowComponent,\n      dayScaleLayoutComponent,\n      dayScaleCellComponent,\n      dayScaleRowComponent,\n      timeTableLayoutComponent,\n      timeTableRowComponent,\n      timeTableCellComponent,\n      cellDuration,\n      excludedDays,\n      name: viewName,\n      appointmentLayerComponent,\n      intervalCount,\n      displayName,\n      startDayHour,\n      endDayHour,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"WeekView\"\n      >\n        <VerticalView\n          viewCellsDataComputed={viewCellsDataBaseComputed}\n          type={VIEW_TYPES.WEEK}\n          cellDuration={cellDuration}\n          name={viewName}\n          intervalCount={intervalCount}\n          displayName={displayName}\n          startDayHour={startDayHour}\n          endDayHour={endDayHour}\n          excludedDays={excludedDays}\n          dayScaleEmptyCellComponent={dayScaleEmptyCellComponent}\n          dayScaleLayoutComponent={dayScaleLayoutComponent}\n          dayScaleCellComponent={dayScaleCellComponent}\n          dayScaleRowComponent={dayScaleRowComponent}\n          timeTableCellComponent={timeTableCellComponent}\n          timeTableLayoutComponent={timeTableLayoutComponent}\n          timeTableRowComponent={timeTableRowComponent}\n          appointmentLayerComponent={appointmentLayerComponent}\n          layoutComponent={layoutComponent}\n          timeScaleLayoutComponent={timeScaleLayoutComponent}\n          timeScaleLabelComponent={timeScaleLabelComponent}\n          timeScaleTickCellComponent={timeScaleTickCellComponent}\n          timeScaleTicksRowComponent={timeScaleTicksRowComponent}\n        />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable: max-line-length\n/***\n * A plugin that renders the Scheduler's week view. This plugin arranges appointments from top to bottom.\n * If their time intervals overlap, their width is decreased and they are placed next to each other.\n * */\nexport const WeekView: React.ComponentType<WeekViewProps> = WeekViewBase;\n","import * as React from 'react';\nimport { Plugin, PluginComponents } from '@devexpress/dx-react-core';\nimport { monthCellsData, calculateMonthDateIntervals, VIEW_TYPES } from '@devexpress/dx-scheduler-core';\nimport { BasicView } from './basic-view';\nimport { MonthViewProps } from '../types';\n\nconst viewCellsDataBaseComputed = (\n  cellDuration, startDayHour, endDayHour,\n) => ({ currentDate, firstDayOfWeek, intervalCount }) => monthCellsData(\n  currentDate, firstDayOfWeek, intervalCount!, Date.now(),\n);\nconst calculateAppointmentsIntervalsBaseComputed = cellDuration => ({\n  appointments, startViewDate, endViewDate, excludedDays,\n}) => calculateMonthDateIntervals(\n  appointments, startViewDate, endViewDate,\n);\n\nclass MonthViewBase extends React.PureComponent<MonthViewProps> {\n  static defaultProps: Partial<MonthViewProps> = {\n    intervalCount: 1,\n    name: 'Month',\n  };\n\n  static components: PluginComponents = {\n    layoutComponent: 'Layout',\n    appointmentLayerComponent: 'AppointmentLayer',\n    dayScaleEmptyCellComponent: 'DayScaleEmptyCell',\n    dayScaleLayoutComponent: 'DayScaleLayout',\n    dayScaleCellComponent: 'DayScaleCell',\n    dayScaleRowComponent: 'DayScaleRow',\n    timeTableContainerComponent: 'TimeTableContainer',\n    timeTableLayoutComponent: 'TimeTableLayout',\n    timeTableCellComponent: 'TimeTableCell',\n    timeTableRowComponent: 'TimeTableRow',\n  };\n\n  render() {\n    const {\n      layoutComponent,\n      dayScaleEmptyCellComponent,\n      dayScaleLayoutComponent,\n      dayScaleCellComponent,\n      dayScaleRowComponent,\n      timeTableLayoutComponent,\n      timeTableRowComponent,\n      timeTableCellComponent,\n      appointmentLayerComponent,\n      name: viewName,\n      intervalCount,\n      displayName,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"MonthView\"\n      >\n        <BasicView\n          viewCellsDataComputed={viewCellsDataBaseComputed}\n          type={VIEW_TYPES.MONTH}\n          name={viewName}\n          intervalCount={intervalCount}\n          displayName={displayName}\n          calculateAppointmentsIntervals={calculateAppointmentsIntervalsBaseComputed}\n          dayScaleEmptyCellComponent={dayScaleEmptyCellComponent}\n          dayScaleLayoutComponent={dayScaleLayoutComponent}\n          dayScaleCellComponent={dayScaleCellComponent}\n          dayScaleRowComponent={dayScaleRowComponent}\n          timeTableCellComponent={timeTableCellComponent}\n          timeTableLayoutComponent={timeTableLayoutComponent}\n          timeTableRowComponent={timeTableRowComponent}\n          appointmentLayerComponent={appointmentLayerComponent}\n          layoutComponent={layoutComponent}\n        />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable: max-line-length\n/***\n * A plugin that renders Scheduler data for a month. This plugin arranges appointments from left to right.\n * An appointment's size depends on its duration in days.\n * However, it occupies the entire day cell if an appointment lasts only for several hours or minutes.\n * The time scale and all-day panel are not available in this view.\n * */\nexport const MonthView: React.ComponentType<MonthViewProps> = MonthViewBase;\n","import * as React from 'react';\nimport {\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n  PluginComponents,\n} from '@devexpress/dx-react-core';\nimport { ToolbarProps } from '../types';\n\nclass ToolbarBase extends React.PureComponent<ToolbarProps> {\n  static components: PluginComponents = {\n    rootComponent: 'Root',\n    flexibleSpaceComponent: 'FlexibleSpace',\n  };\n  render() {\n    const {\n      rootComponent: Root,\n      flexibleSpaceComponent: FlexibleSpaceComponent,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"Toolbar\"\n      >\n        <Template name=\"header\">\n          <Root>\n            <TemplatePlaceholder name=\"toolbarContent\" />\n          </Root>\n          <TemplatePlaceholder />\n        </Template>\n        <Template name=\"toolbarContent\">\n          <FlexibleSpaceComponent />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Scheduler's toolbar. */\nexport const Toolbar: React.ComponentType<ToolbarProps> = ToolbarBase;\n","import * as React from 'react';\nimport {\n  Plugin,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  PluginComponents,\n} from '@devexpress/dx-react-core';\nimport {\n  monthCellsData,\n  viewBoundText,\n} from '@devexpress/dx-scheduler-core';\nimport { memoize } from '@devexpress/dx-core';\n\nimport { DateNavigatorProps, DateNavigatorState } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Toolbar' },\n  { name: 'ViewState' },\n];\n\nconst navigate = (action, currentView, intervalCount) => (direction, nextDate) => action({\n  direction,\n  nextDate,\n  amount: intervalCount,\n  step: currentView.type,\n});\n\nclass DateNavigatorBase extends React.PureComponent<DateNavigatorProps, DateNavigatorState> {\n  target!: React.ReactInstance;\n\n  state = {\n    visible: false,\n  };\n  static components: PluginComponents = {\n    rootComponent: 'Root',\n    overlayComponent: 'Overlay',\n    openButtonComponent: 'OpenButton',\n    navigationButtonComponent: 'NavigationButton',\n    calendarComponent: 'Calendar',\n    calendarRowComponent: 'CalendarRow',\n    calendarCellComponent: 'CalendarCell',\n    calendarHeaderRowComponent: 'CalendarHeaderRow',\n    calendarHeaderCellComponent: 'CalendarHeaderCell',\n    calendarTextComponent: 'CalendarText',\n    calendarNavigatorComponent: 'CalendarNavigator',\n    calendarNavigationButtonComponent: 'CalendarNavigationButton',\n  };\n\n  setRootRef = (target: React.ReactInstance) => {\n    this.target = target;\n  }\n\n  handleVisibilityToggle = () => {\n    this.setState(prevState => ({ visible: !prevState.visible }));\n  }\n\n  handleHide = () => {\n    this.setState({ visible: false });\n  }\n\n  navigateAction = memoize((changeCurrentDate, currentView, intervalCount, navigateAction) =>\n    navigateAction(changeCurrentDate, currentView, intervalCount));\n\n  render() {\n    const {\n      rootComponent: Root,\n      overlayComponent: Overlay,\n      openButtonComponent: OpenButton,\n      navigationButtonComponent: NavigationButton,\n      calendarComponent: Calendar,\n      calendarRowComponent: CalendarRow,\n      calendarCellComponent: CalendarCell,\n      calendarHeaderRowComponent: CalendarHeaderRow,\n      calendarHeaderCellComponent: CalendarHeaderCell,\n      calendarTextComponent: CalendarText,\n      calendarNavigationButtonComponent: CalendarNavigationButton,\n      calendarNavigatorComponent: CalendarNavigator,\n    } = this.props;\n\n    const { visible } = this.state;\n    return (\n      <Plugin\n        name=\"DateNavigator\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplateConnector>\n            {({\n              currentDate,\n              startViewDate,\n              endViewDate,\n              firstDayOfWeek,\n              currentView,\n              intervalCount,\n              formatDate,\n            }, {\n              changeCurrentDate,\n            }) => {\n              const navigateAction = this.navigateAction(\n                changeCurrentDate, currentView, intervalCount, navigate,\n              );\n              const calendarDateChanged = (nextDate) => {\n                navigateAction(undefined, nextDate);\n                this.handleHide();\n              };\n              const navigatorText = viewBoundText(\n                startViewDate,\n                endViewDate,\n                currentView.type,\n                currentDate,\n                intervalCount,\n                formatDate,\n              );\n              return (\n                <React.Fragment>\n                  <Root\n                    navigationButtonComponent={NavigationButton}\n                    openButtonComponent={OpenButton}\n                    navigatorText={navigatorText}\n                    rootRef={this.setRootRef}\n                    onVisibilityToggle={this.handleVisibilityToggle}\n                    onNavigate={navigateAction}\n                  />\n                  <Overlay\n                    visible={visible}\n                    target={this.target}\n                    onHide={this.handleHide}\n                  >\n                    <Calendar\n                      selectedDate={currentDate}\n                      firstDayOfWeek={firstDayOfWeek}\n                      getCells={monthCellsData}\n                      textComponent={CalendarText}\n                      navigationButtonComponent={CalendarNavigationButton}\n                      rowComponent={CalendarRow}\n                      cellComponent={CalendarCell}\n                      headerRowComponent={CalendarHeaderRow}\n                      headerCellComponent={CalendarHeaderCell}\n                      navigatorComponent={CalendarNavigator}\n                      onSelectedDateChange={calendarDateChanged}\n                      formatDate={formatDate}\n                    />\n                  </Overlay>\n                </React.Fragment>\n              );\n            }}\n          </TemplateConnector>\n          <TemplatePlaceholder />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Scheduler’s date navigator. */\nexport const DateNavigator: React.ComponentType<DateNavigatorProps> = DateNavigatorBase;\n","import * as React from 'react';\nimport {\n  Plugin,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  PluginComponents,\n} from '@devexpress/dx-react-core';\nimport { ViewSwitcherProps } from '../types/view-switcher';\n\nconst pluginDependencies = [\n  { name: 'Toolbar' },\n  { name: 'ViewState' },\n];\n\nclass ViewSwitcherBase extends React.PureComponent<ViewSwitcherProps> {\n  static components: PluginComponents = {\n    switcherComponent: 'Switcher',\n  };\n\n  render() {\n    const { switcherComponent: Switcher } = this.props;\n\n    return (\n      <Plugin\n        name=\"ViewSwitcher\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({\n              currentView,\n              availableViews,\n            }, {\n              setCurrentViewName,\n            }) => (\n              <Switcher\n                currentView={currentView}\n                availableViews={availableViews}\n                onChange={setCurrentViewName}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Scheduler's view switcher. */\nexport const ViewSwitcher: React.ComponentType<ViewSwitcherProps> = ViewSwitcherBase;\n","import * as React from 'react';\nimport {\n  Plugin, Template, TemplatePlaceholder, TemplateConnector, PluginComponents,\n} from '@devexpress/dx-react-core';\nimport { createClickHandlers, memoize } from '@devexpress/dx-core';\nimport {\n  POSITION_START, POSITION_END, VERTICAL_TYPE,\n  getVerticalRectByAppointmentData, calculateRectByDateAndGroupIntervals,\n  getAppointmentStyle, HORIZONTAL_TYPE, getHorizontalRectByAppointmentData,\n  isAllDayElementsMetaActual, isTimeTableElementsMetaActual,\n  HORIZONTAL_GROUP_ORIENTATION, VIEW_TYPES, getGroupsLastRow, Rect,\n} from '@devexpress/dx-scheduler-core';\n\nimport { AppointmentsProps } from '../types';\n\nconst AppointmentPlaceholder = params => <TemplatePlaceholder name=\"appointment\" params={params} />;\n\nconst renderAppointments = rects => rects.map(({\n  dataItem, type: rectType, fromPrev, toNext,\n  durationType, resources, key, ...geometry\n}) => (\n  <AppointmentPlaceholder\n    key={key}\n    type={rectType}\n    data={dataItem}\n    fromPrev={fromPrev}\n    toNext={toNext}\n    durationType={durationType}\n    resources={resources}\n    style={getAppointmentStyle(geometry as Rect)}\n  />\n));\n\nconst pluginDependencies = [\n  { name: 'DayView', optional: true },\n  { name: 'WeekView', optional: true },\n  { name: 'MonthView', optional: true },\n];\n\nclass AppointmentsBase extends React.PureComponent<AppointmentsProps> {\n  static components: PluginComponents = {\n    splitIndicatorComponent: 'SplitIndicator',\n    containerComponent: 'Container',\n    appointmentComponent: 'Appointment',\n    appointmentContentComponent: 'AppointmentContent',\n    recurringIconComponent: 'RecurringIcon',\n  };\n  static defaultProps: Partial<AppointmentsProps> = {\n    placeAppointmentsNextToEachOther: false,\n  };\n\n  updateTimeTableAppointments = memoize((\n    timeTableAppointments, viewCellsData, timeTableElementsMeta, currentView,\n    startViewDate, endViewDate, cellDuration, groups, getGroupOrientation, groupByDate,\n    placeAppointmentsNextToEachOther,\n  ) => {\n    if (!isTimeTableElementsMetaActual(viewCellsData, timeTableElementsMeta)) return null;\n\n    const groupOrientation = getGroupOrientation\n      ? getGroupOrientation(currentView?.name)\n      : HORIZONTAL_GROUP_ORIENTATION;\n    const groupCount = groups ? getGroupsLastRow(groups).length : 1;\n\n    let appointmentType = { growDirection: VERTICAL_TYPE, multiline: false };\n    let getRects = getVerticalRectByAppointmentData as any;\n    if (currentView.type === VIEW_TYPES.MONTH) {\n      appointmentType = { growDirection: HORIZONTAL_TYPE, multiline: true };\n      getRects = getHorizontalRectByAppointmentData;\n    }\n\n    return renderAppointments(calculateRectByDateAndGroupIntervals(\n      appointmentType, timeTableAppointments, getRects,\n      {\n        startViewDate, endViewDate, cellDuration,\n        viewCellsData, cellElementsMeta: timeTableElementsMeta,\n        placeAppointmentsNextToEachOther,\n      },\n      {\n        groupOrientation,\n        groupedByDate: groupByDate?.(currentView?.name),\n        groupCount,\n      },\n    ));\n  });\n\n  updateAllDayAppointments = memoize((\n    allDayAppointments, viewCellsData, allDayElementsMeta, currentView,\n    startViewDate, endViewDate, groups, getGroupOrientation, groupByDate,\n  ) => {\n    const groupOrientation = getGroupOrientation\n      ? getGroupOrientation(currentView?.name)\n      : HORIZONTAL_GROUP_ORIENTATION;\n    const groupCount = groups ? getGroupsLastRow(groups).length : 1;\n\n    if (!isAllDayElementsMetaActual(\n      viewCellsData, allDayElementsMeta, groupOrientation, groupCount,\n    )) {\n      return null;\n    }\n\n    return renderAppointments(calculateRectByDateAndGroupIntervals(\n      { growDirection: HORIZONTAL_TYPE,  multiline: false },\n      allDayAppointments,\n      getHorizontalRectByAppointmentData,\n      {\n        startViewDate, endViewDate,\n        viewCellsData, cellElementsMeta: allDayElementsMeta,\n      },\n      {\n        groupOrientation,\n        groupedByDate: groupByDate?.(currentView?.name),\n        groupCount,\n      },\n    ));\n  });\n\n  render() {\n    const {\n      splitIndicatorComponent: SplitIndicator,\n      appointmentComponent: Appointment,\n      appointmentContentComponent: AppointmentContent,\n      containerComponent: Container,\n      recurringIconComponent,\n      placeAppointmentsNextToEachOther,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"Appointments\"\n        dependencies={pluginDependencies}\n      >\n        <Template\n          name=\"timeTableAppointmentLayer\"\n        >\n          <TemplateConnector>\n            {({\n              timeTableAppointments, viewCellsData, timeTableElementsMeta, currentView,\n              startViewDate, endViewDate, cellDuration, groupOrientation,  groups, groupByDate,\n            }) => this.updateTimeTableAppointments(\n              timeTableAppointments, viewCellsData, timeTableElementsMeta, currentView,\n              startViewDate, endViewDate, cellDuration, groups, groupOrientation, groupByDate,\n              placeAppointmentsNextToEachOther,\n            )}\n          </TemplateConnector>\n        </Template>\n        <Template\n          name=\"allDayAppointmentLayer\"\n        >\n          <TemplateConnector>\n            {({\n              allDayAppointments, viewCellsData, allDayElementsMeta,\n              startViewDate, endViewDate, groupOrientation, currentView, groups, groupByDate,\n            }) => this.updateAllDayAppointments(\n              allDayAppointments, viewCellsData, allDayElementsMeta, currentView,\n              startViewDate, endViewDate, groups, groupOrientation, groupByDate,\n            )}\n          </TemplateConnector>\n        </Template>\n        <Template\n          name=\"appointment\"\n        >\n          {({ style, ...params }: any) => (\n            <TemplateConnector>\n              {({ formatDate }) => (\n                <Container style={style}>\n                  <TemplatePlaceholder\n                    name=\"appointmentTop\"\n                    params={{ data: params.data, type: params.type, slice: params.fromPrev }}\n                  />\n                  <TemplatePlaceholder\n                    name=\"appointmentContent\"\n                    params={{ ...params, formatDate }}\n                  />\n                  <TemplatePlaceholder\n                    name=\"appointmentBottom\"\n                    params={{ data: params.data, type: params.type, slice: params.toNext }}\n                  />\n                </Container>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n\n        <Template name=\"appointmentContent\">\n          {({\n            onClick, onDoubleClick, formatDate,\n            data, type, fromPrev, toNext,\n            durationType, resources,\n            ...restParams\n          }: any) => (\n            <Appointment\n              data={data}\n              resources={resources}\n              {...createClickHandlers(onClick, onDoubleClick)}\n              {...restParams}\n            >\n              {fromPrev && <SplitIndicator position={POSITION_START} appointmentType={type} />}\n              <AppointmentContent\n                data={data}\n                type={type}\n                durationType={durationType}\n                recurringIconComponent={recurringIconComponent}\n                formatDate={formatDate}\n                resources={resources}\n              />\n              {toNext && <SplitIndicator position={POSITION_END} appointmentType={type} />}\n            </Appointment>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders appointments. */\nexport const Appointments: React.ComponentType<AppointmentsProps> = AppointmentsBase;\n","import * as React from 'react';\nimport { getMessagesFormatter, memoize } from '@devexpress/dx-core';\nimport {\n  Getter,\n  Plugin,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  PluginComponents,\n} from '@devexpress/dx-react-core';\nimport {\n  allDayCells, calculateAllDayDateIntervals,\n  VERTICAL_GROUP_ORIENTATION, VIEW_TYPES,\n} from '@devexpress/dx-scheduler-core';\nimport moment from 'moment';\n\nimport { AllDayPanelProps, AllDayPanelState } from '../types';\n\nconst isMonthView = currentView => currentView.type === VIEW_TYPES.MONTH;\nconst isVerticalGrouping = (\n  currentView, groupOrientation,\n) => groupOrientation?.(currentView.name) === VERTICAL_GROUP_ORIENTATION;\n\nconst pluginDependencies = [\n  { name: 'DayView', optional: true },\n  { name: 'WeekView', optional: true },\n];\nconst defaultMessages = {\n  allDay: 'All Day',\n};\nconst AllDayAppointmentLayerPlaceholder = () =>\n  <TemplatePlaceholder name=\"allDayAppointmentLayer\" />;\nconst AllDayPanelPlaceholder = params => <TemplatePlaceholder name=\"allDayPanel\" params={params} />;\nconst CellPlaceholder = params => <TemplatePlaceholder name=\"allDayPanelCell\" params={params} />;\nconst AllDayTitlePlaceholder = params => <TemplatePlaceholder name=\"allDayTitle\" params={params} />;\n\nclass AllDayPanelBase extends React.PureComponent<AllDayPanelProps, AllDayPanelState> {\n  state: AllDayPanelState = {\n    elementsMeta: {},\n    previousCell: null,\n    // The key has to be generated every time the Cell component is updated to rerender the Layout\n    // and, consequently, update allDayElementsMeta\n    layoutKey: 0,\n  };\n  static defaultProps: Partial<AllDayPanelProps> = {\n    messages: {},\n  };\n  static components: PluginComponents = {\n    appointmentLayerComponent: 'AppointmentLayer',\n    layoutComponent: 'Layout',\n    layoutContainerComponent: 'LayoutContainer',\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    titleCellComponent: 'TitleCell',\n    containerComponent: 'Container',\n  };\n\n  static getDerivedStateFromProps(\n    props: AllDayPanelProps, state: AllDayPanelState,\n  ): AllDayPanelState | null {\n    if (props.cellComponent !== state.previousCell) {\n      return {\n        ...state,\n        previousCell: props.cellComponent,\n        layoutKey: Math.random(),\n      };\n    }\n    return null;\n  }\n\n  allDayCellsDataComputed = memoize(({ viewCellsData }) => allDayCells(viewCellsData));\n\n  updateCellElementsMeta = memoize((cellElementsMeta) => {\n    this.setState({ elementsMeta: cellElementsMeta });\n  });\n\n  allDayAppointmentsComputed = memoize(({\n    appointments, startViewDate, endViewDate, excludedDays,\n  }) => {\n    const allDayLeftBound = moment(startViewDate).hours(0).minutes(0).toDate();\n    const allDayRightBound = moment(endViewDate).hours(23).minutes(59).toDate();\n    return calculateAllDayDateIntervals(\n      appointments, allDayLeftBound, allDayRightBound, excludedDays,\n    );\n  });\n\n  allDayPanelExistsComputed = memoize(({\n    currentView,\n  }) => !isMonthView(currentView));\n\n  getMessageFormatter = memoize((messages, allDayPanelDefaultMessages) =>\n    getMessagesFormatter({ ...allDayPanelDefaultMessages, ...messages }));\n\n  render() {\n    const {\n      appointmentLayerComponent: AppointmentLayer,\n      layoutComponent: Layout,\n      cellComponent: Cell,\n      rowComponent,\n      titleCellComponent: TitleCell,\n      containerComponent: Container,\n      messages,\n    } = this.props;\n    const { elementsMeta, layoutKey } = this.state;\n    const getMessage = this.getMessageFormatter(messages, defaultMessages);\n\n    return (\n      <Plugin\n        name=\"AllDayPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"allDayElementsMeta\" value={elementsMeta} />\n        <Getter name=\"allDayCellsData\" computed={this.allDayCellsDataComputed} />\n        <Getter name=\"allDayPanelExists\" computed={this.allDayPanelExistsComputed} />\n        <Getter\n          name=\"allDayAppointments\"\n          computed={this.allDayAppointmentsComputed}\n        />\n\n        <Template name=\"timeTable\">\n          {(params: any) => (\n            <TemplateConnector>\n              {({ currentView, groupOrientation, allDayCellsData }) => {\n                if (isMonthView(currentView)\n                  || !isVerticalGrouping(currentView, groupOrientation)) {\n                  return <TemplatePlaceholder params={...params} />;\n                }\n                return (\n                  <>\n                    <TemplatePlaceholder\n                      params={{\n                        ...params,\n                        allDayCellComponent: CellPlaceholder,\n                        allDayRowComponent: rowComponent,\n                        allDayCellsData,\n                      }}\n                    />\n                    <AppointmentLayer>\n                      <AllDayAppointmentLayerPlaceholder />\n                    </AppointmentLayer>\n                  </>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n\n        <Template name=\"dayScaleEmptyCell\">\n          <TemplateConnector>\n            {({ currentView, groupOrientation }) => {\n              if (isMonthView(currentView) || isVerticalGrouping(currentView, groupOrientation)) {\n                return <TemplatePlaceholder />;\n              }\n\n              return (\n                <AllDayTitlePlaceholder />\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n\n        <Template name=\"timeScale\">\n          {(params: any) => (\n            <TemplateConnector>\n              {({ currentView, groupOrientation }) => {\n                if (isMonthView(currentView)\n                  || !isVerticalGrouping(currentView, groupOrientation)) {\n                  return <TemplatePlaceholder params={...params} />;\n                }\n\n                return (\n                  <TemplatePlaceholder\n                    params={{\n                      ...params,\n                      allDayTitleComponent: AllDayTitlePlaceholder,\n                      showAllDayTitle: true,\n                    }}\n                  />\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n\n        <Template name=\"dayScale\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ currentView, groupOrientation }) => {\n              if (isMonthView(currentView) || isVerticalGrouping(currentView, groupOrientation)) {\n                return null;\n              }\n\n              return (\n                <Container>\n                  <AllDayPanelPlaceholder />\n                </Container>\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n\n        <Template name=\"allDayPanel\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({\n              currentView, formatDate, allDayCellsData,\n            }) => {\n              if (currentView.type === VIEW_TYPES.MONTH) return null;\n\n              return (\n                <React.Fragment>\n                  <Layout\n                    cellComponent={CellPlaceholder}\n                    rowComponent={rowComponent}\n                    cellsData={allDayCellsData[0]}\n                    setCellElementsMeta={this.updateCellElementsMeta}\n                    formatDate={formatDate}\n                    key={layoutKey}\n                  />\n                  <AppointmentLayer>\n                    <AllDayAppointmentLayerPlaceholder />\n                  </AppointmentLayer>\n                </React.Fragment>\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n\n        <Template name=\"allDayTitle\">\n          {(params: any) => <TitleCell getMessage={getMessage} {...params}/>}\n        </Template>\n        <Template name=\"allDayPanelCell\">\n          {(params: any) => <Cell {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the All Day Panel. */\nexport const AllDayPanel: React.ComponentType<AllDayPanelProps> = AllDayPanelBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Action,\n  Plugin,\n  createStateHelper,\n  StateHelper,\n  ActionFn,\n} from '@devexpress/dx-react-core';\nimport {\n  changeCurrentDate,\n  setCurrentViewName,\n  ChangeCurrentDatePayload,\n} from '@devexpress/dx-scheduler-core';\nimport { ViewStateProps, ViewStateState } from '../types';\nimport { memoize } from '@devexpress/dx-core';\n\nclass ViewStateBase extends React.PureComponent<ViewStateProps, ViewStateState> {\n  changeCurrentDate: ActionFn<ChangeCurrentDatePayload>;\n  setCurrentViewName: ActionFn<string>;\n\n  static defaultProps: Partial<ViewStateProps> = {\n    defaultCurrentDate: new Date(),\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentDate: props.currentDate || props.defaultCurrentDate,\n      currentViewName: props.currentViewName || props.defaultCurrentViewName,\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        currentDate: () => {\n          const { onCurrentDateChange } = this.props;\n          return onCurrentDateChange;\n        },\n        currentViewName: () => {\n          const { onCurrentViewNameChange } = this.props;\n          return onCurrentViewNameChange;\n        },\n      },\n    );\n\n    this.changeCurrentDate = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'currentDate', changeCurrentDate);\n    this.setCurrentViewName = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'currentViewName', setCurrentViewName);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      currentDate = prevState.currentDate,\n      currentViewName = prevState.currentViewName,\n    } = nextProps;\n\n    return {\n      currentDate,\n      currentViewName,\n    };\n  }\n\n  getCurrentViewComputed =  memoize(currentViewName => () => (\n    currentViewName\n    ? { name: currentViewName }\n    : undefined\n  ));\n\n  render() {\n    const { currentDate, currentViewName: stateCurrentViewName } = this.state;\n    return (\n      <Plugin\n        name=\"ViewState\"\n      >\n        <Getter name=\"currentDate\" value={currentDate} />\n        <Getter name=\"currentView\" computed={this.getCurrentViewComputed(stateCurrentViewName)} />\n        <Action name=\"changeCurrentDate\" action={this.changeCurrentDate} />\n        <Action name=\"setCurrentViewName\" action={this.setCurrentViewName} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the view state. It specifies the current date and the displayed view. */\nexport const ViewState: React.ComponentType<ViewStateProps> = ViewStateBase;\n","import * as React from 'react';\nimport {\n  Action, Plugin, Getter, createStateHelper, StateHelper, ComputedFn, ActionFn,\n} from '@devexpress/dx-react-core';\nimport {\n  addAppointment,\n  cancelAddedAppointment,\n  startEditAppointment,\n  stopEditAppointment,\n  changeAppointment,\n  cancelChanges,\n  changedAppointmentById,\n  RECURRENCE_EDIT_SCOPE,\n  preCommitChanges as preCommitChangesBase,\n} from '@devexpress/dx-scheduler-core';\nimport { EditingStateProps, EditingStateState } from '../types';\n\nclass EditingStateBase extends React.PureComponent<EditingStateProps, EditingStateState> {\n  startEditAppointment: ComputedFn;\n  stopEditAppointment: (payload?: any) => void;\n  changeAppointment: ComputedFn;\n  cancelChangedAppointment: (payload?: any) => void;\n  commitChangedAppointment: ActionFn<any>;\n  addAppointment: ComputedFn;\n  changeAddedAppointment: ComputedFn;\n  cancelAddedAppointment: (payload?: any) => void;\n  commitAddedAppointment: ComputedFn;\n  commitDeletedAppointment: ActionFn<any>;\n\n  static defaultProps: Partial<EditingStateProps> = {\n    defaultEditingAppointment: undefined,\n    defaultAppointmentChanges: {},\n    defaultAddedAppointment: {},\n    preCommitChanges: preCommitChangesBase,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editingAppointment: props.editingAppointment || props.defaultEditingAppointment,\n      addedAppointment: props.addedAppointment || props.defaultAddedAppointment,\n      appointmentChanges: props.appointmentChanges || props.defaultAppointmentChanges,\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        editingAppointment: () => {\n          const { onEditingAppointmentChange } = this.props;\n          return onEditingAppointmentChange;\n        },\n        addedAppointment: () => {\n          const { onAddedAppointmentChange } = this.props;\n          return onAddedAppointmentChange;\n        },\n        appointmentChanges: () => {\n          const { onAppointmentChangesChange } = this.props;\n          return onAppointmentChangesChange;\n        },\n      },\n    );\n\n    this.startEditAppointment = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingAppointment', startEditAppointment);\n    this.stopEditAppointment = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingAppointment', stopEditAppointment);\n\n    this.changeAppointment = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'appointmentChanges', changeAppointment);\n    this.cancelChangedAppointment = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'appointmentChanges', cancelChanges);\n\n    this.commitChangedAppointment = (type = RECURRENCE_EDIT_SCOPE.CURRENT) => {\n      const { appointmentChanges, editingAppointment } = this.state;\n      const { onCommitChanges, preCommitChanges  } = this.props;\n\n      if (!editingAppointment) return;\n      const changes =  !editingAppointment.rRule\n        ? { changed: changedAppointmentById(appointmentChanges, editingAppointment.id!) }\n        : preCommitChanges!(appointmentChanges, editingAppointment, type);\n\n      onCommitChanges(changes);\n      this.cancelChangedAppointment();\n      this.stopEditAppointment();\n    };\n\n    this.addAppointment = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedAppointment', addAppointment);\n    this.changeAddedAppointment = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedAppointment', changeAppointment);\n    this.cancelAddedAppointment = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedAppointment', cancelAddedAppointment);\n    this.commitAddedAppointment = () => {\n      const { onCommitChanges } = this.props;\n      const { addedAppointment: stateAddedAppointment } = this.state;\n      onCommitChanges({\n        added: stateAddedAppointment,\n      });\n    };\n\n    this.commitDeletedAppointment = ({ deletedAppointmentData, type = 'current' }) => {\n      const { onCommitChanges, preCommitChanges } = this.props;\n\n      const changes = deletedAppointmentData.rRule\n        ? preCommitChanges!(null, deletedAppointmentData, type)\n        : { deleted: deletedAppointmentData.id };\n      onCommitChanges(changes);\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      editingAppointment = prevState.editingAppointment,\n      appointmentChanges = prevState.appointmentChanges,\n      addedAppointment = prevState.addedAppointment,\n    } = nextProps;\n\n    return {\n      editingAppointment,\n      appointmentChanges,\n      addedAppointment,\n    };\n  }\n\n  render() {\n    const { addedAppointment, editingAppointment, appointmentChanges } = this.state;\n\n    return (\n      <Plugin\n        name=\"EditingState\"\n      >\n        <Getter name=\"editingAppointment\" value={editingAppointment} />\n        <Action name=\"startEditAppointment\" action={this.startEditAppointment} />\n        <Action name=\"stopEditAppointment\" action={this.stopEditAppointment} />\n\n        <Getter name=\"appointmentChanges\" value={appointmentChanges} />\n        <Action name=\"changeAppointment\" action={this.changeAppointment} />\n        <Action name=\"cancelChangedAppointment\" action={this.cancelChangedAppointment} />\n        <Action name=\"commitChangedAppointment\" action={this.commitChangedAppointment} />\n\n        <Getter name=\"addedAppointment\" value={addedAppointment} />\n        <Action name=\"addAppointment\" action={this.addAppointment} />\n        <Action name=\"changeAddedAppointment\" action={this.changeAddedAppointment} />\n        <Action name=\"cancelAddedAppointment\" action={this.cancelAddedAppointment} />\n        <Action name=\"commitAddedAppointment\" action={this.commitAddedAppointment} />\n\n        <Action name=\"commitDeletedAppointment\" action={this.commitDeletedAppointment} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the scheduler appointment editing state. */\nexport const EditingState: React.ComponentType<EditingStateProps> = EditingStateBase;\n","import * as React from 'react';\nimport {\n  Plugin,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  createStateHelper,\n  StateHelper,\n  PluginComponents,\n  Action,\n} from '@devexpress/dx-react-core';\nimport {\n  OPEN_COMMAND_BUTTON,\n  CLOSE_COMMAND_BUTTON,\n  DELETE_COMMAND_BUTTON,\n  setAppointmentMeta,\n  AppointmentMeta,\n  TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY,\n  getAppointmentResources,\n} from '@devexpress/dx-scheduler-core';\n\nimport { AppointmentTooltipProps, AppointmentTooltipState, Appointments } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Appointments' },\n  { name: 'EditingState', optional: true },\n  { name: 'EditRecurrenceMenu', optional: true },\n  { name: 'IntegratedEditing', optional: true },\n];\n\nconst commandButtonIds = {\n  open: OPEN_COMMAND_BUTTON,\n  close: CLOSE_COMMAND_BUTTON,\n  delete: DELETE_COMMAND_BUTTON,\n};\n\nclass AppointmentTooltipBase extends React.PureComponent<\n  AppointmentTooltipProps, AppointmentTooltipState\n> {\n  toggleVisibility: (payload?: any) => void;\n  setAppointmentMeta: (appointmentMeta: AppointmentMeta) => void;\n  onAppointmentClick: (appointmentMeta: AppointmentMeta) => void;\n\n  static defaultProps: Partial<AppointmentTooltipProps> = {\n    showOpenButton: false,\n    showDeleteButton: false,\n    showCloseButton: false,\n  };\n  static components: PluginComponents = {\n    layoutComponent: 'Layout',\n    headerComponent: 'Header',\n    contentComponent: 'Content',\n    commandButtonComponent: 'CommandButton',\n    recurringIconComponent: 'RecurringIcon',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: props.visible,\n      appointmentMeta: props.appointmentMeta,\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        visible: () => {\n          const { onVisibilityChange } = this.props;\n          return onVisibilityChange;\n        },\n        appointmentMeta: () => {\n          const { onAppointmentMetaChange } = this.props;\n          return onAppointmentMetaChange;\n        },\n      },\n    );\n\n    const toggleVisibility = () => {\n      const { visible: isOpen } = this.state;\n      return !isOpen;\n    };\n    this.toggleVisibility = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'visible', toggleVisibility);\n    this.setAppointmentMeta = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'appointmentMeta', setAppointmentMeta);\n    this.onAppointmentClick = ({ target, data }) => {\n      this.setAppointmentMeta({ target, data });\n      this.toggleVisibility();\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      visible = prevState.visible,\n      appointmentMeta = prevState.appointmentMeta,\n    } = nextProps;\n    return {\n      appointmentMeta,\n      visible,\n    };\n  }\n\n  render() {\n    const {\n      showOpenButton,\n      showDeleteButton,\n      showCloseButton,\n      layoutComponent: Layout,\n      headerComponent,\n      contentComponent,\n      commandButtonComponent,\n      recurringIconComponent,\n    } = this.props;\n    const { visible, appointmentMeta } = this.state;\n\n    return (\n      <Plugin\n        name=\"AppointmentTooltip\"\n        dependencies={pluginDependencies}\n      >\n        <Action name={TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY} action={this.toggleVisibility} />\n\n        <Template name=\"timeTable\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({\n              formatDate, resources, plainResources,\n            }, {\n              finishDeleteAppointment, openDeleteConfirmationDialog,\n            }) => {\n              const onDeleteButtonClick = () => {\n                if (openDeleteConfirmationDialog) {\n                  openDeleteConfirmationDialog({\n                    hideActionName: TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY,\n                    appointmentData: appointmentMeta.data,\n                  });\n                } else {\n                  this.toggleVisibility();\n                  finishDeleteAppointment(appointmentMeta.data);\n                }\n              };\n              return (\n                <TemplatePlaceholder\n                  name=\"tooltip\"\n                  params={{\n                    commandButtonComponent,\n                    recurringIconComponent,\n                    showOpenButton,\n                    showDeleteButton,\n                    showCloseButton,\n                    headerComponent,\n                    contentComponent,\n                    appointmentMeta,\n                    appointmentResources: appointmentMeta ? getAppointmentResources(\n                      appointmentMeta.data as any, resources, plainResources,\n                    ) : [],\n                    visible,\n                    onHide: this.toggleVisibility,\n                    commandButtonIds,\n                    ...finishDeleteAppointment && {\n                      onDeleteButtonClick,\n                    },\n                    formatDate,\n                  }}\n                />\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n\n        <Template name=\"tooltip\">\n          {(params: any) => <Layout {...params} />}\n        </Template>\n\n        <Template name=\"appointment\">\n          {(params: Appointments.AppointmentProps) => (\n            <TemplatePlaceholder\n              params={{\n                ...params,\n                onClick: ({ target, data }) =>\n                 this.onAppointmentClick({ target, data }),\n              }}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable: max-line-length\n/** The AppointmentTooltip plugin allows you to display information about an appointment in a tooltip. */\nexport const AppointmentTooltip: React.ComponentType<AppointmentTooltipProps> = AppointmentTooltipBase;\n","import * as React from 'react';\nimport { getMessagesFormatter, memoize } from '@devexpress/dx-core';\nimport {\n  Plugin,\n  Template,\n  createStateHelper,\n  StateHelper,\n  TemplateConnector,\n  TemplatePlaceholder,\n  PluginComponents,\n  Action,\n} from '@devexpress/dx-react-core';\nimport {\n  setAppointmentData,\n  isAllDayCell,\n  callActionIfExists,\n  AppointmentModel,\n  TOGGLE_APPOINTMENT_FORM_VISIBILITY,\n  getAppointmentResources,\n  ValidResourceInstance,\n  checkMultipleResourceFields,\n} from '@devexpress/dx-scheduler-core';\n\nimport {\n  AppointmentFormProps, AppointmentFormState, AppointmentTooltip, Appointments,\n} from '../types';\n\nconst addDoubleClickToCell = (\n  title, startDate, endDate, groupingInfo, resources,\n  allDay, openFormHandler, addAppointment, params,\n) => {\n  const resourceFields = !!groupingInfo\n    ? groupingInfo.reduce((acc, currentGroup) => (\n      { ...acc, [currentGroup.fieldName]: currentGroup.id }\n    ), {}) : {};\n  const validResourceFields = resources\n    ? checkMultipleResourceFields(resourceFields, resources)\n    : resourceFields;\n\n  const newAppointmentData = {\n    title,\n    startDate,\n    endDate,\n    allDay,\n    ...validResourceFields,\n  };\n\n  return (\n    <TemplatePlaceholder\n      params={{\n        ...params,\n        onDoubleClick: () => {\n          openFormHandler(newAppointmentData);\n          callActionIfExists(addAppointment,\n            { appointmentData: newAppointmentData });\n        },\n      }}\n    />\n  );\n};\n\nconst defaultMessages = {\n  allDayLabel: 'All Day',\n  titleLabel: 'Title',\n  commitCommand: 'Save',\n  detailsLabel: 'Details',\n  moreInformationLabel: 'More Information',\n  repeatLabel: 'Repeat',\n  notesLabel: 'Notes',\n  never: 'Never',\n  daily: 'Daily',\n  weekly: 'Weekly',\n  monthly: 'Monthly',\n  yearly: 'Yearly',\n  repeatEveryLabel: 'Repeat every',\n  daysLabel: 'day(s)',\n  endRepeatLabel: 'End repeat',\n  onLabel: 'On',\n  afterLabel: 'After',\n  occurrencesLabel: 'occurrence(s)',\n  weeksOnLabel: 'week(s) on:',\n  monthsLabel: 'month(s)',\n  ofEveryMonthLabel: 'of every month',\n  theLabel: 'The',\n  firstLabel: 'First',\n  secondLabel: 'Second',\n  thirdLabel: 'Third',\n  fourthLabel: 'Fourth',\n  lastLabel: 'Last',\n  yearsLabel: 'year(s)',\n  ofLabel: 'of ',\n  everyLabel: 'Every',\n};\n\nconst CommandLayoutPlaceholder = () => <TemplatePlaceholder name=\"commandLayout\" />;\nconst BasicLayoutPlaceholder = () => <TemplatePlaceholder name=\"basicLayout\" />;\nconst RecurrenceLayoutPlaceholder = () => <TemplatePlaceholder name=\"recurrenceLayout\" />;\n\nconst pluginDependencies = [\n  { name: 'EditingState', optional: true },\n  { name: 'Appointments', optional: true },\n  { name: 'AppointmentTooltip', optional: true },\n  { name: 'EditRecurrenceMenu', optional: true },\n  { name: 'IntegratedEditing', optional: true },\n];\n\nconst prepareChanges = (\n  appointmentData, editingAppointment,\n  addedAppointment, appointmentChanges,\n  resources, plainResources,\n) => {\n  const isNew = !editingAppointment;\n  const changedAppointment = {\n    ...appointmentData,\n    ...appointmentChanges,\n    ...isNew && addedAppointment,\n  };\n  const appointmentResources = getAppointmentResources(\n    changedAppointment, resources, plainResources,\n  );\n  const isFormEdited = isNew || Object.getOwnPropertyNames(appointmentChanges).length !== 0;\n  return { changedAppointment, appointmentResources, isNew, isFormEdited };\n};\n\nconst isFormFullSize = (\n  isFormVisible, changedAppointmentRRule, previousAppointmentRRule,\n) => !!changedAppointmentRRule || (!isFormVisible && !!previousAppointmentRRule);\n\nclass AppointmentFormBase extends React.PureComponent<AppointmentFormProps, AppointmentFormState> {\n  toggleVisibility: (payload?: any) => void;\n  setAppointmentData: (payload: any) => void;\n  openFormHandler: (payload: AppointmentModel) => void;\n  container = React.createRef();\n\n  static defaultProps: Partial<AppointmentFormProps> = {\n    messages: {},\n    readOnly: false,\n    onVisibilityChange: () => undefined,\n    onAppointmentDataChange: () => undefined,\n  };\n  static components: PluginComponents = {\n    overlayComponent: 'Overlay',\n    layoutComponent: 'Layout',\n    commandLayoutComponent: 'CommandLayout',\n    commandButtonComponent: 'CommandButton',\n    basicLayoutComponent: 'BasicLayout',\n    textEditorComponent: 'TextEditor',\n    labelComponent: 'Label',\n    dateEditorComponent: 'DateEditor',\n    booleanEditorComponent: 'BooleanEditor',\n    selectComponent: 'Select',\n    recurrenceLayoutComponent: 'RecurrenceLayout',\n    radioGroupComponent: 'RadioGroup',\n    weeklyRecurrenceSelectorComponent: 'WeeklyRecurrenceSelector',\n    resourceEditorComponent: 'ResourceEditor',\n    containerComponent: 'Container',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: props.visible,\n      appointmentData: props.appointmentData || {},\n      previousAppointment: props.appointmentData || {},\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        visible: () => {\n          const { onVisibilityChange } = this.props;\n          return onVisibilityChange;\n        },\n        appointmentData: () => {\n          const { onAppointmentDataChange } = this.props;\n          return onAppointmentDataChange;\n        },\n      },\n    );\n\n    const toggleVisibility = () => {\n      const { visible: isOpen } = this.state;\n      return !isOpen;\n    };\n    this.toggleVisibility = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'visible', toggleVisibility);\n    this.setAppointmentData = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'appointmentData', setAppointmentData);\n\n    this.openFormHandler = (appointmentData) => {\n      this.setAppointmentData({ appointmentData });\n      this.toggleVisibility();\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      visible = prevState.visible,\n      appointmentData = prevState.appointmentData,\n    } = nextProps;\n    return {\n      appointmentData,\n      visible,\n    };\n  }\n\n  commitChanges = memoize((\n    finishCommitAppointment, commitAddedAppointment, isNew, changedAppointment,\n  ) => () =>  {\n    this.toggleVisibility();\n    if (isNew) {\n      callActionIfExists(commitAddedAppointment, changedAppointment);\n    } else if (finishCommitAppointment) {\n      finishCommitAppointment();\n    }\n    this.setState({ previousAppointment: changedAppointment });\n  });\n\n  cancelChanges = memoize((\n    openCancelConfirmationDialog, isNew, stopEditAppointment, appointmentChanges,\n    changedAppointment, cancelAddedAppointment, cancelChangedAppointment,\n  ) => () => {\n    if (openCancelConfirmationDialog && Object.keys(appointmentChanges).length !== 0) {\n      openCancelConfirmationDialog(TOGGLE_APPOINTMENT_FORM_VISIBILITY);\n    } else {\n      if (isNew) {\n        callActionIfExists(cancelAddedAppointment, appointmentChanges);\n      } else {\n        callActionIfExists(stopEditAppointment, appointmentChanges);\n        callActionIfExists(cancelChangedAppointment, appointmentChanges);\n      }\n      this.toggleVisibility();\n    }\n    this.setState({ previousAppointment: changedAppointment });\n  });\n\n  deleteAppointment = memoize((\n    finishDeleteAppointment, appointmentData, openDeleteConfirmationDialog,\n    changedAppointment, cancelAddedAppointment, cancelChangedAppointment,\n    stopEditAppointment, isNew,\n  ) => () => {\n    if (openDeleteConfirmationDialog) {\n      openDeleteConfirmationDialog({\n        hideActionName: TOGGLE_APPOINTMENT_FORM_VISIBILITY, appointmentData: changedAppointment,\n      });\n    } else {\n      callActionIfExists(finishDeleteAppointment, appointmentData);\n      if (isNew) {\n        callActionIfExists(cancelAddedAppointment, appointmentData);\n      } else {\n        callActionIfExists(cancelChangedAppointment, appointmentData);\n        callActionIfExists(stopEditAppointment, appointmentData);\n      }\n      this.toggleVisibility();\n    }\n    this.setState({ previousAppointment: changedAppointment });\n  });\n\n  changeAppointmentField = memoize((isNew, changeAddedAppointment, changeAppointment) =>\n    (change) => {\n      if (change && change.rRule) {\n        this.setState({ previousAppointment: {\n          ...this.state.previousAppointment, rRule: change.rRule,\n        }});\n      }\n      if (isNew) {\n        callActionIfExists(changeAddedAppointment, { change });\n      } else {\n        callActionIfExists(changeAppointment, { change });\n      }\n    },\n  );\n\n  getMessage = memoize((menuMessages, messages) =>\n    getMessagesFormatter({ ...menuMessages, ...messages }));\n\n  render() {\n    const {\n      containerComponent: Container,\n      overlayComponent: Overlay,\n      layoutComponent: Layout,\n      commandLayoutComponent: CommandLayout,\n      basicLayoutComponent: BasicLayout,\n      recurrenceLayoutComponent: RecurrenceLayout,\n      commandButtonComponent,\n      textEditorComponent,\n      labelComponent,\n      dateEditorComponent,\n      booleanEditorComponent,\n      selectComponent,\n      radioGroupComponent,\n      weeklyRecurrenceSelectorComponent,\n      resourceEditorComponent,\n      readOnly,\n      messages,\n    } = this.props;\n    const { visible, appointmentData, previousAppointment } = this.state;\n    const getMessage = this.getMessage(defaultMessages, messages);\n    return (\n      <Plugin\n        name=\"AppointmentForm\"\n        dependencies={pluginDependencies}\n      >\n        <Action name={TOGGLE_APPOINTMENT_FORM_VISIBILITY} action={this.toggleVisibility} />\n\n        <Template name=\"schedulerRoot\">\n          <TemplateConnector>\n            {({\n              editingAppointment,\n              addedAppointment,\n              appointmentChanges,\n\n              resources,\n              plainResources,\n            }, {\n              openCancelConfirmationDialog,\n\n              stopEditAppointment,\n              cancelAddedAppointment,\n              cancelChangedAppointment,\n            }) => {\n              const { changedAppointment, isNew } = prepareChanges(\n                appointmentData, editingAppointment,\n                addedAppointment, appointmentChanges,\n                resources, plainResources,\n              );\n              const fullSize = isFormFullSize(\n                visible, changedAppointment.rRule, previousAppointment.rRule,\n              );\n              const onHideAction = () => visible && this.cancelChanges(\n                openCancelConfirmationDialog, isNew, stopEditAppointment,\n                { ...appointmentChanges, ...addedAppointment }, changedAppointment,\n                cancelAddedAppointment, cancelChangedAppointment,\n              )();\n\n              return (\n                <React.Fragment>\n                  <Container ref={this.container} />\n                  <Overlay\n                    visible={visible}\n                    onHide={onHideAction}\n                    fullSize={fullSize}\n                    target={this.container}\n                  >\n                    <Layout\n                      basicLayoutComponent={BasicLayoutPlaceholder}\n                      commandLayoutComponent={CommandLayoutPlaceholder}\n                      recurrenceLayoutComponent={RecurrenceLayoutPlaceholder}\n                      isRecurrence={fullSize}\n                    />\n                  </Overlay>\n                  <TemplatePlaceholder />\n                </React.Fragment>);\n            }}\n          </TemplateConnector>\n        </Template>\n        <Template name=\"commandLayout\">\n          <TemplateConnector>\n            {({\n              editingAppointment,\n              addedAppointment,\n              appointmentChanges,\n\n              resources,\n              plainResources,\n            }, {\n              commitAddedAppointment,\n              finishCommitAppointment,\n              finishDeleteAppointment,\n\n              stopEditAppointment,\n              cancelAddedAppointment,\n              cancelChangedAppointment,\n\n              openCancelConfirmationDialog,\n              openDeleteConfirmationDialog,\n            }) => {\n              const { isNew, changedAppointment, isFormEdited } = prepareChanges(\n                appointmentData, editingAppointment,\n                addedAppointment, appointmentChanges,\n                resources, plainResources,\n              );\n              const isRecurrence = isFormFullSize(\n                visible, changedAppointment.rRule, previousAppointment.rRule,\n              );\n              return (\n                <CommandLayout\n                  commandButtonComponent={commandButtonComponent}\n                  onCommitButtonClick={this.commitChanges(\n                    finishCommitAppointment, commitAddedAppointment, isNew, changedAppointment,\n                  )}\n                  onCancelButtonClick={this.cancelChanges(\n                    openCancelConfirmationDialog, isNew, stopEditAppointment,\n                    { ...appointmentChanges, ...addedAppointment }, changedAppointment,\n                    cancelAddedAppointment, cancelChangedAppointment,\n                  )}\n                  onDeleteButtonClick={this.deleteAppointment(\n                    finishDeleteAppointment, appointmentData, openDeleteConfirmationDialog,\n                    changedAppointment, cancelAddedAppointment, cancelChangedAppointment,\n                    stopEditAppointment, isNew,\n                  )}\n                  getMessage={getMessage}\n                  readOnly={readOnly}\n                  fullSize={isRecurrence}\n                  disableSaveButton={!isFormEdited}\n                  hideDeleteButton={isNew}\n                />\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n        <Template name=\"basicLayout\">\n          <TemplateConnector>\n            {({\n              editingAppointment,\n              addedAppointment,\n              appointmentChanges,\n              locale,\n\n              resources,\n              plainResources,\n            }, {\n              changeAppointment,\n              changeAddedAppointment,\n            }) => {\n              const { isNew, changedAppointment, appointmentResources } = prepareChanges(\n                appointmentData, editingAppointment,\n                addedAppointment, appointmentChanges,\n                resources, plainResources,\n              );\n              return (\n                <BasicLayout\n                  locale={locale}\n                  appointmentData={visible ? changedAppointment : previousAppointment}\n                  onFieldChange={this.changeAppointmentField(\n                    isNew, changeAddedAppointment, changeAppointment,\n                  )}\n                  getMessage={getMessage}\n                  readOnly={readOnly}\n                  textEditorComponent={textEditorComponent}\n                  dateEditorComponent={dateEditorComponent}\n                  booleanEditorComponent={booleanEditorComponent}\n                  selectComponent={selectComponent}\n                  labelComponent={labelComponent}\n                  resourceEditorComponent={resourceEditorComponent}\n                  fullSize={!changedAppointment.rRule}\n                  resources={resources}\n                  appointmentResources={appointmentResources as Array<ValidResourceInstance>}\n                />\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n\n        <Template name=\"recurrenceLayout\">\n          <TemplateConnector>\n            {({\n              editingAppointment,\n              addedAppointment,\n              appointmentChanges,\n              formatDate,\n              locale,\n              firstDayOfWeek,\n            }, {\n              changeAddedAppointment,\n              changeAppointment,\n            }) => {\n              const { isNew, changedAppointment } = prepareChanges(\n                appointmentData, editingAppointment,\n                addedAppointment, appointmentChanges,\n                undefined, undefined,\n              );\n              const isRecurrenceLayoutVisible = isFormFullSize(\n                visible, changedAppointment.rRule, previousAppointment.rRule,\n              );\n              const correctedAppointment = !changedAppointment.rRule\n                ? { ...changedAppointment, rRule: previousAppointment.rRule } : changedAppointment;\n\n              return (\n                <RecurrenceLayout\n                  locale={locale}\n                  appointmentData={visible ? correctedAppointment : previousAppointment}\n                  onFieldChange={this.changeAppointmentField(\n                    isNew, changeAddedAppointment, changeAppointment,\n                  )}\n                  getMessage={getMessage}\n                  readOnly={readOnly}\n                  formatDate={formatDate}\n                  textEditorComponent={textEditorComponent}\n                  dateEditorComponent={dateEditorComponent}\n                  radioGroupComponent={radioGroupComponent}\n                  weeklyRecurrenceSelectorComponent={weeklyRecurrenceSelectorComponent}\n                  labelComponent={labelComponent}\n                  selectComponent={selectComponent}\n                  visible={isRecurrenceLayoutVisible}\n                  firstDayOfWeek={firstDayOfWeek}\n                />\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n\n        <Template name=\"tooltip\">\n          {(params: AppointmentTooltip.LayoutProps) => (\n            <TemplateConnector>\n              {(getters, { startEditAppointment }) => (\n                <TemplatePlaceholder\n                  params={{\n                    ...params,\n                    onOpenButtonClick: () => {\n                      this.openFormHandler(params.appointmentMeta!.data);\n                      callActionIfExists(startEditAppointment, params.appointmentMeta!.data);\n                    },\n                  }}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n\n        <Template name=\"appointment\">\n          {(params: Appointments.AppointmentProps) => (\n            <TemplateConnector>\n              {(getters, { startEditAppointment }) => (\n                <TemplatePlaceholder\n                  params={{\n                    ...params,\n                    onDoubleClick: () => {\n                      this.openFormHandler(params.data);\n                      callActionIfExists(startEditAppointment, params.data);\n                    },\n                  }}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n\n        <Template name=\"cell\">\n          {(params: any) => (\n            <TemplateConnector>\n              {({ resources }, { addAppointment }) => addDoubleClickToCell(\n                undefined, params.startDate, params.endDate, params.groupingInfo, resources,\n                isAllDayCell(params.startDate, params.endDate),\n                this.openFormHandler, addAppointment, params,\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n\n        <Template name=\"allDayPanelCell\">\n          {(params: any) => (\n            <TemplateConnector>\n              {({ resources }, { addAppointment }) => addDoubleClickToCell(\n                undefined, params.startDate, params.endDate, params.groupingInfo, resources,\n                true, this.openFormHandler, addAppointment, params,\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin >\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** The AppointmentForm plugin renders a form that visualizes appointment’s data and allows a user to modify this data. */\nexport const AppointmentForm: React.ComponentType<AppointmentFormProps> = AppointmentFormBase;\n","import * as React from 'react';\nimport {\n  Plugin, Template, TemplatePlaceholder,\n  TemplateConnector, DropTarget, DragSource,\n  DragDropProvider as DragDropProviderCore,\n  PluginComponents,\n} from '@devexpress/dx-react-core';\nimport {\n  cellIndex, cellData, cellType, getAppointmentStyle, intervalDuration, autoScroll,\n  calculateAppointmentTimeBoundaries, calculateInsidePart, RESIZE_TOP, RESIZE_BOTTOM,\n  POSITION_START, POSITION_END, getAppointmentResources, calculateAppointmentGroups,\n  appointmentDragged, calculateDraftAppointments,\n  HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION, SCROLL_SPEED_PX,\n} from '@devexpress/dx-scheduler-core';\nimport { DragDropProviderProps, DragDropProviderState } from '../types';\n\nconst renderAppointmentItems = (items, Wrapper, draftData) => (\n  items.length > 0 ? (\n    <Wrapper>\n      {items.map((draftAppointment, index) => (\n        <TemplatePlaceholder\n          name=\"draftAppointment\"\n          key={index.toString()}\n          params={{ data: draftData, draftAppointment }}\n        />\n      ))}\n    </Wrapper>\n  ) : (\n    null\n  )\n);\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Appointments' },\n  { name: 'EditRecurrenceMenu', optional: true },\n  { name: 'IntegratedEditing', optional: true },\n  { name: 'DayView', optional: true },\n  { name: 'WeekView', optional: true },\n  { name: 'MonthView', optional: true },\n  { name: 'AllDayPanel', optional: true },\n];\n\nclass DragDropProviderBase extends React.PureComponent<\n  DragDropProviderProps, DragDropProviderState\n> {\n  timeTableDraftAppointments: any = [];\n  allDayDraftAppointments: any = [];\n  offsetTimeTop: number | null = null;\n  appointmentStartTime: any = null;\n  appointmentEndTime: any = null;\n  appointmentGroupingInfo: any = {};\n\n  state: DragDropProviderState = {\n    startTime: null,\n    endTime: null,\n    appointmentGroupingInfo: null,\n    payload: null,\n    isOutside: false,\n    allowDrag: () => true,\n    allowResize: () => true,\n    appointmentContentTemplateKey: 0,\n    appointmentTopTemplateKey: 0,\n    appointmentBottomTemplateKey: 0,\n  };\n  static components: PluginComponents = {\n    containerComponent: 'Container',\n    draftAppointmentComponent: 'DraftAppointment',\n    sourceAppointmentComponent: 'SourceAppointment',\n    resizeComponent: 'Resize',\n  };\n  static defaultProps: Partial<DragDropProviderProps> = {\n    allowDrag: () => true,\n    allowResize: () => true,\n    scrollSpeed: SCROLL_SPEED_PX,\n  };\n  static getDerivedStateFromProps(\n    props: DragDropProviderProps, state: DragDropProviderState,\n  ): DragDropProviderState | null {\n    const isAllowDragSame = props.allowDrag === state.allowDrag;\n    const isAllowResizeSame = props.allowResize === state.allowResize;\n\n    if (isAllowDragSame && isAllowResizeSame) {\n      return null;\n    }\n\n    return {\n      ...state,\n      appointmentContentTemplateKey:\n        isAllowDragSame ? state.appointmentContentTemplateKey : Math.random(),\n      appointmentTopTemplateKey:\n        isAllowResizeSame ? state.appointmentTopTemplateKey : Math.random(),\n      appointmentBottomTemplateKey:\n        isAllowResizeSame ? state.appointmentBottomTemplateKey : Math.random(),\n      allowDrag: props.allowDrag,\n      allowResize: props.allowResize,\n    };\n\n  }\n\n  onPayloadChange(actions) {\n    return args => this.handlePayloadChange(args, actions);\n  }\n\n  calculateNextBoundaries(getters, actions, scrollSpeed) {\n    return args => this.calculateBoundaries(args, getters, actions, scrollSpeed);\n  }\n\n  resetCache() {\n    this.timeTableDraftAppointments = [];\n    this.allDayDraftAppointments = [];\n    this.offsetTimeTop = null;\n    this.appointmentStartTime = null;\n    this.appointmentEndTime = null;\n    this.appointmentGroupingInfo = {};\n\n    this.setState({\n      payload: null,\n      startTime: null,\n      endTime: null,\n      isOutside: false,\n    });\n  }\n\n  applyChanges(\n    startTime, endTime, payload, startEditAppointment, changeAppointment, appointmentGroupingInfo,\n  ) {\n    startEditAppointment(payload);\n    changeAppointment({\n      change: {\n        startDate: startTime,\n        endDate: endTime,\n        ...payload.allDay && { allDay: undefined },\n        ...this.appointmentGroupingInfo,\n      },\n    });\n    this.setState({ startTime, endTime, payload, isOutside: false, appointmentGroupingInfo });\n  }\n\n  handlePayloadChange({ payload }, { finishCommitAppointment }) {\n    const { isOutside } = this.state;\n    if (payload || !isOutside) return;\n\n    finishCommitAppointment();\n    this.resetCache();\n  }\n\n  calculateBoundaries(\n    { payload, clientOffset },\n    {\n      viewCellsData, allDayCellsData, startViewDate, endViewDate, excludedDays, currentView,\n      timeTableElementsMeta, allDayElementsMeta, scrollingStrategy,\n      grouping, resources, groups, groupOrientation: getGroupOrientation, groupByDate,\n    },\n    { changeAppointment, startEditAppointment },\n    scrollSpeed,\n  ) {\n    if (clientOffset) {\n      autoScroll(clientOffset, scrollingStrategy, scrollSpeed);\n    }\n\n    const tableCellElementsMeta = timeTableElementsMeta;\n    const groupOrientation = getGroupOrientation\n      ? getGroupOrientation(currentView?.name)\n      : HORIZONTAL_GROUP_ORIENTATION;\n\n    // AllDayPanel doesn't always exist\n    const allDayCellsElementsMeta = allDayElementsMeta && allDayElementsMeta.getCellRects\n      ? allDayElementsMeta\n      : { getCellRects: [] };\n    const timeTableIndex = cellIndex(tableCellElementsMeta.getCellRects, clientOffset);\n    const allDayIndex = cellIndex(allDayCellsElementsMeta.getCellRects, clientOffset);\n\n    if (allDayIndex === -1 && timeTableIndex === -1) return;\n\n    const targetData = cellData(\n      timeTableIndex, allDayIndex, viewCellsData, allDayCellsData,\n    );\n    const targetType = cellType(targetData);\n    const insidePart = calculateInsidePart(\n      clientOffset.y, tableCellElementsMeta.getCellRects, timeTableIndex,\n    );\n    const cellDurationMinutes = intervalDuration(targetData, 'minutes');\n\n    const {\n      appointmentStartTime, appointmentEndTime, offsetTimeTop,\n    } = calculateAppointmentTimeBoundaries(\n      payload, targetData, targetType, cellDurationMinutes,\n      insidePart, this.offsetTimeTop!,\n    );\n\n    const appointmentGroups = calculateAppointmentGroups(\n      targetData.groupingInfo, resources, payload,\n    );\n\n    this.appointmentStartTime = appointmentStartTime || this.appointmentStartTime;\n    this.appointmentEndTime = appointmentEndTime || this.appointmentEndTime;\n    this.appointmentGroupingInfo = appointmentGroups || this.appointmentGroupingInfo;\n    this.offsetTimeTop = offsetTimeTop!;\n\n    const { startTime, endTime, appointmentGroupingInfo } = this.state;\n    if (!appointmentDragged(\n      this.appointmentStartTime, startTime!,\n      this.appointmentEndTime, endTime!,\n      this.appointmentGroupingInfo, appointmentGroupingInfo,\n    )) {\n      return;\n    }\n\n    const draftAppointments = [{\n      dataItem: {\n        ...payload,\n        startDate: this.appointmentStartTime,\n        endDate: this.appointmentEndTime,\n        ...this.appointmentGroupingInfo,\n      },\n      start: this.appointmentStartTime,\n      end: this.appointmentEndTime,\n    }];\n\n    const {\n      allDayDraftAppointments,\n      timeTableDraftAppointments,\n    } = calculateDraftAppointments(\n      allDayIndex, draftAppointments, startViewDate,\n      endViewDate, excludedDays, viewCellsData, allDayCellsElementsMeta,\n      targetType, cellDurationMinutes, tableCellElementsMeta, grouping, resources, groups,\n      groupOrientation, groupByDate?.(currentView?.name),\n    );\n\n    this.allDayDraftAppointments = allDayDraftAppointments;\n    this.timeTableDraftAppointments = timeTableDraftAppointments;\n\n    this.applyChanges(\n      this.appointmentStartTime, this.appointmentEndTime,\n      payload, startEditAppointment, changeAppointment,\n      this.appointmentGroupingInfo,\n    );\n  }\n\n  handleDrop = ({ finishCommitAppointment }) => () => {\n    finishCommitAppointment();\n    this.resetCache();\n  }\n\n  handleLeave = () => {\n    this.setState({ isOutside: true });\n  }\n\n  render() {\n    const {\n      payload, appointmentContentTemplateKey,\n      appointmentBottomTemplateKey, appointmentTopTemplateKey,\n    } = this.state;\n    const {\n      containerComponent: Container,\n      draftAppointmentComponent: DraftAppointment,\n      sourceAppointmentComponent: SourceAppointment,\n      resizeComponent: Resize,\n      allowDrag,\n      allowResize,\n      scrollSpeed,\n    } = this.props;\n\n    const draftData = {\n      ...payload, startDate: this.appointmentStartTime, endDate: this.appointmentEndTime,\n    };\n\n    return (\n      <Plugin\n        name=\"DragDropProvider\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"body\">\n          <TemplateConnector>\n            {({\n              viewCellsData, allDayCellsData, startViewDate, endViewDate, excludedDays,\n              timeTableElementsMeta, allDayElementsMeta, scrollingStrategy,\n              grouping, resources, groups, currentView, groupByDate, groupOrientation,\n            }, {\n              changeAppointment, startEditAppointment, finishCommitAppointment,\n            }) => {\n              const calculateBoundariesByMove = this.calculateNextBoundaries({\n                viewCellsData, allDayCellsData, currentView,\n                startViewDate, endViewDate, excludedDays,\n                timeTableElementsMeta, allDayElementsMeta, scrollingStrategy,\n                resources, grouping, groups, groupByDate, groupOrientation,\n              }, { changeAppointment, startEditAppointment }, scrollSpeed);\n              return (\n                <DragDropProviderCore\n                  onChange={this.onPayloadChange({ finishCommitAppointment })}\n                >\n                  <DropTarget\n                    onOver={calculateBoundariesByMove}\n                    onEnter={calculateBoundariesByMove}\n                    onDrop={this.handleDrop({ finishCommitAppointment })}\n                    onLeave={this.handleLeave}\n                  >\n                    <TemplatePlaceholder />\n                  </DropTarget>\n                </DragDropProviderCore>\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n\n        <Template\n          name=\"appointmentContent\"\n          predicate={({ data }: any) => allowDrag!(data)}\n          key={appointmentContentTemplateKey}\n        >\n          {({ styles, ...params }: any) => (\n            <DragSource\n              payload={{ ...params.data, type: params.type }}\n            >\n              {payload && params.data.id === payload.id ? (\n                <SourceAppointment {...params} />\n              ) : (\n                <TemplatePlaceholder params={{ ...params, draggable: true }} />\n              )}\n            </DragSource>\n          )}\n        </Template>\n\n        <Template\n          name=\"appointmentTop\"\n          predicate={(params: any) => !params.slice && allowResize!(params.data)}\n          key={appointmentTopTemplateKey}\n        >\n          {({ data, type }: any) => (\n            <DragSource\n              payload={{ ...data, type: RESIZE_TOP, appointmentType: type }}\n            >\n              <Resize position={POSITION_START} appointmentType={type} />\n            </DragSource>\n          )}\n        </Template>\n\n        <Template\n          name=\"appointmentBottom\"\n          predicate={(params: any) => !params.slice && allowResize!(params.data)}\n          key={appointmentBottomTemplateKey}\n        >\n          {({ data, type }: any) => (\n            <DragSource\n              payload={{ ...data, type: RESIZE_BOTTOM, appointmentType: type }}\n            >\n              <Resize position={POSITION_END} appointmentType={type} />\n            </DragSource>\n          )}\n        </Template>\n\n        <Template name=\"allDayPanel\">\n          <TemplateConnector>\n            {({ currentView, groupOrientation }) => (\n              <>\n                <TemplatePlaceholder />\n                {groupOrientation?.(currentView.name) !== VERTICAL_GROUP_ORIENTATION\n                  ? renderAppointmentItems(this.allDayDraftAppointments, Container, draftData)\n                  : null}\n              </>\n            )}\n          </TemplateConnector>\n        </Template>\n\n        <Template name=\"timeTable\">\n          <TemplateConnector>\n            {({ currentView, groupOrientation }) => (\n              <>\n                <TemplatePlaceholder />\n                {renderAppointmentItems(this.timeTableDraftAppointments, Container, draftData)}\n                {groupOrientation?.(currentView.name) === VERTICAL_GROUP_ORIENTATION\n                  ? renderAppointmentItems(this.allDayDraftAppointments, Container, draftData)\n                  : null}\n              </>\n            )}\n          </TemplateConnector>\n        </Template>\n\n        <Template name=\"draftAppointment\">\n          {({ data, draftAppointment, ...restParams }: any) => (\n            <TemplateConnector>\n              {({ formatDate, resources, plainResources }) => {\n                const {\n                  dataItem, type, fromPrev, toNext, durationType, ...geometry\n                } = draftAppointment;\n                return (\n                  <DraftAppointment\n                    data={data}\n                    resources={getAppointmentResources(dataItem, resources, plainResources)}\n                    durationType={durationType}\n                    style={getAppointmentStyle(geometry)}\n                    type={type}\n                    fromPrev={fromPrev}\n                    toNext={toNext}\n                    formatDate={formatDate}\n                    {...restParams}\n                  />\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that enables users to edit appointments via drag-and-drop. */\nexport const DragDropProvider: React.ComponentType<DragDropProviderProps> = DragDropProviderBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Plugin,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  PluginComponents,\n} from '@devexpress/dx-react-core';\nimport { TodayButtonProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Toolbar' },\n  { name: 'ViewState' },\n];\n\nconst defaultMessages = {\n  today: 'Today',\n};\n\nclass TodayButtonBase extends React.PureComponent<TodayButtonProps> {\n  static components: PluginComponents = {\n    buttonComponent: 'Button',\n  };\n  render() {\n    const {\n      buttonComponent: Button,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"TodayButton\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplateConnector>\n            {(getters, {\n              changeCurrentDate,\n            }) => {\n              const setCurrentDate = nextDate => changeCurrentDate({\n                nextDate,\n              });\n              return (\n                <Button\n                  getMessage={getMessage}\n                  setCurrentDate={setCurrentDate}\n                />\n              );\n            }}\n          </TemplateConnector>\n          <TemplatePlaceholder />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Scheduler's button which sets the current date to today's date. */\nexport const TodayButton: React.ComponentType<TodayButtonProps> = TodayButtonBase;\n","import * as React from 'react';\nimport { memoize, getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Plugin, Template, TemplatePlaceholder, TemplateConnector, Action, Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport { RECURRENCE_EDIT_SCOPE } from '@devexpress/dx-scheduler-core';\nimport { EditRecurrenceMenuProps, EditRecurrenceMenuState } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n];\n\nconst defaultAvailableOperations = [\n  { value: RECURRENCE_EDIT_SCOPE.CURRENT },\n  { value: RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING },\n  { value: RECURRENCE_EDIT_SCOPE.ALL },\n];\n\nconst defaultMessages = {\n  [RECURRENCE_EDIT_SCOPE.CURRENT]: 'This appointment',\n  [RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING]: 'This and following appointments',\n  [RECURRENCE_EDIT_SCOPE.ALL]: 'All appointments',\n  menuEditingTitle: 'Edit recurring appointment',\n  menuDeletingTitle: 'Delete recurring appointment',\n  cancelButton: 'Cancel',\n  commitButton: 'OK',\n};\n\nclass EditRecurrenceMenuBase extends React.PureComponent<\n  EditRecurrenceMenuProps, EditRecurrenceMenuState\n> {\n  static components = {\n    layoutComponent: 'Layout',\n    overlayComponent: 'Overlay',\n    buttonComponent: 'Button',\n    containerComponent: 'Container',\n  };\n\n  modalContainer = React.createRef();\n\n  state = {\n    isOpen: false,\n    deletedAppointmentData: null,\n  };\n\n  finishCommitAppointment = (\n    payload,\n    { editingAppointment }: Getters,\n    { commitChangedAppointment }: Actions,\n  ) => {\n    if (editingAppointment && !editingAppointment.rRule) {\n      commitChangedAppointment();\n    } else {\n      this.setState({\n        isOpen: true, deletedAppointmentData: null,\n      });\n    }\n  }\n\n  finishDeleteAppointment = (\n    payload,\n    getters,\n    { commitDeletedAppointment }: Actions,\n  ) => {\n    if (payload && !payload.rRule) {\n      commitDeletedAppointment({ deletedAppointmentData: payload });\n    } else {\n      this.setState({\n        isOpen: true, deletedAppointmentData: payload,\n      });\n    }\n  }\n\n  commit = memoize((editAction, deleteAction, payload) => (type) => {\n    if (payload) {\n      deleteAction({ deletedAppointmentData: payload, type });\n    } else {\n      editAction(type);\n    }\n    this.closeMenu();\n  });\n\n  closeMenu = () => {\n    this.setState({ isOpen: false, deletedAppointmentData: null });\n  }\n\n  cancelEditing = memoize((cancelAction, stopEditAction) => () => {\n    stopEditAction();\n    cancelAction();\n    this.closeMenu();\n  });\n\n  availableOperations = memoize((getMessage, menuAvailableOperations) =>\n    menuAvailableOperations.map(({ value }) => ({\n      value,\n      title: getMessage([value]),\n    })));\n\n  getMessage = memoize((messages, menuMessages) =>\n    getMessagesFormatter({ ...menuMessages, ...messages }));\n\n  render() {\n    const { isOpen, deletedAppointmentData } = this.state;\n    const {\n      layoutComponent: Layout,\n      overlayComponent: Overlay,\n      containerComponent: Container,\n      buttonComponent,\n      messages,\n    } = this.props;\n\n    const getMessage = this.getMessage(messages, defaultMessages);\n    const availableOperations = this.availableOperations(getMessage, defaultAvailableOperations);\n\n    return (\n      <Plugin\n        name=\"EditRecurrenceMenu\"\n        dependencies={pluginDependencies}\n      >\n        <Action name=\"finishCommitAppointment\" action={this.finishCommitAppointment} />\n        <Action name=\"finishDeleteAppointment\" action={this.finishDeleteAppointment} />\n\n        <Template name=\"schedulerRoot\">\n          <TemplatePlaceholder />\n          <Container ref={this.modalContainer} />\n          <TemplatePlaceholder name=\"overlay\" />\n        </Template>\n\n        <Template name=\"overlay\">\n          <TemplateConnector>\n            {(getters, {\n              commitChangedAppointment, commitDeletedAppointment,\n              cancelChangedAppointment, stopEditAppointment,\n            }) => {\n              const commit = this.commit(\n                commitChangedAppointment, commitDeletedAppointment, deletedAppointmentData,\n              );\n              const cancelEditing = this.cancelEditing(\n                cancelChangedAppointment, stopEditAppointment,\n              );\n\n              return (\n                <Overlay\n                  target={this.modalContainer}\n                  visible={isOpen}\n                  onHide={this.closeMenu}\n                >\n                  <Layout\n                    isDeleting={!!deletedAppointmentData}\n                    buttonComponent={buttonComponent}\n                    handleClose={cancelEditing}\n                    commit={commit}\n                    availableOperations={availableOperations}\n                    getMessage={getMessage}\n                  />\n                </Overlay>\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/**\n * A plugin that renders the Scheduler's edit menu.\n * Should not be used with the `IntegratedEditing` plugin.\n */\nexport const EditRecurrenceMenu: React.ComponentType<\n  EditRecurrenceMenuProps\n> = EditRecurrenceMenuBase;\n","import * as React from 'react';\nimport { Action, Plugin, Actions } from '@devexpress/dx-react-core';\nimport { IntegratedEditingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n];\n\nclass IntegratedEditingBase extends React.PureComponent<IntegratedEditingProps> {\n  static defaultProps = {\n    totalCount: 0,\n  };\n\n  finishCommitAppointment = (payload, getters, { commitChangedAppointment }: Actions) => {\n    commitChangedAppointment();\n  }\n\n  finishDeleteAppointment = (payload, getters, { commitDeletedAppointment }: Actions) => {\n    commitDeletedAppointment({ deletedAppointmentData: payload });\n  }\n\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedEditing\"\n        dependencies={pluginDependencies}\n      >\n        <Action name=\"finishCommitAppointment\" action={this.finishCommitAppointment} />\n        <Action name=\"finishDeleteAppointment\" action={this.finishDeleteAppointment} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that allows implementing a editing calculation logic. */\nexport const IntegratedEditing: React.ComponentType<IntegratedEditingProps> = IntegratedEditingBase;\n","import * as React from 'react';\nimport { Plugin, Getter, Getters } from '@devexpress/dx-react-core';\nimport {\n  convertResourcesToPlain, validateResources, addResourcesToAppointments,\n} from '@devexpress/dx-scheduler-core';\nimport { ResourcesProps } from '../types/resources/resources.types';\n\nconst pluginDependencies = [\n  { name: 'Appointments' },\n];\n\nconst addResourcesToTimeTableAppointments = ({\n  timeTableAppointments, resources, plainResources,\n}: Getters) => timeTableAppointments\n  && addResourcesToAppointments(timeTableAppointments[0], resources, plainResources);\nconst addResourcesToAllDayAppointments = ({\n    allDayAppointments, resources, plainResources,\n  }: Getters) => allDayAppointments\n    && addResourcesToAppointments(allDayAppointments[0], resources, plainResources);\n\nconst ResourcesBase: React.SFC<ResourcesProps> = React.memo(({\n  data, mainResourceName, palette,\n}) => {\n  const convertResources = ({ resources }: Getters) =>\n    convertResourcesToPlain(resources);\n\n  return (\n  <Plugin\n    name=\"Resources\"\n    dependencies={pluginDependencies}\n  >\n    <Getter name=\"resources\" value={validateResources(data, mainResourceName, palette)} />\n    <Getter name=\"plainResources\" computed={convertResources} />\n    <Getter name=\"timeTableAppointments\" computed={addResourcesToTimeTableAppointments} />\n    <Getter name=\"allDayAppointments\" computed={addResourcesToAllDayAppointments} />\n  </Plugin>\n  );\n});\n\n/** A plugin that manages schedule's resources. */\nexport const Resources: React.ComponentType<ResourcesProps> = ResourcesBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Plugin,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Action,\n} from '@devexpress/dx-react-core';\nimport { ConfirmationDialogProps } from '../types/editing/confirmation-dialog.types';\nimport { AppointmentModel } from '@devexpress/dx-scheduler-core';\n\nconst defaultMessages = {\n  discardButton: 'Discard',\n  deleteButton: 'Delete',\n  cancelButton: 'Cancel',\n  confirmDeleteMessage: 'Are you sure you want to delete this appointment?',\n  confirmCancelMessage: 'Discard unsaved changes?',\n};\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'EditRecurrenceMenu', optional: true },\n  { name: 'IntegratedEditing', optional: true },\n];\n\nconst ACTION_TYPES = {\n  CANCEL: 'cancel',\n  DELETE: 'delete',\n};\n\nconst ConfirmationDialogBase: React.SFC<ConfirmationDialogProps> & {components: {\n  overlayComponent: string, containerComponent: string,\n  layoutComponent: string, buttonComponent: string,\n}} = ({\n  messages, overlayComponent: Overlay, layoutComponent: Layout, containerComponent: Container,\n  buttonComponent, ignoreDelete, ignoreCancel,\n}) => {\n  const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n  const modalContainer = React.useRef();\n\n  const [visible, setVisible] = React.useState(false);\n  const [actionType, setActionType] = React.useState('');\n  const [hideActionName, setHideActionName] = React.useState('');\n  const [appointmentData, setAppointmentData] = React.useState({});\n\n  const toggleVisibility = React.useCallback(() => {\n    setVisible(!visible);\n  }, [visible, setVisible]);\n\n  const confirmCancelChanges = React.useCallback((hideAction) => {\n    toggleVisibility();\n    setHideActionName(hideAction);\n    setActionType(ACTION_TYPES.CANCEL);\n  }, [toggleVisibility, setHideActionName, setActionType]);\n\n  const confirmDelete = React.useCallback(({\n    hideActionName: hideAction, appointmentData: changedAppointment,\n  }) => {\n    toggleVisibility();\n    setHideActionName(hideAction);\n    setActionType(ACTION_TYPES.DELETE);\n    setAppointmentData(changedAppointment);\n  }, [toggleVisibility, setHideActionName, setActionType, setAppointmentData]);\n\n  const confirmAction = React.useCallback((\n    isNewAppointment, hideEditor, stopEditAppointment, finishDeleteAppointment,\n    cancelAddedAppointment, cancelChangedAppointment,\n  ) => () => {\n    hideEditor();\n    toggleVisibility();\n    if (isNewAppointment) {\n      cancelAddedAppointment();\n    } else {\n      stopEditAppointment();\n      cancelChangedAppointment();\n    }\n    if (actionType === ACTION_TYPES.DELETE) {\n      finishDeleteAppointment(appointmentData);\n    }\n  }, [toggleVisibility, actionType, appointmentData]);\n\n  return (\n    <Plugin\n      name=\"ConfirmationDialog\"\n      dependencies={pluginDependencies}\n    >\n      {!ignoreCancel &&\n        <Action name=\"openCancelConfirmationDialog\" action={confirmCancelChanges} />\n      }\n      {!ignoreDelete &&\n        <Action name=\"openDeleteConfirmationDialog\" action={confirmDelete} />\n      }\n\n      <Template name=\"schedulerRoot\">\n        <TemplatePlaceholder />\n        <Container ref={modalContainer} />\n        <TemplatePlaceholder name=\"confirmationDialogOverlay\" />\n      </Template>\n\n      <Template name=\"confirmationDialogOverlay\">\n        <TemplateConnector>\n          {({\n            editingAppointment,\n          }, actions) => {\n            const handleConfirm = confirmAction(\n              !editingAppointment, actions[hideActionName], actions.stopEditAppointment,\n              actions.finishDeleteAppointment, actions.cancelAddedAppointment,\n              actions.cancelChangedAppointment,\n            );\n\n            return (\n              <Overlay\n                target={modalContainer}\n                visible={visible}\n                onHide={toggleVisibility}\n              >\n                <Layout\n                  buttonComponent={buttonComponent}\n                  handleCancel={toggleVisibility}\n                  handleConfirm={handleConfirm}\n                  getMessage={getMessage}\n                  isDeleting={actionType === ACTION_TYPES.DELETE}\n                  appointmentData={appointmentData as AppointmentModel}\n                />\n              </Overlay>\n            );\n          }}\n        </TemplateConnector>\n      </Template>\n    </Plugin>\n  );\n};\n\nConfirmationDialogBase.components = {\n  overlayComponent: 'Overlay',\n  containerComponent: 'Container',\n  layoutComponent: 'Layout',\n  buttonComponent: 'Button',\n};\n\nConfirmationDialogBase.defaultProps = {\n  ignoreCancel: false,\n  ignoreDelete: false,\n};\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that renders the dialog which allows users to confirm or to discard delete and cancel appointment actions. */\nexport const ConfirmationDialog: React.ComponentType<\n  ConfirmationDialogProps\n> = ConfirmationDialogBase;\n","import * as React from 'react';\nimport {\n  Action, Plugin, Getter, StateHelper, ActionFn, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  ToggleGroupPayload, toggleExpandedGroups, HORIZONTAL_GROUP_ORIENTATION,\n} from '@devexpress/dx-scheduler-core';\nimport { GroupingStateProps, GroupingStateState } from '../types';\n\nclass GroupingStateBase extends React.PureComponent<GroupingStateProps, GroupingStateState> {\n  static defaultProps = {\n    defaultExpandedGroups: [],\n    groupByDate: () => false,\n    groupOrientation: () => HORIZONTAL_GROUP_ORIENTATION,\n  };\n  stateHelper: StateHelper;\n  toggleGroupExpanded: ActionFn<ToggleGroupPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      grouping: props.grouping,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups,\n    };\n    this.stateHelper = createStateHelper(\n      this,\n      {\n        expandedGroups: () => {\n          const { onExpandedGroupsChange } = this.props;\n          return onExpandedGroupsChange;\n        },\n      },\n    );\n    this.toggleGroupExpanded = this.stateHelper.applyReducer\n      .bind(this.stateHelper, toggleExpandedGroups);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      grouping = prevState.grouping,\n      expandedGroups = prevState.expandedGroups,\n    } = nextProps;\n\n    return { grouping, expandedGroups };\n  }\n\n  render() {\n    const { grouping, expandedGroups } = this.state;\n    const { groupByDate, groupOrientation } = this.props;\n\n    return (\n      <Plugin name=\"GroupingState\">\n        <Getter name=\"grouping\" value={grouping} />\n        <Getter name=\"groupByDate\" value={groupByDate} />\n        <Getter name=\"groupOrientation\" value={groupOrientation} />\n\n        <Getter name=\"expandedGroups\" value={expandedGroups} />\n        <Action name=\"toggleGroupExpanded\" action={this.toggleGroupExpanded} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the grouping state. */\nexport const GroupingState: React.ComponentType<GroupingStateProps> = GroupingStateBase;\n","import * as React from 'react';\nimport {\n  Plugin,\n  Template,\n  TemplateConnector,\n  PluginComponents,\n} from '@devexpress/dx-react-core';\nimport { GroupingPanelProps } from '../types';\nimport {\n  VERTICAL_VIEW_LEFT_OFFSET, HORIZONTAL_VIEW_LEFT_OFFSET,\n  HORIZONTAL_GROUP_ORIENTATION, VIEW_TYPES,\n} from '@devexpress/dx-scheduler-core';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n  { name: 'IntegratedGrouping' },\n  { name: 'DayView', optional: true },\n  { name: 'MonthView', optional: true },\n  { name: 'WeekView', optional: true },\n  { name: 'ViewState', optional: true },\n];\n\nclass GroupingPanelBase extends React.PureComponent<GroupingPanelProps> {\n  static components: PluginComponents = {\n    horizontalLayoutComponent: 'HorizontalLayout',\n    verticalLayoutComponent: 'VerticalLayout',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n  };\n\n  render() {\n    const {\n      horizontalLayoutComponent: HorizontalLayout,\n      verticalLayoutComponent: VerticalLayout,\n      rowComponent,\n      cellComponent,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"GroupingPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"groupingPanel\">\n          <TemplateConnector>\n            {({\n              viewCellsData, currentView, scrollingStrategy, allDayPanelExists,\n              groupByDate, groupOrientation: getGroupOrientation, groups,\n            }) => {\n              const groupOrientation = getGroupOrientation(currentView?.name);\n              return groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? (\n                <HorizontalLayout\n                  rowComponent={rowComponent}\n                  cellComponent={cellComponent}\n                  groups={groups}\n                  colSpan={viewCellsData[0].length}\n                  cellStyle={{\n                    left: scrollingStrategy.fixedLeftWidth ? scrollingStrategy.fixedLeftWidth\n                    : currentView?.type === VIEW_TYPES.MONTH\n                      ? HORIZONTAL_VIEW_LEFT_OFFSET\n                      : VERTICAL_VIEW_LEFT_OFFSET,\n                  }}\n                  showHeaderForEveryDate={groupByDate?.(currentView && currentView.name)}\n                />\n              ) : (\n                <VerticalLayout\n                  rowComponent={rowComponent}\n                  cellComponent={cellComponent}\n                  groups={groups}\n                  rowSpan={viewCellsData.length}\n                  viewType={currentView?.type}\n                  cellTextTopOffset={scrollingStrategy?.fixedTopHeight}\n                  alignWithAllDayRow={allDayPanelExists}\n                />\n              );\n            }}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the grouping panel used to display group names. */\nexport const GroupingPanel: React.ComponentType<GroupingPanelProps> = GroupingPanelBase;\n","import * as React from 'react';\nimport {\n  Plugin,\n  Template,\n  TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport {\n  isMonthCell, isShadedAppointment,\n  isCellShaded, getCurrentTimeIndicatorTop,\n} from '@devexpress/dx-scheduler-core';\nimport { CurrentTimeIndicatorProps, Appointments } from '../types';\n\nconst pluginDependencies = [\n  { name: 'DayView', optional: true },\n  { name: 'WeekView', optional: true },\n  { name: 'MonthView', optional: true },\n  { name: 'DragDropProvider', optional: true },\n  { name: 'Appointments', optional: true },\n];\n\nconst CurrentTimeIndicatorBase: React.SFC<CurrentTimeIndicatorProps>  & {components: {\n  indicatorComponent: string,\n}} = ({\n  indicatorComponent, shadePreviousAppointments, shadePreviousCells, updateInterval,\n}) => {\n  const [currentTime, setCurrentTime] = React.useState(Date.now);\n\n  React.useEffect(() => {\n    const tick = () => setCurrentTime(Date.now());\n    const intervalId = (updateInterval\n      ? window.setInterval(tick, updateInterval)\n      : undefined\n    );\n    return () => window.clearInterval(intervalId);\n  }, [updateInterval]);\n\n  return (\n    <Plugin\n      name=\"CurrentTimeIndicator\"\n      dependencies={pluginDependencies}\n    >\n      <Template\n        name=\"cell\"\n        predicate={({ otherMonth }: any) => !isMonthCell(otherMonth)}\n      >\n        {(params: any) => (\n          <TemplatePlaceholder\n            params={{\n              ...params,\n              currentTimeIndicatorPosition: getCurrentTimeIndicatorTop(params, currentTime),\n              currentTimeIndicatorComponent: indicatorComponent,\n            }}\n          />\n        )}\n      </Template>\n      <Template\n        name=\"cell\"\n      >\n        {(params: any) => (\n          <TemplatePlaceholder\n            params={{\n              ...params,\n              isShaded: isCellShaded(params, currentTime, shadePreviousCells),\n            }}\n          />\n        )}\n      </Template>\n      <Template\n        name=\"appointmentContent\"\n      >\n        {(params: Appointments.AppointmentProps) => (\n          <TemplatePlaceholder\n            params={{\n              ...params,\n              isShaded: isShadedAppointment(\n                params, currentTime, shadePreviousAppointments,\n              ),\n            }}\n          />\n        )}\n      </Template>\n      <Template\n        name=\"draftAppointment\"\n      >\n        {(params: Appointments.AppointmentProps) => (\n          <TemplatePlaceholder\n            params={{\n              ...params,\n              isShaded: isShadedAppointment(\n                params, currentTime, shadePreviousAppointments,\n              ),\n            }}\n          />\n        )}\n      </Template>\n    </Plugin>\n  );\n};\n\nCurrentTimeIndicatorBase.defaultProps = {\n  updateInterval: 60000,\n  shadePreviousCells: false,\n  shadePreviousAppointments: false,\n};\n\nCurrentTimeIndicatorBase.components = {\n  indicatorComponent: 'Indicator',\n};\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that renders the current time indicator and the shading that covers appointments and timetable cells up to the current time. */\nexport const CurrentTimeIndicator: React.ComponentType<\n  CurrentTimeIndicatorProps\n> = CurrentTimeIndicatorBase;\n","import * as React from 'react';\nimport { Plugin, Getter, Getters } from '@devexpress/dx-react-core';\nimport {\n  getGroupsFromResources, expandViewCellsDataWithGroups,\n  sortFilteredResources, filterResourcesByGrouping, updateGroupingWithMainResource,\n  expandGroups, VERTICAL_GROUP_ORIENTATION, VIEW_TYPES,\n  updateTimeTableCellElementsMeta, updateAllDayCellElementsMeta, updateTimeCellsData,\n} from '@devexpress/dx-scheduler-core';\nimport { IntegratedGroupingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Resources' },\n  { name: 'GroupingState' },\n  { name: 'DayView', optional: true },\n  { name: 'MonthView', optional: true },\n  { name: 'WeekView', optional: true },\n];\n\nconst getViewCellsDataComputed = ({\n  viewCellsData, groups, resourcesToGroupBy, groupByDate, currentView, groupOrientation,\n}: Getters) => expandViewCellsDataWithGroups(\n  viewCellsData, groups, resourcesToGroupBy,\n  groupByDate(currentView.name), groupOrientation(currentView.name),\n);\nconst getAllDayCellsDataComputed = ({\n  allDayCellsData, groups, resourcesToGroupBy, groupByDate, currentView, groupOrientation,\n}: Getters) => allDayCellsData && expandViewCellsDataWithGroups(\n  allDayCellsData, groups, resourcesToGroupBy,\n  groupByDate(currentView.name), groupOrientation(currentView.name),\n);\n\nconst getGroupsComputed = (\n  { resourcesToGroupBy }: Getters,\n) => getGroupsFromResources(resourcesToGroupBy);\n\nconst getResourcesToGroupByComputed = (\n  { resources, grouping }: Getters,\n) => sortFilteredResources(filterResourcesByGrouping(resources, grouping), grouping);\n\nconst getGroupingComputed = (\n  { grouping, resources }: Getters,\n) => updateGroupingWithMainResource(grouping, resources);\n\nconst getTimeTableAppointmentsComputed = ({\n  timeTableAppointments, grouping, resourcesToGroupBy,\n  groups, groupByDate, currentView, excludedDays,\n}: Getters) => timeTableAppointments\n  && expandGroups(\n    timeTableAppointments, grouping, resourcesToGroupBy, groups,\n    excludedDays, groupByDate(currentView?.name) && currentView?.type === VIEW_TYPES.MONTH,\n  );\n\nconst getAllDayAppointmentsComputed = ({\n    allDayAppointments, grouping, resourcesToGroupBy,\n    groups, groupByDate, currentView, excludedDays,\n  }: Getters) => allDayAppointments &&\n  expandGroups(\n    allDayAppointments, grouping, resourcesToGroupBy,\n    groups, excludedDays, groupByDate(currentView?.name),\n  );\n\nconst getGroupByDateComputed = ({\n  currentView, groupByDate, groupOrientation,\n}: Getters) => groupOrientation(currentView?.name) === VERTICAL_GROUP_ORIENTATION\n  ? () => false : groupByDate;\n\nconst getTimeTableElementsMetaComputed = ({\n  timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData, currentView,\n}: Getters) => updateTimeTableCellElementsMeta(\n  timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData, currentView,\n);\n\nconst getAllDayElementsMetaComputed = ({\n  allDayElementsMeta, timeTableElementsMeta, groupOrientation, groups,\n  allDayPanelExists, viewCellsData, currentView,\n}: Getters) => updateAllDayCellElementsMeta(\n  allDayElementsMeta, timeTableElementsMeta, groupOrientation, groups,\n  allDayPanelExists, viewCellsData, currentView,\n);\n\nconst getTimeCellsDataComputed = ({\n  viewCellsData, timeCellsData,  currentView,\n  groups, resourcesToGroupBy, groupOrientation,\n}: Getters) => timeCellsData\n  && updateTimeCellsData(\n    viewCellsData,\n    timeCellsData,\n    groups,\n    resourcesToGroupBy,\n    groupOrientation(currentView.name),\n  );\n\nconst IntegratedGroupingBase: React.SFC<IntegratedGroupingProps> = React.memo(() => (\n  <Plugin\n    name=\"IntegratedGrouping\"\n    dependencies={pluginDependencies}\n  >\n    <Getter name=\"groupByDate\" computed={getGroupByDateComputed} />\n    <Getter name=\"grouping\" computed={getGroupingComputed} />\n    <Getter name=\"resourcesToGroupBy\" computed={getResourcesToGroupByComputed} />\n    <Getter name=\"groups\" computed={getGroupsComputed} />\n\n    <Getter name=\"viewCellsData\" computed={getViewCellsDataComputed} />\n    <Getter name=\"allDayCellsData\" computed={getAllDayCellsDataComputed} />\n    <Getter name=\"timeCellsData\" computed={getTimeCellsDataComputed} />\n\n    <Getter name=\"timeTableAppointments\" computed={getTimeTableAppointmentsComputed} />\n    <Getter name=\"allDayAppointments\" computed={getAllDayAppointmentsComputed} />\n\n    <Getter name=\"allDayElementsMeta\" computed={getAllDayElementsMetaComputed} />\n    <Getter name=\"timeTableElementsMeta\" computed={getTimeTableElementsMetaComputed} />\n  </Plugin>\n));\n\n/** A plugin that implements grouping. */\nexport const IntegratedGrouping: React.ComponentType<\n  IntegratedGroupingProps\n> = IntegratedGroupingBase;\n"]},"metadata":{},"sourceType":"module"}